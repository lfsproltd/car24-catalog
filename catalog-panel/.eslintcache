[{"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/index.js":"1","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/App.js":"2","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/reportWebVitals.js":"3","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/router/routes.js":"4","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/index.js":"5","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/router/OktaRoutes.js":"6","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/inits/history.js":"7","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/AsyncComponent.js":"8","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Layouts/AdminLayout.js":"9","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/account/UnAuthAccessComponent.js":"10","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/utils/okta/config.js":"11","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/account/AccountContainer.js":"12","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/yardQa/yardQaContainer.js":"13","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/yardQaDetail/yardQaDetailsContainer.js":"14","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/inspectionHistory/inspectionHistoryContainer.js":"15","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorder/workorderListingContainer.js":"16","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorderDetail/workorderListingDetailContainer.js":"17","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/estimate/estimateListingContainer.js":"18","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workshopQa/workshopQaContainer.js":"19","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/estimateDetails/estimateDetailsContainer.js":"20","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workshopQaDetail/workshopQaDetailsContainer.js":"21","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/inspectionHistoryDetail/inspectionHistoryDetailContainer.js":"22","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/reducer/index.js":"23","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/account/AccountComponent.js":"24","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Footer.js":"25","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Header.js":"26","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/showAlert.js":"27","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/LeftNav.js":"28","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/utils/utils.js":"29","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/inspectionHistory/inspectionHistoryComponent.js":"30","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorder/workorderListingComponent.js":"31","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/yardQa/yardQaComponent.js":"32","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/yardQaDetail/yardQaDetailsComponent.js":"33","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/inspectionHistoryDetail/inspectionHistoryDetailsComponent.js":"34","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workshopQa/workshopQaComponent.js":"35","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorderDetail/workorderListingDetailComponent.js":"36","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/estimateDetails/estimateDetailsComponent.js":"37","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/estimate/estimateListingComponent.js":"38","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workshopQaDetail/workshopQaDetailsComponent.js":"39","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/actions/workshopQaManagement/workshopQaManagement.action.js":"40","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/actions/commonAction/common.action.js":"41","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/reducer/workshopReducer.js":"42","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/reducer/commonReducer.js":"43","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/account/OktaSignInWidget.js":"44","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/GridCustomCell.js":"45","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorderDetail/workorderPrintComponent.js":"46","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/utils/constants/values.constants.js":"47","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/utils/constants/api.constants.js":"48","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/inspectionTimeCell.js":"49","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/workshopNameCell.js":"50","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/AppointmentIdCell.js":"51","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/assignedToCell.js":"52","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/makeModelCell.js":"53","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/dialog/customDialog.js":"54","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/summaryListDetail/summaryListComponent.js":"55","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/components/question-mark-pop-up.js":"56","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/popup/index.js":"57","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/actions/workshopQaManagement/workshopQaManagement.actionType.js":"58","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/inits/axios.js":"59","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/actions/commonAction/common.actiontype.js":"60","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/popup/component.js":"61"},{"size":635,"mtime":1632489256849,"results":"62","hashOfConfig":"63"},{"size":340,"mtime":1632409085373,"results":"64","hashOfConfig":"63"},{"size":362,"mtime":1632409085420,"results":"65","hashOfConfig":"63"},{"size":374,"mtime":1632409085420,"results":"66","hashOfConfig":"63"},{"size":510,"mtime":1632409085423,"results":"67","hashOfConfig":"63"},{"size":3786,"mtime":1632489844500,"results":"68","hashOfConfig":"63"},{"size":111,"mtime":1632409085418,"results":"69","hashOfConfig":"63"},{"size":732,"mtime":1632409085373,"results":"70","hashOfConfig":"63"},{"size":644,"mtime":1632409085412,"results":"71","hashOfConfig":"63"},{"size":2124,"mtime":1632409085427,"results":"72","hashOfConfig":"63"},{"size":922,"mtime":1632409085426,"results":"73","hashOfConfig":"63"},{"size":536,"mtime":1632409085427,"results":"74","hashOfConfig":"63"},{"size":2338,"mtime":1632409085436,"results":"75","hashOfConfig":"63"},{"size":2859,"mtime":1632409085437,"results":"76","hashOfConfig":"63"},{"size":2408,"mtime":1632409085430,"results":"77","hashOfConfig":"63"},{"size":2627,"mtime":1632409085433,"results":"78","hashOfConfig":"63"},{"size":2635,"mtime":1632409085433,"results":"79","hashOfConfig":"63"},{"size":2622,"mtime":1632409085428,"results":"80","hashOfConfig":"63"},{"size":2356,"mtime":1632409085434,"results":"81","hashOfConfig":"63"},{"size":2715,"mtime":1632409085430,"results":"82","hashOfConfig":"63"},{"size":3412,"mtime":1632409085435,"results":"83","hashOfConfig":"63"},{"size":3380,"mtime":1632409085430,"results":"84","hashOfConfig":"63"},{"size":305,"mtime":1632409085424,"results":"85","hashOfConfig":"63"},{"size":3917,"mtime":1632409085427,"results":"86","hashOfConfig":"63"},{"size":389,"mtime":1632409085410,"results":"87","hashOfConfig":"63"},{"size":7626,"mtime":1632409085412,"results":"88","hashOfConfig":"63"},{"size":1592,"mtime":1632409085417,"results":"89","hashOfConfig":"63"},{"size":2459,"mtime":1632409085412,"results":"90","hashOfConfig":"63"},{"size":7979,"mtime":1632409085426,"results":"91","hashOfConfig":"63"},{"size":3623,"mtime":1632409085430,"results":"92","hashOfConfig":"63"},{"size":4056,"mtime":1632409085432,"results":"93","hashOfConfig":"63"},{"size":3749,"mtime":1632409085436,"results":"94","hashOfConfig":"63"},{"size":83475,"mtime":1632409085437,"results":"95","hashOfConfig":"63"},{"size":45959,"mtime":1632409085431,"results":"96","hashOfConfig":"63"},{"size":3814,"mtime":1632409085434,"results":"97","hashOfConfig":"63"},{"size":11528,"mtime":1632409085433,"results":"98","hashOfConfig":"63"},{"size":40365,"mtime":1632409085429,"results":"99","hashOfConfig":"63"},{"size":4053,"mtime":1632409085428,"results":"100","hashOfConfig":"63"},{"size":105994,"mtime":1632409085435,"results":"101","hashOfConfig":"63"},{"size":16808,"mtime":1632409085422,"results":"102","hashOfConfig":"63"},{"size":344,"mtime":1632409085421,"results":"103","hashOfConfig":"63"},{"size":4415,"mtime":1632409085424,"results":"104","hashOfConfig":"63"},{"size":886,"mtime":1632409085424,"results":"105","hashOfConfig":"63"},{"size":1023,"mtime":1632409085427,"results":"106","hashOfConfig":"63"},{"size":398,"mtime":1632409085411,"results":"107","hashOfConfig":"63"},{"size":11889,"mtime":1632409085434,"results":"108","hashOfConfig":"63"},{"size":3636,"mtime":1632409085425,"results":"109","hashOfConfig":"63"},{"size":4515,"mtime":1632409085425,"results":"110","hashOfConfig":"63"},{"size":270,"mtime":1632409085414,"results":"111","hashOfConfig":"63"},{"size":334,"mtime":1632409085414,"results":"112","hashOfConfig":"63"},{"size":285,"mtime":1632409085413,"results":"113","hashOfConfig":"63"},{"size":1669,"mtime":1632409085413,"results":"114","hashOfConfig":"63"},{"size":347,"mtime":1632409085414,"results":"115","hashOfConfig":"63"},{"size":965,"mtime":1632409085428,"results":"116","hashOfConfig":"63"},{"size":13320,"mtime":1632409085432,"results":"117","hashOfConfig":"63"},{"size":2473,"mtime":1632409085417,"results":"118","hashOfConfig":"63"},{"size":325,"mtime":1632409085415,"results":"119","hashOfConfig":"63"},{"size":1396,"mtime":1632409085423,"results":"120","hashOfConfig":"63"},{"size":1673,"mtime":1632409085418,"results":"121","hashOfConfig":"63"},{"size":169,"mtime":1632409085422,"results":"122","hashOfConfig":"63"},{"size":1487,"mtime":1632409085415,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"16fzq0v",{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"126"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"126"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"126"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"126"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"126"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"126"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"126"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"126"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"126"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"126"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"126"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"126"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"126"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"126"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"126"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"126"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"126"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"126"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"126"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"126"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"126"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"126"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":6,"source":"213","usedDeprecatedRules":"126"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":2,"source":"216","usedDeprecatedRules":"126"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"126"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"126"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"126"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"126"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":56,"fixableErrorCount":0,"fixableWarningCount":8,"source":"231","usedDeprecatedRules":"126"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"126"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"126"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"126"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"126"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"126"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"126"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"126"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"126"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"126"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"126"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"126"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/index.js",[],["287","288"],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/App.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/reportWebVitals.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/router/routes.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/index.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/router/OktaRoutes.js",["289"],"import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { OktaAuth } from '@okta/okta-auth-js';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport AdminLayout from '../common/Layouts/AdminLayout';\nimport asyncComponent from './../AsyncComponent';\nimport config from './../utils/okta/config';\nimport { Security, SecureRoute, LoginCallback } from '@okta/okta-react';\n\nconst oktaAuth = new OktaAuth(config.oidc);\n\nconst accountContainer = asyncComponent(() =>\n  import('../views/account/AccountContainer').then(module => module.default)\n);\n\nconst unAuthComp = asyncComponent(() =>\n  import('../views/account/UnAuthAccessComponent').then(module => module.default)\n);\n\nconst workshopQaContainer = asyncComponent(() => \n  import('../views/workshopQa/workshopQaContainer').then(module => module.default)\n);\n\nconst workshopQaDetailsContainer = asyncComponent(() => \n  import('../views/workshopQaDetail/workshopQaDetailsContainer').then(module => module.default)\n);\n\nconst yardQaContainer = asyncComponent(()=> \n  import('../views/yardQa/yardQaContainer').then(module=> module.default)\n);\n\nconst yardQaDetailsContainer = asyncComponent(()=> \n  import('../views/yardQaDetail/yardQaDetailsContainer').then(module=> module.default)\n);\n\nconst inspectionHistoryContainer = asyncComponent(()=>\n  import('../views/inspectionHistory/inspectionHistoryContainer').then(module=> module.default)\n);\n\nconst inspectionHistoryListingDetailsContainer = asyncComponent(()=>\n  import('../views/inspectionHistoryDetail/inspectionHistoryDetailContainer').then(module=> module.default)\n)\n\nconst estimateListingContainer = asyncComponent(()=>\n  import('../views/estimate/estimateListingContainer').then(module=> module.default)\n);\n\nconst estimateDetailContainer = asyncComponent(()=>\n  import('../views/estimateDetails/estimateDetailsContainer').then(module=> module.default)\n);\n\nconst workorderListingContainer = asyncComponent(()=>\n  import('../views/workorder/workorderListingContainer').then(module=> module.default)\n);\n\nconst workorderDetailContainer = asyncComponent(()=>\n  import('../views/workorderDetail/workorderListingDetailContainer').then(module=> module.default)\n);\n\nfunction OktaRoutes() {\n  const history = useHistory();\n\n  const onAuthRequired = function () {\n    history.push('/')\n  }\n\n  return (\n    <Security oktaAuth={oktaAuth} onAuthRequired={onAuthRequired}>\n      <Switch>\n        <Route exact path=\"/\" component={accountContainer} />\n        <Route path=\"/implicit/callback\" component={LoginCallback} />\n        <Route exact path=\"/workshop-qa\" component={AdminLayout(workshopQaContainer)} />\n        <Route exact path=\"/yard-qa\" component={AdminLayout(yardQaContainer)} />\n        <Route exact path=\"/yard-qa/:appointmentId/:version\" component={AdminLayout(yardQaDetailsContainer)} />\n        <Route exact path=\"/inspection-history-qa\" component={AdminLayout(inspectionHistoryContainer)} />\n        <Route exact path=\"/inspection-history-qa/:appointmentId/:version\" component={AdminLayout(inspectionHistoryListingDetailsContainer)} />\n        <Route exact path=\"/workshop-qa/:appointmentId/:version\" component={AdminLayout(workshopQaDetailsContainer)} />\n        <Route exact path=\"/estimate\" component={AdminLayout(estimateListingContainer)} />\n        <Route exact path=\"/estimate-detail/:appointmentId/:version\" component={AdminLayout(estimateDetailContainer)} />        \n        <Route exact path=\"/work-order\" component={AdminLayout(workorderListingContainer)} />\n        <Route exact path=\"/work-order/:appointmentId/:version\" component={AdminLayout(workorderDetailContainer)} />  \n        <Route exact path=\"/unauthorized\" component={unAuthComp} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </Security>\n  );\n}\n\nexport default OktaRoutes;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/inits/history.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/AsyncComponent.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Layouts/AdminLayout.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/account/UnAuthAccessComponent.js",["290","291"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { getUserData } from './../../utils/utils';\n\nconst UnAuthAccessComponent = (props) => {\n\n    const historyLink = useHistory();\n    const { authState, oktaAuth } = useOktaAuth();\n    const [userData, setUserData] = useState({});\n\n    useEffect(() => {\n        if (getUserData()) {\n            setUserData(getUserData());\n        } else {\n            historyLink.push(\"/\");\n        }\n    }, []);\n\n    const logout = ()=> {\n        oktaAuth.signOut('/');\n        localStorage.clear();\n        sessionStorage.clear();\n    }\n\n    return (\n      <>\n      <header className=\"headerSection unAuthHeader\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n\n                        <div className=\"col-lg-2\">\n                        <div className=\"sidebar-header\">\n                          <h3>Catalog Panel</h3>\n                      </div>\n                        </div>\n                        <div className=\"col-lg-10\">\n                            <div className=\"userName\">\n                                {userData && userData.name} <span className=\"k-icon k-i-arrow-chevron-down\"></span>\n\n                                <ul className=\"userDropdown\">\n                                    <li onClick={logout}>Logout</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </header>\n\n            <div className=\"unAuthriseContent\">\n                <h3 style={{color: '#EB3B2C'}}>Unauthorized Access</h3>\n                <p>You are trying to access a page for which you are not authorized, please contact administrator.\n                </p>\n            </div>\n\n            <div className=\"col-lg-12\">\n                <div className=\"footer unauthFooter\">\n                Copyright © 2020 CARS24. All rights reserved.\n                </div>\n            </div>\n      </>\n    )\n}\n\nexport default UnAuthAccessComponent;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/utils/okta/config.js",["292"],"let CLIENT_ID = '0oaxava41L95FME7I1d6';\nlet BASE_URL = 'https://cars24.oktapreview.com';\nlet REDIRECT_URI = `${window.location.origin}/implicit/callback`;\nswitch (process.env.REACT_APP_ENV) {\n  case 'qa':\n    CLIENT_ID = '0oaxava41L95FME7I1d6';\n    BASE_URL = 'https://cars24.oktapreview.com';\n    break;\n  case 'staging':\n    CLIENT_ID = '0oaxava41L95FME7I1d6';\n    BASE_URL = 'https://cars24.oktapreview.com';\n    break;\n  case 'prod':\n    CLIENT_ID = '0oa3prnqe81kJ0VK94x7';\n    BASE_URL = 'https://cars24.okta.com';\n    REDIRECT_URI = `https://catalog-panel.c24.tech/implicit/callback`;\n    break;\n  default:\n    CLIENT_ID = '0oaxava41L95FME7I1d6';\n    BASE_URL = 'https://cars24.oktapreview.com';\n    break;\n}\n\nexport default {\n  oidc: {\n    baseUrl: BASE_URL,\n    clientId: CLIENT_ID,\n    issuer: BASE_URL + '/oauth2/default',\n    redirectUri: REDIRECT_URI,\n    scopes: ['openid', 'profile', 'email', 'phone']\n  }\n};","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/account/AccountContainer.js",["293"],"import React, { Component } from 'react';\nimport AccountComponent from './AccountComponent';\nimport { connect } from 'react-redux';\n\nclass AccountContainer extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return (\n            <div>\n                <AccountComponent />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n    };\n};\nconst mapDispatchToProps = {\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AccountContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/yardQa/yardQaContainer.js",["294"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport { setToasterMessage } from '../../store/actions/commonAction/common.action';\nimport YardQaComponent from './yardQaComponent';\nimport {getYardListing,assignAppointmentId,getWorkshopListingCount,searchAppointment} from './../../store/actions/workshopQaManagement/workshopQaManagement.action';\n\nclass WorkshopQaContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        this.props.getYardListing();\n        this.props.getWorkshopListingCount(\"yard\");\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"><img src={loaderImg} alt=\"loader\" /></div>}\n                <YardQaComponent \n                    getYardListing={getYardListing}\n                    yardListing={this.props.yardListing}\n                    toasterType={this.props.toasterType}\n                    toasterMessage={this.props.toasterMessage}\n                    showToaster={this.props.showToaster}\n                    assignAppointmentId={assignAppointmentId}\n                    qaListingCount={this.props.qaListingCount}\n                    getWorkshopListingCount={getWorkshopListingCount}\n                    searchAppointmentId={searchAppointment}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        toasterType: state.commonReducer.toasterType,\n        toasterMessage: state.commonReducer.toasterMessage,\n        showToaster: state.commonReducer.showToaster,\n        yardListing:state.workshopReducer.yardListing,\n        qaListingCount:state.workshopReducer.qaListingCount\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getYardListing,\n    assignAppointmentId,\n    getWorkshopListingCount,\n    searchAppointment\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(WorkshopQaContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/yardQaDetail/yardQaDetailsContainer.js",["295"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setToasterMessage } from './../../store/actions/commonAction/common.action';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport YardQaDetailsComponent from \"./yardQaDetailsComponent\";\nimport {getYardListingDetails,approveQualityChecks,getLastInspectionData,getMasterDataQaImageKeys} from \"../../store/actions/workshopQaManagement/workshopQaManagement.action\";\nclass YardQaDetailsContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        let appointmentId = this.props.match && this.props.match.params && this.props.match.params.appointmentId;\n        let params = {\n            appointmentId:appointmentId,\n            inspectionType:\"CATALOG\"\n        }\n        this.props.getYardListingDetails(params);\n        this.props.getMasterDataQaImageKeys();\n    }\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n                <YardQaDetailsComponent \n                listingDetails={this.props.listingDetails}\n                toasterType={this.props.toasterType}\n                toasterMessage={this.props.toasterMessage}\n                showToaster={this.props.showToaster}\n                getYardListingDetails={getYardListingDetails}\n                approveQualityChecks={approveQualityChecks}\n                getInspectionData={getLastInspectionData}\n                lastInspectionData={this.props.lastInspectionData}\n                setToasterMessage={setToasterMessage}\n                qaTopImagesKeys={this.props.qaTopImagesKeys}\n                masterData={this.props.masterData}\n                    />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        showToaster: state.commonReducer.showToaster,\n        toasterMessage: state.commonReducer.toasterMessage,\n        toasterType: state.commonReducer.toasterType,\n        listingDetails: state.workshopReducer.yardListingDetails,\n        lastInspectionData:state.workshopReducer.lastInspectionData,\n        qaTopImagesKeys:state.workshopReducer.qaTopImagesKeys,\n        masterData: state.workshopReducer.masterData\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getYardListingDetails,\n    approveQualityChecks,\n    getLastInspectionData,\n    getMasterDataQaImageKeys\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(YardQaDetailsContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/inspectionHistory/inspectionHistoryContainer.js",["296"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport { setToasterMessage } from '../../store/actions/commonAction/common.action';\nimport InspectionHistoryComponent from './inspectionHistoryComponent';\nimport {getInspectionHistoryListing,getWorkshopListingCount,searchAppointment} from './../../store/actions/workshopQaManagement/workshopQaManagement.action';\n\nclass InspectionHistoryContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        this.props.getInspectionHistoryListing();\n        this.props.getWorkshopListingCount(\"inspectionhistory\");\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"><img src={loaderImg} alt=\"loader\" /></div>}\n                <InspectionHistoryComponent \n                    inspectionHistoryListing={this.props.inspectionHistoryListing}\n                    getInspectionHistoryListing={getInspectionHistoryListing}\n                    toasterType={this.props.toasterType}\n                    toasterMessage={this.props.toasterMessage}\n                    showToaster={this.props.showToaster}\n                    qaListingCount={this.props.qaListingCount}\n                    getWorkshopListingCount={getWorkshopListingCount}\n                    searchAppointmentId={searchAppointment}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        toasterType: state.commonReducer.toasterType,\n        toasterMessage: state.commonReducer.toasterMessage,\n        showToaster: state.commonReducer.showToaster,\n        inspectionHistoryListing:state.workshopReducer.inspectionHistoryListing,\n        qaListingCount:state.workshopReducer.qaListingCount\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getInspectionHistoryListing,\n    getWorkshopListingCount,\n    searchAppointment\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(InspectionHistoryContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorder/workorderListingContainer.js",["297","298"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport { setToasterMessage } from '../../store/actions/commonAction/common.action';\nimport {getUserToken} from '../../utils/utils';\nimport WorkorderListingComponent from './workorderListingComponent';\nimport {getWorkorderListing,getWorkorderListingCount,searchAppointment} from './../../store/actions/workshopQaManagement/workshopQaManagement.action';\n\nclass WorkorderListingContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        let user = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n        let locationCode = user.accessToken && user.accessToken.claims && user.accessToken.claims.locations && user.accessToken.claims.locations.toString();\n        this.props.getWorkorderListing({},locationCode);\n        this.props.getWorkorderListingCount(\"\",locationCode);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"><img src={loaderImg} alt=\"loader\" /></div>}\n                <WorkorderListingComponent \n                    estimatesListing={this.props.estimatesListing}\n                    getEstimatesListing={getWorkorderListing}\n                    toasterType={this.props.toasterType}\n                    toasterMessage={this.props.toasterMessage}\n                    showToaster={this.props.showToaster}\n                    qaListingCount={this.props.qaListingCount}\n                    getEstimatesListingCount={getWorkorderListingCount}\n                    searchAppointmentId={searchAppointment}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        toasterType: state.commonReducer.toasterType,\n        toasterMessage: state.commonReducer.toasterMessage,\n        showToaster: state.commonReducer.showToaster,\n        estimatesListing:state.workshopReducer.estimatesListing,\n        qaListingCount:state.workshopReducer.qaListingCount\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getWorkorderListing,\n    getWorkorderListingCount,\n    searchAppointment\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(WorkorderListingContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorderDetail/workorderListingDetailContainer.js",["299"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setToasterMessage } from './../../store/actions/commonAction/common.action';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport WorkorderListingDetailComponent from \"./workorderListingDetailComponent\";\nimport {getWorkorderDetails,getMasterDataQaImageKeys} from \"../../store/actions/workshopQaManagement/workshopQaManagement.action\";\nclass WorkorderListingDetailContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        let appointmentId = this.props.match && this.props.match.params && this.props.match.params.appointmentId;\n        let version = this.props.match && this.props.match.params && this.props.match.params.version;        \n        let params = {\n            appointmentId:appointmentId,\n            inspectionType:\"CATALOG\",\n            version:version\n        }\n        this.props.getWorkorderDetails(params);\n        this.props.getMasterDataQaImageKeys();\n    }\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n                <WorkorderListingDetailComponent \n                listingDetails={this.props.listingDetails}\n                toasterType={this.props.toasterType}\n                toasterMessage={this.props.toasterMessage}\n                showToaster={this.props.showToaster}\n                inspectionHistoryListingDetails={getWorkorderDetails}\n                setToasterMessage={setToasterMessage}\n                qaTopImagesKeys={this.props.qaTopImagesKeys}\n                masterData={this.props.masterData}\n                    />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        showToaster: state.commonReducer.showToaster,\n        toasterMessage: state.commonReducer.toasterMessage,\n        toasterType: state.commonReducer.toasterType,\n        listingDetails: state.workshopReducer.estimatesListingDetail,\n        masterData:state.workshopReducer.masterData\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getWorkorderDetails,\n    getMasterDataQaImageKeys\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(WorkorderListingDetailContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/estimate/estimateListingContainer.js",["300","301"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport { setToasterMessage } from '../../store/actions/commonAction/common.action';\nimport {getUserToken} from '../../utils/utils';\nimport EstimateListingComponent from './estimateListingComponent';\nimport {getEstimatesListing,getEstimatesListingCount,searchAppointment} from './../../store/actions/workshopQaManagement/workshopQaManagement.action';\n\nclass EstimateListingContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        let user = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n        let locationCode = user.accessToken && user.accessToken.claims && user.accessToken.claims.locations && user.accessToken.claims.locations.toString();\n        this.props.getEstimatesListing({},locationCode);\n        this.props.getEstimatesListingCount(\"\",locationCode);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"><img src={loaderImg} alt=\"loader\" /></div>}\n                <EstimateListingComponent \n                    estimatesListing={this.props.estimatesListing}\n                    getEstimatesListing={getEstimatesListing}\n                    toasterType={this.props.toasterType}\n                    toasterMessage={this.props.toasterMessage}\n                    showToaster={this.props.showToaster}\n                    qaListingCount={this.props.qaListingCount}\n                    getEstimatesListingCount={getEstimatesListingCount}\n                    searchAppointmentId={searchAppointment}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        toasterType: state.commonReducer.toasterType,\n        toasterMessage: state.commonReducer.toasterMessage,\n        showToaster: state.commonReducer.showToaster,\n        estimatesListing:state.workshopReducer.estimatesListing,\n        qaListingCount:state.workshopReducer.qaListingCount\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getEstimatesListing,\n    getEstimatesListingCount,\n    searchAppointment\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(EstimateListingContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workshopQa/workshopQaContainer.js",["302"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport { setToasterMessage } from '../../store/actions/commonAction/common.action';\nimport WorkshopQaComponent from './workshopQaComponent';\nimport {getWorkshopListing,assignAppointmentId,getWorkshopListingCount,searchAppointment} from './../../store/actions/workshopQaManagement/workshopQaManagement.action';\n\nclass WorkshopQaContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        this.props.getWorkshopListing();\n        this.props.getWorkshopListingCount();\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"><img src={loaderImg} alt=\"loader\" /></div>}\n                <WorkshopQaComponent \n                    getWorkshopListing={getWorkshopListing}\n                    qaListing={this.props.qaListing}\n                    toasterType={this.props.toasterType}\n                    toasterMessage={this.props.toasterMessage}\n                    showToaster={this.props.showToaster}\n                    assignAppointmentId={assignAppointmentId}\n                    qaListingCount={this.props.qaListingCount}\n                    getWorkshopListingCount={getWorkshopListingCount}\n                    searchAppointmentId={searchAppointment}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        toasterType: state.commonReducer.toasterType,\n        toasterMessage: state.commonReducer.toasterMessage,\n        showToaster: state.commonReducer.showToaster,\n        qaListing:state.workshopReducer.qaListing,\n        qaListingCount:state.workshopReducer.qaListingCount\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getWorkshopListing,\n    assignAppointmentId,\n    getWorkshopListingCount,\n    searchAppointment\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(WorkshopQaContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/estimateDetails/estimateDetailsContainer.js",["303","304"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setToasterMessage } from './../../store/actions/commonAction/common.action';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport EstimateDetailsComponent from \"./estimateDetailsComponent\";\nimport {getEstimateDetails,approveQualityChecks,getLastInspectionData,getMasterDataQaImageKeys} from \"../../store/actions/workshopQaManagement/workshopQaManagement.action\";\nclass EstimateDetailContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        let appointmentId = this.props.match && this.props.match.params && this.props.match.params.appointmentId;\n        let version = this.props.match && this.props.match.params && this.props.match.params.version;\n        let params = {\n            appointmentId:appointmentId,\n            inspectionType:\"CATALOG\",\n            version:version\n        }\n        this.props.getEstimateDetails(params);\n        this.props.getMasterDataQaImageKeys();\n    }\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n                <EstimateDetailsComponent \n                listingDetails={this.props.listingDetails}\n                toasterType={this.props.toasterType}\n                toasterMessage={this.props.toasterMessage}\n                showToaster={this.props.showToaster}\n                inspectionHistoryListingDetails={getEstimateDetails}\n                approveQualityChecks={approveQualityChecks}\n                setToasterMessage={setToasterMessage}\n                qaTopImagesKeys={this.props.qaTopImagesKeys}\n                masterData={this.props.masterData}\n                    />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        showToaster: state.commonReducer.showToaster,\n        toasterMessage: state.commonReducer.toasterMessage,\n        toasterType: state.commonReducer.toasterType,\n        listingDetails: state.workshopReducer.estimatesListingDetail,\n        masterData:state.workshopReducer.masterData\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getEstimateDetails,\n    approveQualityChecks,\n    getMasterDataQaImageKeys\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(EstimateDetailContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workshopQaDetail/workshopQaDetailsContainer.js",["305"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setToasterMessage } from './../../store/actions/commonAction/common.action';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport WorkshopQaDetailsComponent from \"./workshopQaDetailsComponent\";\nimport {getWorkshopListingDetails,approveQualityChecks,getLastInspectionData,getMasterDataQaImageKeys,getInspectionSummary} from \"../../store/actions/workshopQaManagement/workshopQaManagement.action\";\nclass WorkshopQaDetailsContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        let appointmentId = this.props.match && this.props.match.params && this.props.match.params.appointmentId;\n        let version = this.props.match && this.props.match.params && this.props.match.params.version;\n        let params = {\n            appointmentId:appointmentId,\n            inspectionType:\"CATALOG\",\n            inspectionStatus:\"ESTIMATED\"\n        }\n        this.props.getWorkshopListingDetails(params);\n        this.props.getMasterDataQaImageKeys();\n        let paramsForInspectionsummary = {\n            appointmentId:appointmentId,\n            version:version\n        };\n        this.props.getInspectionSummary(paramsForInspectionsummary);\n    }\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n                <WorkshopQaDetailsComponent \n                listingDetails={this.props.listingDetails}\n                toasterType={this.props.toasterType}\n                toasterMessage={this.props.toasterMessage}\n                showToaster={this.props.showToaster}\n                getWorkshopListingDetails={getWorkshopListingDetails}\n                approveQualityChecks={approveQualityChecks}\n                getInspectionData={getLastInspectionData}\n                lastInspectionData={this.props.lastInspectionData}\n                setToasterMessage={setToasterMessage}\n                qaTopImagesKeys={this.props.qaTopImagesKeys}\n                masterData={this.props.masterData}\n                inspectionSummary={this.props.inspectionSummary}\n                    />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        showToaster: state.commonReducer.showToaster,\n        toasterMessage: state.commonReducer.toasterMessage,\n        toasterType: state.commonReducer.toasterType,\n        listingDetails: state.workshopReducer.qaListingDetails,\n        lastInspectionData:state.workshopReducer.lastInspectionData,\n        qaTopImagesKeys:state.workshopReducer.qaTopImagesKeys,\n        masterData: state.workshopReducer.masterData,\n        inspectionSummary:state.workshopReducer.inspectionSummary\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getWorkshopListingDetails,\n    approveQualityChecks,\n    getLastInspectionData,\n    getMasterDataQaImageKeys,\n    getInspectionSummary\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(WorkshopQaDetailsContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/inspectionHistoryDetail/inspectionHistoryDetailContainer.js",["306"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setToasterMessage } from './../../store/actions/commonAction/common.action';\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport InspectionHistoryDetailsComponent from \"./inspectionHistoryDetailsComponent\";\nimport {getInspectionHistoryListingDetail,approveQualityChecks,getLastInspectionData,getMasterDataQaImageKeys,getInspectionSummary} from \"../../store/actions/workshopQaManagement/workshopQaManagement.action\";\nclass InspectionHistoryDetailContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        let appointmentId = this.props.match && this.props.match.params && this.props.match.params.appointmentId;\n        let version = this.props.match && this.props.match.params && this.props.match.params.version;\n        let params = {\n            appointmentId:appointmentId,\n            inspectionType:\"CATALOG\",\n            version:version\n        }\n        this.props.getInspectionHistoryListingDetail(params);\n        this.props.getMasterDataQaImageKeys();\n        this.props.getInspectionSummary({appointmentId:appointmentId,version:version});\n    }\n    render() {\n        return (\n            <div>\n                {this.props.showToaster && <AlertBox ShowAlert={this.props.showToaster} message={this.props.toasterMessage} closeToaster={this.closeToaster} type={this.props.toasterType} />}\n                {this.props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n                <InspectionHistoryDetailsComponent \n                listingDetails={this.props.listingDetails}\n                toasterType={this.props.toasterType}\n                toasterMessage={this.props.toasterMessage}\n                showToaster={this.props.showToaster}\n                inspectionHistoryListingDetails={getInspectionHistoryListingDetail}\n                approveQualityChecks={approveQualityChecks}\n                getInspectionData={getLastInspectionData}\n                lastInspectionData={this.props.lastInspectionData}\n                setToasterMessage={setToasterMessage}\n                qaTopImagesKeys={this.props.qaTopImagesKeys}\n                masterData={this.props.masterData}\n                inspectionSummary={this.props.inspectionSummary}\n                    />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        showToaster: state.commonReducer.showToaster,\n        toasterMessage: state.commonReducer.toasterMessage,\n        toasterType: state.commonReducer.toasterType,\n        listingDetails: state.workshopReducer.inspectionHistoryListingDetails,\n        lastInspectionData:state.workshopReducer.lastInspectionData,\n        qaTopImagesKeys:state.workshopReducer.qaTopImagesKeys,\n        masterData:state.workshopReducer.masterData,\n        inspectionSummary:state.workshopReducer.inspectionSummary\n    };\n};\nconst mapDispatchToProps = {\n    setToasterMessage,\n    getInspectionHistoryListingDetail,\n    approveQualityChecks,\n    getLastInspectionData,\n    getMasterDataQaImageKeys,\n    getInspectionSummary\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(InspectionHistoryDetailContainer);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/reducer/index.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/account/AccountComponent.js",["307","308","309","310"],"import React, { useEffect, useState } from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { useHistory } from 'react-router-dom';\nimport { Redirect } from 'react-router-dom';\nimport OktaSignInWidget from './OktaSignInWidget';\n\nconst AccountComponent = () => {\n\n  const historyLink = useHistory();\n  const { authState, oktaAuth } = useOktaAuth();\n  const [userRole, setUserRole] = useState([]);\n\n  useEffect(()=>{\n    let user = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n    let userRoles;\n    if(user){\n       userRoles = user.accessToken && user.accessToken.claims && user.accessToken.claims.locations && user.accessToken.claims.groups;\n    }\n    setUserRole(userRoles);\n  },[])\n\n  useEffect(() => {\n    if (authState.isAuthenticated) {\n      oktaAuth.getUser().then((info) => {\n        localStorage.setItem(\"userData\", JSON.stringify(info));\n        if (localStorage.getItem(\"okta-token-storage\")) {\n          let userClaims = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n          if (userClaims && userClaims.accessToken && userClaims.accessToken.claims) {\n            if (userClaims.accessToken.claims.country && userClaims.accessToken.claims.country.length && userClaims.accessToken.claims.vehicleType && userClaims.accessToken.claims.vehicleType.length) {\n              let country = '';\n              if (userClaims.accessToken.claims.country && userClaims.accessToken.claims.country.length) {\n                country = localStorage.getItem(\"country\");\n                if (!country) {\n                    country = userClaims.accessToken.claims.country[0];\n                    localStorage.setItem(\"country\", country);\n                }\n              }\n              let vehicleType = '';\n              if (userClaims.accessToken.claims.vehicleType && userClaims.accessToken.claims.vehicleType.length) {\n                vehicleType = localStorage.getItem(\"vehicleType\");\n                if (!vehicleType) {\n                    vehicleType = userClaims.accessToken.claims.vehicleType[0];\n                    localStorage.setItem(\"vehicleType\", vehicleType);\n                }\n              }\n              if(userClaims.accessToken.claims && userClaims.accessToken.claims.groups){\n                let roles = userClaims.accessToken.claims.groups;\n                if(roles && roles.includes(\"CATALOG_QA\")){\n                  historyLink.push({pathname: '/workshop-qa', state: {\n                    userClaims: userClaims && userClaims.accessToken && userClaims.accessToken.claims,\n                    country: country,\n                    vehicleType: vehicleType\n                  }});\n                }\n                else if(roles && roles.includes(\"CATALOG_WSM\") || roles.includes(\"CATALOG_TECH\")){\n                  historyLink.push({pathname: '/estimate', state: {\n                    userClaims: userClaims && userClaims.accessToken && userClaims.accessToken.claims,\n                    country: country,\n                    vehicleType: vehicleType\n                  }});\n                }\n                else{\n                  historyLink.push('/unauthorized');\n                }\n              }else{\n                historyLink.push('/unauthorized');\n              }\n            }\n            else{\n              historyLink.push('/unauthorized');\n            }\n          } else {\n            historyLink.push('/unauthorized');\n          }\n        } else {\n          historyLink.push('/unauthorized');\n        }\n      });\n    }\n  }, [authState, oktaAuth]);\n\n\n  const onSuccess = function (res) {\n    if (res.status === 'SUCCESS') {\n      return oktaAuth.signInWithRedirect();\n    }\n  }\n\n  const onError = function (err) {\n    console.log('error logging in', err);\n  }\n\n  return (\n    authState.isAuthenticated ?\n      <Redirect to={{ pathname: '/' }} /> : <OktaSignInWidget onSuccess={onSuccess} onError={onError} />\n  )\n}\n\nexport default AccountComponent;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Footer.js",["311"],"import React, { Component } from 'react';\n\nclass Footer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"col-lg-12\">\n                <div className=\"footer\">\n                Copyright © 2020 CARS24. All rights reserved.\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Header.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/showAlert.js",["312","313"],"import React, { useState, useEffect } from 'react';\nimport { Notification } from '@progress/kendo-react-notification';\nimport { Fade } from '@progress/kendo-react-animation';\nimport { useDispatch } from 'react-redux';\nimport { setToasterMessage } from './../store/actions/commonAction/common.action'\n\nconst AlertBox = (props) => {\n    const dispatch = useDispatch();\n    const [ShowAlert, setAlert] = useState(false)\n    const [ShowMessage, setMessage] = useState('')\n    const [MessageType, setType] = useState('')\n    const defaultTime = props.defaultTime ? props.defaultTime : 5000\n    useEffect(() => {\n        setAlert(props.ShowAlert)\n        setMessage(props.message)\n        setType(props.type)\n    }, [props.ShowAlert]);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setAlert(false);\n            dispatch(setToasterMessage({\n                showToaster: false,\n                toasterMessage: '',\n                toasterType: ''\n            }));\n        }, defaultTime);\n        return () => clearTimeout(timer);\n    }, [ShowAlert]);\n\n    return (\n        <div className=\"alertMsg\">\n            {\n                ShowAlert && <Fade enter={true} exit={true}>{\n                    <Notification\n                        type={{ style: MessageType, icon: false }}\n                        closable={true}\n                        onClose={() => setAlert(false)}\n                    >\n                        <span>{ShowMessage}</span>\n                    </Notification>}\n                </Fade>\n            }\n        </div>\n    )\n\n\n}\nexport default AlertBox;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/LeftNav.js",["314","315"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { useDispatch } from \"react-redux\";\n\nconst LeftNav = props => {\n    let queryString = window.location.pathname;\n    const [userRole, setUserRole] = useState([]);\n\n    useEffect(()=>{\n        let user = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n        let userRoles;\n        if(user){\n        userRoles = user.accessToken && user.accessToken.claims && user.accessToken.claims && user.accessToken.claims.groups;\n        }\n        setUserRole(userRoles);\n    },[])\n    return (\n        <nav id=\"sidebar\" className=\"\">\n            <div className=\"sidebar-header\">\n                <h3><Link to=\"/workshop-qa\">Catalog Panel</Link></h3>\n            </div>\n            <ul className=\"list-unstyled components\">\n               {userRole && userRole.map((role)=>{\n                   return (<>\n                   {role === \"CATALOG_QA\" && (\n                       <>\n                       <li className={window.location.pathname.indexOf('/workshop-qa') !== -1 ? 'active' : ''}>\n                        <a href=\"/workshop-qa\">Workshop QA</a>\n                        </li>\n                        <li className={window.location.pathname.indexOf('/yard-qa') !== -1 ? 'active' : ''}>\n                            <a href=\"/yard-qa\">Yard QA</a>\n                        </li>\n                        <li className={window.location.pathname.indexOf('/inspection-history-qa') !== -1 ? 'active' : ''}>\n                            <a href=\"/inspection-history-qa\">Inspection History</a>\n                        </li>\n                       </>\n                   )}\n\n                   {(role === \"CATALOG_WSM\" || role === \"CATALOG_TECH\")  && (\n                       <>\n                       <li className={window.location.pathname.indexOf('/estimate') !== -1 ? 'active' : ''}>\n                            <a href=\"/estimate\">Estimates</a>\n                        </li>\n                        <li className={window.location.pathname.indexOf('/work-order') !== -1 ? 'active' : ''}>\n                            <a href=\"/work-order\">Work Order</a>\n                        </li>\n                       </>\n                   )}\n                   </>)\n               })}\n            </ul>\n        </nav>\n    )\n}\n\n\nconst mapStateToProps = state => ({\n    uiRulesData:state\n})\n\nexport default connect(mapStateToProps)(LeftNav);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/utils/utils.js",["316","317","318","319"],"import {CITIES_GROUP} from './constants/values.constants';\n\nexport const getUserData = () => {\n    return JSON.parse(localStorage.getItem(\"userData\"));\n}\n\nexport const getUserToken = () => {\n    let userToken = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n    if (userToken && userToken.accessToken && userToken.accessToken.accessToken) {\n        return userToken.accessToken.accessToken;\n    }\n    return null;\n}\n\n\nexport const convertObjectToParams = (params) => {\n    if (typeof params === 'string') {\n        return params;\n    }\n    let finalParams = '';\n    Object.keys(params).forEach((key, index) => {\n        if (index === 0) {\n            finalParams += '?';\n        }\n        finalParams += key + '=' + params[key];\n        if ((index + 1) !== Object.keys(params).length) {\n            finalParams += '&';\n        }\n    });\n    return finalParams;\n}\n\nexport const getDateFormateMMDDYYY = dateString => {\n    const dateObj = dateString.split('/');\n    const date = dateObj[0];\n    const month = dateObj[1];\n    dateObj[0] = month;\n    dateObj[1] = date;\n    return dateObj.join('/');\n}\n\nexport const dateFormat = (e) => {\n    let dateTime = new Date(e);\n    let month = dateTime.getMonth() + 1;\n    if (month < 10) {\n        month = \"0\" + month;\n    }\n    let year = dateTime.getFullYear();\n    let date = dateTime.getDate();\n    if (date < 10) {\n        date = '0' + date;\n    }\n    if (year < 10) {\n        year = '0' + year;\n    }\n    let newDate = year + \"-\" + month  + \"-\" + date;\n    return newDate;\n}\nexport const timeFormat = (e) => {\n    let newTime = new Date(e);\n    let ampm = \" AM\";\n    let hr = newTime.getHours();\n    if (hr > 12) {\n        hr -= 12;\n        ampm = \" PM\";\n    }\n    let min = newTime.getMinutes();\n    if (min && min < 10) {\n        min = '0' + min;\n    }\n    if (!min) {\n        min = '00';\n    }\n    if (hr && hr < 10) {\n        //console.log(hr)\n        hr = '0' + hr;\n    }\n    let chengeTime = hr + \":\" + min + ampm;\n    return chengeTime;\n}\n\nexport const isValidTimeForSlot = () => {\n    const startTime = new Date().getTime();\n    const endDate = new Date();\n    endDate.setHours(16,59,59,999);\n    const endTime = endDate.getTime();\n    return endTime >= startTime;\n};\n\nexport const getFinalRanges = (startTime, endTime, difference, valTime = new Date(), initialLeadTime) => {\n    let CurrentDate = new Date();\n    const isItSameDate = valTime.getDate() === CurrentDate.getDate();\n    if(isItSameDate && !isValidTimeForSlot()) {\n        return [];\n    }\n    let ranges = [];\n    let finalRange = [];\n    ranges = getRange(startTime, endTime, difference, [], initialLeadTime);\n    let newDate = new Date().getTime();\n    let currentTime = valTime && valTime.getDate() !== CurrentDate.getDate() ?\n        new Date(newDate + difference * 60000) :\n        new Date(newDate + initialLeadTime * 60000);\n    \n    const hour = currentTime.getHours();\n    const minute = currentTime.getMinutes();\n    const mins = Number(minute) > 10 ? minute : \"0\" + minute;\n\n    let newTime = \"\"\n    if (valTime === undefined) {\n        newTime = hour + '.' + mins;\n    }\n    else if (valTime.getDate() !== CurrentDate.getDate()) {\n        newTime = startTime;\n    }\n\n    else {\n        newTime = hour + '.' + mins;\n    }\n    if (ranges && ranges.length) {\n        ranges.forEach(element => {\n            let splitedElement = element.split(\"-\")[0];\n            if (parseFloat(splitedElement) >= parseFloat(newTime)) {\n                finalRange.push((element).replace(\".\", \":\"));\n            }\n\n        });\n    }\n    return finalRange;\n}\n\nexport const getRange = (startTimeNew, endTime, difference, ranges, initialLeadTime) => {\n    let rangeStart = startTimeNew;\n\n    let rangeEnd = 0, startTimeSplit = startTimeNew.split(\".\"),\n        minsPlusDifference = Number(startTimeSplit[1]) + Number(difference),\n        timeArray = [],\n        newHour = 0,\n        newMins = 0;\n    if (minsPlusDifference > 60) {\n        if (difference > 60) {\n            let newHoursToAdd = Math.floor(difference / 60);\n            let minsAfterAddingHours = Number(startTimeSplit[1]) + (difference - (60 * newHoursToAdd));\n            let minsAfterRemovingHours = Number(startTimeSplit[1]) - (difference - (60 * newHoursToAdd));\n            newHour = Number(startTimeSplit[0]) + newHoursToAdd;\n            newHour = minsAfterAddingHours >= 60 ? newHour + 1 : newHour;\n            newMins = minsAfterAddingHours >= 60 ? minsAfterRemovingHours : minsAfterAddingHours;\n        } else {\n            newHour = Number(startTimeSplit[0]) + 1;\n            newMins = difference - (60 - startTimeSplit[1]);\n        }\n    } else if (minsPlusDifference === 60) {\n        newHour = Number(startTimeSplit[0]) + 1;\n        newMins = 0;\n    } else {\n        newHour = startTimeSplit[0];\n        newMins = minsPlusDifference;\n    }\n    if (newMins < 10) {\n        newMins = \"0\" + newMins;\n    }\n    if (newHour < 10) {\n        newHour = newHour;\n\n    }\n\n    timeArray = [newHour, newMins];\n    rangeEnd = timeArray.join(\".\");\n\n    if (parseFloat(rangeEnd) <= parseFloat(endTime)) {\n        ranges.push(rangeStart + \"-\" + rangeEnd);\n        getRange(rangeEnd, endTime, difference, ranges);\n    }\n    return ranges;\n\n}\n\nexport const IsAlphaNumeric = (alphane) => {\n    var numaric = alphane;\n    for (var j = 0; j < numaric.length; j++) {\n        var alphaa = numaric.charAt(j);\n        var hh = alphaa.charCodeAt(0);\n        if ((hh > 47 && hh < 58) || (hh > 64 && hh < 91) || (hh > 96 && hh < 123)) {\n        }\n        else {\n            return false;\n        }\n    }\n    return true\n}\n\nvar selectedValue = 0;\n\nexport const setActiveToggle = (selected) => {\n    selectedValue = selected;\n}\n\nexport const getActiveToggle = () => selectedValue;\n\nexport const redirectPage = (currentQueryString) => {\n    if (currentQueryString) {\n        if (window.location.pathname.includes(\"location\")) {\n            window.location = '/location'\n        }\n        else if (window.location.pathname.includes(\"masterdata\")) {\n            window.location = '/masterdata'\n        }\n        else if (window.location.pathname.includes(\"bulkupload\")) {\n            window.location = '/bulkupload'\n        }\n        else {\n            window.location = '/'\n        }\n\n    } else {\n        window.location.reload(false);\n    }\n}\nexport const localStorageGroupData = () => {\n    let localData = localStorage.getItem('okta-token-storage');\n    let groupData = \"\";\n    if (localData) {\n        groupData = JSON.parse(localData).accessToken &&\n            JSON.parse(localData).accessToken &&\n            JSON.parse(localData).accessToken.claims &&\n            JSON.parse(localData).accessToken.claims.groups ?\n            JSON.parse(localData).accessToken.claims.groups : \"\"\n\n    }\n    return groupData\n}\n\nexport const setLocationType = locationType => {\n    if(locationType === 'CAR_STUDIO') {\n        return locationType.replace('CAR_', '');\n    }\n    return locationType && locationType.replace(/_/g, ' ') || '-';\n};\n\nexport const isObjectEmpty = dataObject => Object.keys(dataObject).length === 0;\n\nexport const getLogisticSearchRequestParams = searchParams => {\n    const requestParams = new URLSearchParams(searchParams);\n    requestParams.append('sort','mv.logistic.requestedPickupTime');\n    requestParams.append('mv.logistic.requestedPickupTime.dir','asc');\n    requestParams.append('sort','mv.logistic.pickUpSlotFrom');\n    requestParams.append('mv.logistic.pickUpSlotFrom.dir','asc');\n    requestParams.append('sort','mv.logistic.pickUpSlotTo');\n    requestParams.append('mv.logistic.pickUpSlotTo.dir','asc');\n    return '?'+requestParams.toString();\n};\n\n/**\n   * @param {string} cityCode \n   * @param {array} CITIES_GROUP\n   * findCityList method will return all cityname if that is NCR\n   */\n  export const findCityList = (cityCode, CITIES_GROUP) => {\n    if(CITIES_GROUP.filter(cityCodeValue => cityCodeValue === cityCode).length) {\n      return CITIES_GROUP;\n    }\n    return [cityCode];\n  }","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/inspectionHistory/inspectionHistoryComponent.js",["320","321","322"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, GridColumn } from \"@progress/kendo-react-grid\";\nimport \"../workshopQa/workshopQa.css\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport GridCustomCell from \"../../common/GridCustomCell\";\nimport { useDispatch } from \"react-redux\";\nimport { dateFormat, timeFormat } from \"./../../utils/utils\";\nimport MakeModelCell from \"../../common/Tooltip/makeModelCell\";\nimport InspectionTimeCell from \"../../common/Tooltip/inspectionTimeCell\";\nimport WorkshopNameCell from \"../../common/Tooltip/workshopNameCell\";\n\nconst InspectionHistoryComponent = (props) => {\n    const dispatch = useDispatch();\n    const [paginationData, setPaginationData] = useState({ skip: 0, take: 10 });\n    const [currentPage, setCurrentPage] = useState(\"\");\n    const [qaListingData, setQaListingData] = useState([]);\n    const [qaListingCount, setQaListingCount] = useState(0);\n    const pageChange = (event) => {\n        setPaginationData({\n          skip: event.page.skip,\n          take: event.page.take\n        });\n        setCurrentPage(event.page.skip ? event.page.skip / 10 : 0);\n        dispatch(props.getInspectionHistoryListing({ page: event.page.skip ? event.page.skip / 10 : 0, size: event.page.take}))\n    }\n\n    useEffect(()=>{\n        props.inspectionHistoryListing.map(item => {\n            if(item && item.updatedAt){\n                item[\"formatedInspectionTime\"] = dateFormat(item.updatedAt) + \" - \" + timeFormat(item.updatedAt);\n            }          \n        });\n        setQaListingData(props.inspectionHistoryListing);\n        setQaListingCount(props.qaListingCount);\n    },[props]);\n\n    const inputSearchHandler = (value)=>{\n            dispatch(props.searchAppointmentId(value+\"%\",\"inspectionhistory\"));\n            dispatch(props.getWorkshopListingCount(\"inspectionhistory\",value+\"%\"));\n    }\n\n\n    const appointmentIdCell = (props) => <GridCustomCell dataLink={'/inspection-history-qa/' + `${props.dataItem.appointmentId}/${props.dataItem.version}`} dataText={props.dataItem.appointmentId} />\n    \n    return(\n        <div className=\"col-lg-12\">\n            <div className=\"gridData\">\n                <div className=\"middleContent\">\n                    <div className=\"search-box\">\n                        <input type=\"text\" onChange={(e)=>inputSearchHandler(e.target.value)} placeholder=\"Search for appointment ID\" />\n                    </div>\n          <Tooltip openDelay={100} position=\"right\" anchorElement=\"element\">\n            <Grid\n              data={qaListingData}\n              pageable={true}\n              skip={paginationData.skip}\n              take={paginationData.take}\n              onPageChange={(e) => pageChange(e)}\n              total={qaListingCount}\n            >\n                <GridColumn\n                    field=\"appointmentId\"\n                    cell={(e)=> appointmentIdCell(e)}\n                    title=\"App. ID\"\n                />\n\n                <GridColumn\n                    field=\"makeModel\"\n                    title=\"Make/Model\"\n                    cell={MakeModelCell}\n                />\n             \n              <GridColumn \n                field=\"inspectionTime\" \n                cell={InspectionTimeCell}\n                title=\"Inspection Time\" \n                />\n\n                <GridColumn\n                    field=\"workshopName\"\n                    title=\"Workshop/Yard Name\"\n                    cell={WorkshopNameCell}\n                />\n\n            </Grid>\n          </Tooltip>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default InspectionHistoryComponent;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorder/workorderListingComponent.js",["323","324","325"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, GridColumn } from \"@progress/kendo-react-grid\";\nimport \"../workshopQa/workshopQa.css\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport GridCustomCell from \"../../common/GridCustomCell\";\nimport { useDispatch } from \"react-redux\";\nimport { dateFormat, timeFormat } from \"./../../utils/utils\";\nimport MakeModelCell from \"../../common/Tooltip/makeModelCell\";\nimport InspectionTimeCell from \"../../common/Tooltip/inspectionTimeCell\";\nimport WorkshopNameCell from \"../../common/Tooltip/workshopNameCell\";\n\nconst WorkorderListingComponent = (props) => {\n    const dispatch = useDispatch();\n    const [paginationData, setPaginationData] = useState({ skip: 0, take: 10 });\n    const [currentPage, setCurrentPage] = useState(\"\");\n    const [qaListingData, setQaListingData] = useState([]);\n    const [qaListingCount, setQaListingCount] = useState(0);\n    const pageChange = (event) => {\n        setPaginationData({\n          skip: event.page.skip,\n          take: event.page.take\n        });\n        setCurrentPage(event.page.skip ? event.page.skip / 10 : 0);\n        let user = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n        let locationCode = user.accessToken && user.accessToken.claims && user.accessToken.claims.locations && user.accessToken.claims.locations.toString();\n        dispatch(props.getEstimatesListing({ page: event.page.skip ? event.page.skip / 10 : 0, size: event.page.take}, locationCode))\n    }\n\n    useEffect(()=>{\n        props.estimatesListing.map(item => {\n            if(item && item.updatedAt){\n                item[\"formatedInspectionTime\"] = dateFormat(item.updatedAt) + \" - \" + timeFormat(item.updatedAt);\n            }          \n        });\n        setQaListingData(props.estimatesListing);\n        setQaListingCount(props.qaListingCount);\n    },[props]);\n\n    const inputSearchHandler = (value)=>{\n            let user = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n            let locationCode = user.accessToken && user.accessToken.claims && user.accessToken.claims.locations && user.accessToken.claims.locations.toString();\n            dispatch(props.searchAppointmentId(value+\"%\",\"workorder\"));\n            dispatch(props.getEstimatesListingCount(value+\"%\",locationCode));\n    }\n    const appointmentIdCell = (props) => <GridCustomCell dataLink={'/work-order/' + `${props.dataItem.appointmentId}/${props.dataItem.version}`} dataText={props.dataItem.appointmentId} />\n    \n    return(\n        <div className=\"col-lg-12\">\n            <div className=\"gridData\">\n                <div className=\"middleContent\">\n                    <div className=\"search-box\">\n                        <input type=\"text\" onChange={(e)=>inputSearchHandler(e.target.value)} placeholder=\"Search for appointment ID\" />\n                    </div>\n          <Tooltip openDelay={100} position=\"right\" anchorElement=\"element\">\n            <Grid\n              data={qaListingData}\n              pageable={true}\n              skip={paginationData.skip}\n              take={paginationData.take}\n              onPageChange={(e) => pageChange(e)}\n              total={qaListingCount}\n            >\n                <GridColumn\n                    field=\"appointmentId\"\n                    cell={(e)=> appointmentIdCell(e)}\n                    title=\"App. ID\"\n                />\n\n                <GridColumn\n                    field=\"makeModel\"\n                    title=\"Make/Model\"\n                    cell={MakeModelCell}\n                />\n             \n              <GridColumn \n                field=\"inspectionTime\" \n                cell={InspectionTimeCell}\n                title=\"Inspection Time\" \n                />\n\n                <GridColumn\n                    field=\"workshopName\"\n                    title=\"Workshop/Yard Name\"\n                    cell={WorkshopNameCell}\n                />\n\n            </Grid>\n          </Tooltip>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WorkorderListingComponent;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/yardQa/yardQaComponent.js",["326","327","328"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, GridColumn } from \"@progress/kendo-react-grid\";\nimport \"../workshopQa/workshopQa.css\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport GridCustomCell from \"../../common/GridCustomCell\";\nimport { useDispatch } from \"react-redux\";\nimport { dateFormat, timeFormat } from \"./../../utils/utils\";\nimport AssignedToCell from \"../../common/Tooltip/assignedToCell\";\nimport MakeModelCell from \"../../common/Tooltip/makeModelCell\";\nimport InspectionTimeCell from \"../../common/Tooltip/inspectionTimeCell\";\nimport WorkshopNameCell from \"../../common/Tooltip/workshopNameCell\";\n\nconst YardQaComponent = (props) => {\n    const dispatch = useDispatch();\n    const [paginationData, setPaginationData] = useState({ skip: 0, take: 10 });\n    const [currentPage, setCurrentPage] = useState(\"\");\n    const [qaListingData, setQaListingData] = useState([]);\n    const [qaListingCount, setQaListingCount] = useState(0);\n    const pageChange = (event) => {\n        setPaginationData({\n          skip: event.page.skip,\n          take: event.page.take\n        });\n        setCurrentPage(event.page.skip ? event.page.skip / 10 : 0);\n        dispatch(props.getYardListing({ page: event.page.skip ? event.page.skip / 10 : 0, size: event.page.take}))\n    }\n\n    useEffect(()=>{\n        props.yardListing.map(item => {\n            if(item && item.updatedAt){\n                item[\"formatedInspectionTime\"] = dateFormat(item.updatedAt) + \" - \" + timeFormat(item.updatedAt);\n            }          \n        });\n        setQaListingData(props.yardListing);\n        setQaListingCount(props.qaListingCount);\n    },[props]);\n\n    const inputSearchHandler = (value)=>{\n        dispatch(props.searchAppointmentId(value+\"%\",\"yard\"));\n        dispatch(props.getWorkshopListingCount(\"yard\",value+\"%\"));\n    }\n\n\n    const appointmentIdCell = (props) => <GridCustomCell dataLink={'/yard-qa/' + `${props.dataItem.appointmentId}/${props.dataItem.version}`} dataText={props.dataItem.appointmentId} />\n    \n    return(\n        <div className=\"col-lg-12\">\n            <div className=\"gridData\">\n                <div className=\"middleContent\">\n                    <div className=\"search-box\">\n                        <input type=\"text\" onChange={(e)=>inputSearchHandler(e.target.value)} placeholder=\"Search for appointment ID\" />\n                    </div>\n          <Tooltip openDelay={100} position=\"right\" anchorElement=\"element\">\n            <Grid\n              data={qaListingData}\n              pageable={true}\n              skip={paginationData.skip}\n              take={paginationData.take}\n              onPageChange={(e) => pageChange(e)}\n              total={qaListingCount}\n            >\n                <GridColumn\n                    field=\"appointmentId\"\n                    cell={(e)=> appointmentIdCell(e)}\n                    title=\"App. ID\"\n                />\n\n                <GridColumn\n                    field=\"makeModel\"\n                    title=\"Make/Model\"\n                    cell={MakeModelCell}\n                />\n             \n              <GridColumn \n                field=\"inspectionTime\" \n                cell={InspectionTimeCell}\n                title=\"Inspection Time\" \n                />\n\n                <GridColumn\n                    field=\"workshopName\"\n                    title=\"Workshop/Yard Name\"\n                    cell={WorkshopNameCell}\n                />\n\n                <GridColumn\n                    field=\"assignedTo\"\n                    title=\"Assigned To\"\n                    cell={AssignedToCell}\n                />\n\n            </Grid>\n          </Tooltip>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default YardQaComponent;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/yardQaDetail/yardQaDetailsComponent.js",["329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport \"../workshopQaDetail/workshopDetails.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { dateFormat, setLocationType, timeFormat } from \"../../utils/utils\";\nimport { AlertType } from '../../utils/constants/values.constants';\nimport { Link } from 'react-router-dom';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\nimport { connect } from 'react-redux';\nimport {getYardListingDetails,approveQualityChecks,addTagging} from \"../../store/actions/workshopQaManagement/workshopQaManagement.action\";\nimport CustomDialog from './../dialog/customDialog';\nimport Question from '../../assets/img/question.svg';\nimport Popup from '../../common/popup/';\nimport QuestionMarkPopUp from '../../components/question-mark-pop-up';\nimport SummaryList from '../summaryListDetail/summaryListComponent';\n\nconst YardQaDetailsComponent = (props) => {\n  const historyLink = useHistory();\n  const dispatch = useDispatch();\n  let imperfectionActionsData = {\n    \"inspectionType\": \"CATALOG\",\n    \"locationType\":\"\",\n    \"schemaVersion\": \"IN_CAR_CATALOG_V1\",\n    \"data\":{\n        \"action\":\"qa\",\n        \"qualityChecks\":{\n        \n        }\n    }\n  };\n  const [allocateOpen, setAllocateOpen] = useState(false);\n  const [hintData, setHintData] = useState({});\n  const onAllocateOpen = (item) => {\n   masterData && masterData.checkpoints.map((data)=>{\n      if(data.key === item){\n          setHintData(data);          \n      }\n  })\n    \n    setAllocateOpen(true);\n  };\n  const onAllocateClose = () => {\n      setAllocateOpen(false);\n  };\n  \n  const [appointmentDetails, setAppointmentDetails] = useState({});\n  const [showHideToggler, setShowHideToggler] = useState(false);\n  const [imperfectionCount, setImperfectionCount] = useState(\"\");\n  const [nonAccImperfection, setNonAccImperfection] = useState(\"\");\n  const [accImperfection, setAccImperfection] = useState(\"\");\n  const [isRejected, setRejectAction] = useState(\"\");\n  const [comment,setComment] = useState(\"\");\n  const [toggleViewHandlerFlag, setToggleViewHandler] = useState(\"\");\n  let   [qcActionData, setQcActionData] = useState(imperfectionActionsData);\n  const [allImages, setAllImages] = useState([]);\n  const [allVideos, setAllVideos] = useState([]);\n  const [actionArray, setActionArray] = useState([]);\n  const [lastInspectionData, setInspectionData] = useState([]);\n  const [toggleLastInspection, setToggleLastInspection] = useState(\"\");\n  const [mediaType, setMediaType] = useState(\"image\");\n  const [magnifyImg, setMagnifier] = useState(\"\");\n  const [showOnRejectSubmitError,setShowOnRejectSubmitError] = useState(false);\n  const [qcPendingStatusLength,setQcPendingStatusLength] = useState(0);\n  const [qcPendingStatusAcceptableImp,setQcPendingStatusAcceptableImp] = useState(0);\n  const [qcActionCompletedStatus, setQcActionCompletedStatus] = useState(0);\n  const [iscorrectAssigned, setIscorrectAssigned] = useState(false);\n  const [reEdit,setReEdit] = useState(\"\");  \n  //For editing checkpoints data starts\n  const [masterData, setMasterData] = useState({});\n  const [isCheckpointEdit, setIsEditCheckpoint] = useState(\"\");\n  const [stateToBeUpdated, setStateToBeUpdated] = useState({});\n  const [isOkNoImperfSelected,setIsOkNoImperfectionSelected] = useState(\"\");\n  const [otherImperfectionEntered, setOtherImperfectionEntered] = useState(\"\");\n  const [otherWorkToBeDone, setOtherWorkToBeDone] = useState(\"\");\n  const [disableWhenAcceptableImperf, setDisableWhenAcceptableImperf] = useState(false);\n\n  const [isConfirmationDialog, setIsConfirmationDialog] = useState(false);\n  const [getConfirmation, setGetConfirmation] = useState(false);\n  const [dataKey,setDataKey] = useState(\"\");\n  const [confirmationForOnSubmitReject, setConfirmationForOnSubmitReject] = useState({\n    item:'',index:'',comment:'',optional:false, isConfirm:false\n  });\n  \n  //For editing checkpoints data ends\n\n  // Tag summarry code starts here\n  const [isSummaryList,setIsSummaryList] = useState(false);\n\n  useEffect(()=>{\n    let totlaNonAcceptableImperfections = 0;\n    let totlalAcceptableImperfections = 0;\n    let searchParams = {\n      appointmentId:'',\n      inspectionType:\"CATALOG\",\n      version:'all'\n    };\n    let allImages = [];\n    let allVideos = [];\n    if(props && props.listingDetails && props.listingDetails[0] && props.listingDetails[0].appointmentId){\n      searchParams.appointmentId = props.listingDetails[0].appointmentId;\n      dispatch(props.getInspectionData(searchParams));\n      setInspectionData(props.lastInspectionData[1]);\n      }\n    if(props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.checkpoints){\n      Object.keys(props.listingDetails[0].data.checkpoints).map((item)=>{\n          props.qaTopImagesKeys.map((itemTop)=>{\n            if(itemTop === item){\n              props.listingDetails[0].data.checkpoints[itemTop].images.map((item,index)=>{\n                allImages.push(item);\n              });\n              props.listingDetails[0].data.checkpoints[itemTop].videos.map((item,index)=>{\n                allVideos.push(item);\n              })\n            }          \n          })\n          setAllImages(allImages);\n          setAllVideos(allVideos);\n      });\n\n      Object.keys(props.listingDetails[0].data.qualityChecks).map((item)=>{\n        if(props.listingDetails[0].data.qualityChecks[item].invalidated === false){\n            if(props.listingDetails[0].data.checkpoints[item].ok === false){\n                totlaNonAcceptableImperfections += 1;\n              }\n              else if( \n                props.listingDetails[0].data.checkpoints[item].choices.length > 0){\n                  totlalAcceptableImperfections += 1;\n              }\n        }\n    })\n    }\n    setNonAccImperfection(totlaNonAcceptableImperfections);\n    setAccImperfection(totlalAcceptableImperfections);\n    let totalQCheck = 0;\n    if(props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.qualityChecks){\n      Object.keys(props.listingDetails[0].data.qualityChecks).map((item)=>{\n        Object.keys(props.listingDetails[0].data.qualityChecks[item]).map((invalidated)=>{\n          if(invalidated && invalidated === \"invalidated\" && \n          props.listingDetails[0].data.qualityChecks[item][invalidated] === false){\n            totalQCheck += 1\n          }        \n        })\n      });   \n      setImperfectionCount(totalQCheck);  \n      let lengthQc = 0;\n      let acceptableImp = 0;\n          if(props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.qualityChecks){\n          Object.keys(props.listingDetails[0].data.qualityChecks).map((item)=>{\n          if(props.listingDetails[0].data.qualityChecks[item].status === \"PENDING\"\n          && props.listingDetails[0].data.qualityChecks[item].invalidated === false){\n              lengthQc += 1 \n          }\n          });\n          setQcPendingStatusLength(lengthQc);\n          } \n  \n          if(props && props.listingDetails[0] && props.listingDetails[0].data){\n            if(props.listingDetails[0].data && props.listingDetails[0].data.checkpoints){\n              Object.keys(props.listingDetails[0].data.checkpoints).map((item)=>{\n                if(((props.listingDetails[0].data.qualityChecks[item]?.status === \"APPROVED\") || \n                (props.listingDetails[0].data.checkpoints[item]?.ok === true))\n                ){\n                  acceptableImp += 1 \n                }\n              })\n            }\n            setQcPendingStatusAcceptableImp(lengthQc);\n          }\n    }\n  },[props.listingDetails]);\n\n  useEffect(()=>{\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\n    if(userData && userData.email && props && props.listingDetails[0] && props.listingDetails[0].assignedTo){\n      setIscorrectAssigned(userData.email === props.listingDetails[0].assignedTo.uid);\n    }\n    props && props.listingDetails.map((item)=>{\n      if(item && item.updatedAt){\n        item.formatedUpdatedAt = dateFormat(item.updatedAt);\n      }\n    });   \n    setAppointmentDetails(props.listingDetails[0]);\n  },[props.listingDetails]);\n\n  useEffect(()=>{\n    props && props.lastInspectionData.map((item)=>{\n      if(item && item.updatedAt){\n        item.formatedUpdatedAt = dateFormat(item.updatedAt);\n        item.formatedUpdateAtTime = timeFormat(item.updatedAt);\n      }\n    });\n    if(props && props.lastInspectionData && props.lastInspectionData.length > 1){\n      props.lastInspectionData.sort((a,b)=>{\n        return b.version - a.version;\n      });\n      setInspectionData(props.lastInspectionData[1]);\n    }\n  },[props.lastInspectionData]);\n\n  useEffect(()=>{\n    if(props && props.masterData){\n      setMasterData(props.masterData);\n    }\n  },[props.masterData]);\n\n  const handleRejectionComment = (event)=>{\n    setComment(event.target.value);\n  }\n\n  useEffect(()=>{\n    if(getConfirmation && confirmationForOnSubmitReject.isConfirm){\n      onSubmitReject(confirmationForOnSubmitReject.item,confirmationForOnSubmitReject.index,\n        confirmationForOnSubmitReject.comment,confirmationForOnSubmitReject.optional);\n    }\n  },[getConfirmation]);\n\n  const rejectHandler = (item)=>{\n    let obj = {};\n    obj = {...qcActionData};\n    obj.data.qualityChecks = {};\n    setQcActionData({...obj});\n    setConfirmationForOnSubmitReject({item:'',index:'',comment:'',optional:false, isConfirm:false});\n  }\n\n  const onSubmitReject = (item,index,comment,optional)=>{\n    setReEdit(\"\");\n    if(!comment || comment === \"\"){\n      setShowOnRejectSubmitError(true);\n      return false\n    }\n    setConfirmationForOnSubmitReject({item:item,index:index,comment:comment,optional:optional, isConfirm:true});\n    setIsConfirmationDialog(true);\n    setShowOnRejectSubmitError(false);\n    let obj = {};\n    obj = {...qcActionData};\n    obj.data.qualityChecks[item] = {status:\"REJECTED\",\"comment\":comment};\n    setQcActionData({...obj});\n\n    let newActionArray = [];\n    newActionArray = [...actionArray];\n    newActionArray.push(index);\n    setActionArray([...newActionArray]);\n    if(optional === false){\n    let qcActionCompletedStatus = 0;\n    if(appointmentDetails?.data?.qualityChecks){\n      Object.keys(appointmentDetails.data.qualityChecks).map((key)=>{\n        if(qcActionData.data.qualityChecks[key]){\n          qcActionCompletedStatus += 1;\n          setQcActionCompletedStatus(qcActionCompletedStatus);\n        }\n      })\n      }\n    }\n\n    \n    // Submitting single request\n    if(getConfirmation && confirmationForOnSubmitReject.isConfirm){\n    if(appointmentDetails && appointmentDetails.inspectionStatus === \"ESTIMATED\"){\n      let appointmentId = window.location.pathname.split(\"/\")[2];\n      qcActionData.locationType = appointmentDetails.locationType;\n      dispatch(approveQualityChecks(qcActionData,appointmentId,\"Rejected successfully\"));\n      setQcActionData(imperfectionActionsData);\n      setActionArray([]);\n      setComment(\"\");\n      setRejectAction(\"\");\n      // Refreshing list details\n      let params = {\n        appointmentId:appointmentDetails.appointmentId,\n        inspectionType:\"CATALOG\",\n      }\n      setTimeout(()=>{\n        dispatch(getYardListingDetails(params));\n        dispatch(getYardListingDetails(params));\n      },1000);\n      setGetConfirmation(false);\n      setIsConfirmationDialog(false);\n      setConfirmationForOnSubmitReject({item:'',index:'',comment:'',optional:false, isConfirm:false});        \n    }else{\n      dispatch(props.setToasterMessage({\n        toasterMessage: \"Something went wrong\",\n        showToaster: true,\n        toasterType: AlertType.ERROR\n      }));\n    }\n  }   \n\n  }\n\n  const onSubmitApprove = (item,index,optional) =>{\n    setReEdit(\"\");\n    let obj = {};\n    obj = {...qcActionData};\n    obj.data.qualityChecks[item] = {status:\"APPROVED\"};\n    setQcActionData({...obj});\n\n    let newActionArray = [];\n    newActionArray = [...actionArray];\n    newActionArray.push(index);\n    setActionArray([...newActionArray]);\n    if(optional === false){\n    let qcActionCompletedStatus = 0;\n    if(appointmentDetails?.data?.qualityChecks){\n      Object.keys(appointmentDetails.data.qualityChecks).map((key)=>{\n        if(qcActionData.data.qualityChecks[key]){\n          qcActionCompletedStatus += 1;\n          setQcActionCompletedStatus(qcActionCompletedStatus);\n        }\n      })\n    }\n    }\n\n    if(appointmentDetails && appointmentDetails.inspectionStatus === \"ESTIMATED\"){\n      let appointmentId = window.location.pathname.split(\"/\")[2];\n      qcActionData.locationType = appointmentDetails.locationType;\n      dispatch(approveQualityChecks(qcActionData,appointmentId,\"Approved successfully\"));\n      setQcActionData(imperfectionActionsData);\n      setActionArray([]);\n\n      // Refreshing list details\n      let params = {\n        appointmentId:appointmentDetails.appointmentId,\n        inspectionType:\"CATALOG\",\n    }\n      setTimeout(()=>{\n        dispatch(getYardListingDetails(params));\n        dispatch(getYardListingDetails(params));\n      },1000);\n      \n      // historyLink.push('/workshop-qa');\n    }else{\n      dispatch(props.setToasterMessage({\n        toasterMessage: \"Something went wrong\",\n        showToaster: true,\n        toasterType: AlertType.ERROR\n      }));\n    } \n    \n  }\n\n  const qcActionResetHandler = (item,index,optional) => {\n    setReEdit(index);\n    setActionArray(actionArray.filter(item => item !== index));\n    let obj = {};\n    obj = {...qcActionData};\n    delete obj.data.qualityChecks[item]; \n    setQcActionData({...obj});\n    if(optional === false){\n      let qcActionCompletedCount = 1;\n      setQcActionCompletedStatus(qcActionCompletedStatus - qcActionCompletedCount);\n    }\n    }\n\n  useEffect(()=>{\n    if(props.listingDetails && props.listingDetails[0] && props.listingDetails[0].inspectionStatus === \"QC_DONE\"){\n      setIsSummaryList(true);\n    }\n    \n    if(props.listingDetails && props.listingDetails[0] && props.listingDetails[0].inspectionStatus !== \"ESTIMATED\" && props.listingDetails[0].inspectionStatus !== \"QC_DONE\"){\n      window.location.pathname = 'yard-qa'\n    }\n  },[props.listingDetails]);\n\n  const submitAllQcAction = () => {\n    let params = {\n      appointmentId:appointmentDetails.appointmentId,\n      inspectionType:\"CATALOG\",\n    }\n    if(appointmentDetails && (appointmentDetails.inspectionStatus === \"QC_DONE\")){\n      setIsSummaryList(true);\n      return\n    }else{\n      setIsSummaryList(false);\n    }\n    if(appointmentDetails && (appointmentDetails.inspectionStatus === \"ESTIMATED\")){\n        let appointmentId = window.location.pathname.split(\"/\")[2];\n        let payload = {\n          \"inspectionType\": \"CATALOG\",\n          \"schemaVersion\": \"IN_CAR_CATALOG_V1\",\n          \"data\":{\n              \"action\":\"submitQa\"\n          }\n      };\n      dispatch(approveQualityChecks(payload,appointmentId,\"Submitted successfully\",\"no redirect -- submit all qc yardQA\"));\n      setQcActionData(imperfectionActionsData);\n      setActionArray([]);\n    }else{\n      dispatch(props.setToasterMessage({\n        toasterMessage: \"Something went wrong\",\n        showToaster: true,\n        toasterType: AlertType.ERROR\n      }));\n    }\n   \n    setTimeout(()=>{\n      dispatch(getYardListingDetails(params));\n      dispatch(getYardListingDetails(params));\n    },1000);\n    \n  }\n\n  const toggleVideoHandler = (index)=>{\n    setToggleViewHandler(index);\n  }\n\n  const toggleVideoHandler2 = (index, type)=>{\n    setMediaType(type);\n  }\n\n  const toggleImageHandler = (index)=>{\n    setToggleViewHandler(\"\");\n  }\n\n  const toggleImageHandler2 = (index,type)=>{\n    setMediaType(type);\n  }\n\n  const toggleLastInspectionHandler = (index) => {\n    setToggleLastInspection(index);\n    setShowHideToggler(!showHideToggler);\n  }\n\n  const imageMagnifier = (data) =>{\n    setMagnifier(data);    \n  };\n\n    // Handlers to update checkpoints data starts here\n    const editCheckpointClicked = (index,checkpointName) => {\n      setConfirmationForOnSubmitReject({item:'',index:'',comment:'',optional:false, isConfirm:false});\n      setIsConfirmationDialog(false);\n      setIsEditCheckpoint(index);\n      setReEdit(\"\");\n      setRejectAction(\"\");\n      setIsOkNoImperfectionSelected(\"\");\n      setOtherImperfectionEntered(\"\");\n      setStateToBeUpdated({});\n      let prevCondition = {\n        acceptImpChoices:{},\n        nonAcceptImpChoices:{}\n      };\n\n      if(appointmentDetails && appointmentDetails.data && appointmentDetails.data.checkpoints && \n        appointmentDetails.data.checkpoints[checkpointName]){\n              masterData && masterData.checkpoints && masterData.checkpoints.map((masterData)=>{\n                if(checkpointName === masterData.key){\n                  masterData && masterData.noImperfectionChoices && masterData.noImperfectionChoices.map((option)=>{\n                    if(appointmentDetails.data.checkpoints[checkpointName].noImperfectionChoices.includes(option.name)){\n                      setIsOkNoImperfectionSelected(option.name);\n                    }\n                  });\n                }\n              })\n            \n            //Imperfections\n            if(appointmentDetails.data.checkpoints[checkpointName]){\n                prevCondition.nonAcceptImpChoices[\"choices\"] = appointmentDetails.data.checkpoints[checkpointName].choices;\n                prevCondition.nonAcceptImpChoices[\"choices\"].map((choice,index)=>{\n                  if(choice.other === true){\n                    setOtherImperfectionEntered(choice.choice);\n                  }\n                  choice.selected = true;\n                  return choice\n                })\n              }\n  \n            // Possible options\n            if(masterData && masterData.checkpoints){\n              let addPossibleChoices = [];\n              masterData.checkpoints.map((item) => {\n                if(item.key === checkpointName){\n                  if(item && item.choices){\n                    item.choices.map((choice)=>{\n                      addPossibleChoices.push({acceptable: choice?.type === \"absolute\" ? false : true,choice: choice.name, other: false,selected: false});\n                    });\n                  }\n                }\n              });\n              if(prevCondition.nonAcceptImpChoices[\"choices\"] && addPossibleChoices){\n                prevCondition.nonAcceptImpChoices[\"choices\"] = [...addPossibleChoices,...prevCondition.nonAcceptImpChoices[\"choices\"]];\n                prevCondition.nonAcceptImpChoices[\"choices\"] = [...prevCondition.nonAcceptImpChoices[\"choices\"].reduce((map,obj)=> map.set(obj.choice,obj), new Map()).values()];\n              }else if(!prevCondition.nonAcceptImpChoices[\"choices\"] && addPossibleChoices){\n                prevCondition.nonAcceptImpChoices[\"choices\"] = [...addPossibleChoices];\n                prevCondition.nonAcceptImpChoices[\"choices\"] = [...prevCondition.nonAcceptImpChoices[\"choices\"].reduce((map,obj)=> map.set(obj.choice,obj), new Map()).values()];\n              }\n            }\n            setStateToBeUpdated({...prevCondition});\n      }\n  \n    }\n  \n    const changeChoicesHandler = (type,index,value) => {\n      if(type === \"modify\"){\n        stateToBeUpdated.nonAcceptImpChoices.choices[index].choice = value;\n      }\n      if(type === \"nonAccept\"){\n        setIsOkNoImperfectionSelected(\"\");\n        stateToBeUpdated.nonAcceptImpChoices.choices[index].selected = !stateToBeUpdated.nonAcceptImpChoices.choices[index].selected;\n      }\n      if(type === \"accept\"){\n        setIsOkNoImperfectionSelected(\"\");\n        stateToBeUpdated.acceptImpChoices.choices[index].selected = !stateToBeUpdated.acceptImpChoices.choices[index].selected;\n      }\n      setStateToBeUpdated({...stateToBeUpdated});\n    }\n  \n    const changeImperfectionType = (choice,index,imperfectionType) => {\n      stateToBeUpdated.nonAcceptImpChoices.choices[index].acceptable = !stateToBeUpdated.nonAcceptImpChoices.choices[index].acceptable;\n      setStateToBeUpdated({...stateToBeUpdated});\n    }\n  \n    const isNotApplicableSelected = (value) => {\n      setOtherImperfectionEntered(\"\");\n      setOtherWorkToBeDone(\"\");\n      setDisableWhenAcceptableImperf(false);\n      setIsOkNoImperfectionSelected(value);\n      if(stateToBeUpdated.nonAcceptImpChoices && stateToBeUpdated.nonAcceptImpChoices.choices){\n        stateToBeUpdated.nonAcceptImpChoices.choices.map((data)=>{\n          data.selected = false;\n          return data;\n        })\n      }\n    }\n  \n    const otherImperfection = (value) =>{\n      setIsOkNoImperfectionSelected(\"\");\n      setDisableWhenAcceptableImperf(false);\n      setOtherImperfectionEntered(value);\n    }\n  \n    const checkpointEditCancled = (item)=>{\n      let params = {\n        appointmentId:appointmentDetails.appointmentId,\n        inspectionType:\"CATALOG\",\n      };    \n      setTimeout(()=>{\n        dispatch(getYardListingDetails(params));\n      },100);\n    }\n\n    useEffect(()=>{\n      if(dataKey && getConfirmation){\n        updateCheckpointDataHandler(dataKey);\n      }\n    },[getConfirmation]);\n  \n  \n    const updateCheckpointDataHandler = (dataKey) => {\n      setDataKey(dataKey);\n      setIsConfirmationDialog(true);\n      if(getConfirmation && dataKey){\n        let payload = {\n          \"inspectionType\": \"CATALOG\",\n          \"schemaVersion\": \"IN_CAR_CATALOG_V1\",\n              \"data\":{\n                  \"action\":\"checkpointsQa\",\n                  \"checkpoints\":{}\n              }\n          };\n        payload.data.checkpoints[dataKey] = {};\n        let selectedChoices;\n        let noImperfectionChoices = [];\n          if(stateToBeUpdated.nonAcceptImpChoices && stateToBeUpdated.nonAcceptImpChoices.choices){\n            selectedChoices = stateToBeUpdated.nonAcceptImpChoices.choices.map((item)=>{\n              if(item.selected === true && item.other === false){\n                return {acceptable:item.acceptable,choice:item.choice,other:item.other}\n              }\n            });\n      \n            selectedChoices = selectedChoices.filter(function( element ) {\n              return element !== undefined;\n           });\n      \n           if(!!otherImperfectionEntered){\n            selectedChoices.push({acceptable:false,choice:otherImperfectionEntered,other:true});\n           }    \n          }\n          if(!!isOkNoImperfSelected){\n            noImperfectionChoices.push(isOkNoImperfSelected);\n          }\n      \n          if(selectedChoices?.length){\n            payload.data.checkpoints[dataKey][\"choices\"] = selectedChoices;\n          }\n          if(noImperfectionChoices?.length){\n            payload.data.checkpoints[dataKey][\"noImperfectionChoices\"] = noImperfectionChoices;\n          }\n      \n          if(appointmentDetails && appointmentDetails.data && appointmentDetails.data.checkpoints && \n            appointmentDetails.data.checkpoints[dataKey] && appointmentDetails.data.checkpoints[dataKey].images && \n            appointmentDetails.data.checkpoints[dataKey].images.length){\n              payload.data.checkpoints[dataKey][\"images\"] = appointmentDetails.data.checkpoints[dataKey].images;\n          }\n      \n          if(appointmentDetails && appointmentDetails.data && appointmentDetails.data.checkpoints && \n            appointmentDetails.data.checkpoints[dataKey] && appointmentDetails.data.checkpoints[dataKey].videos && \n            appointmentDetails.data.checkpoints[dataKey].videos.length){\n              payload.data.checkpoints[dataKey][\"videos\"] = appointmentDetails.data.checkpoints[dataKey].videos;\n          }\n      \n          console.log(payload);\n          dispatch(approveQualityChecks(payload,appointmentDetails.appointmentId));\n          setIsEditCheckpoint(\"\");\n          setTimeout(()=>{\n            let params = {\n              appointmentId:appointmentDetails.appointmentId,\n              inspectionType:\"CATALOG\",\n            }\n            dispatch(getYardListingDetails(params));\n            dispatch(getYardListingDetails(params));\n          },1000);\n          setGetConfirmation(false);\n          setDataKey(\"\");\n          setIsConfirmationDialog(false);\n        }\n    }\n    // Handlers to update checkpoints data ends here\n\n    //Tagging part starts here\n    const addTagHandler = (tagName,item) => {\n      if(appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.qualityChecks[item].status === \"REJECTED\"){\n        return\n      }\n      let payload = {\n        \"inspectionType\": \"CATALOG\",\n        \"schemaVersion\": \"IN_CAR_CATALOG_V1\",\n        \"data\":{\n            \"action\":\"tagging\",\n            \"qualityChecks\":{}\n          }\n        }\n        if(item && tagName){\n          payload.data.qualityChecks[item] = {\"tag\":tagName.toUpperCase()};\n        }\n        dispatch(addTagging(payload,appointmentDetails.appointmentId,\"Tag applied\"));\n        setTimeout(()=>{\n          let params = {\n            appointmentId:appointmentDetails.appointmentId,\n            inspectionType:\"CATALOG\",\n          }\n          dispatch(getYardListingDetails(params));\n          dispatch(getYardListingDetails(params));\n        },1000);      \n\n    }\n\n    const togglePageRedirect = () =>{\n        setIsSummaryList(!isSummaryList);\n    }\n\n  return (\n    <>\n    {isConfirmationDialog ? (\n    <CustomDialog \n    setGetConfirmation={setGetConfirmation} \n    setIsConfirmationDialog={setIsConfirmationDialog}\n    />  \n    ):(null)}\n\n    {magnifyImg && magnifyImg.path && (\n      <div className=\"background-shadow\">\n        <div>\n        <TransformWrapper defaultScale={1} defaultPositionX={200} defaultPositionY={100}>\n          {({zoomIn,zoomOut,resetTransform,...rest}) => (\n            <><div className=\"row m-0\">\n              <div className=\"col-4\"></div>\n              <div className=\"col-5\">\n                <button className=\"btn btn-primary p-1 px-3 text-white\" onClick={()=>zoomIn()}> + </button>\n                <button className=\"btn mx-1 my-1 p-1 btn-primary text-white\" onClick={()=>resetTransform()}> Reset </button>\n                <button className=\"btn btn-primary p-1 px-3 text-white\" onClick={()=>zoomOut()}> - </button>\n                <TransformComponent>\n                  <img src={magnifyImg.path} width=\"550\"/>\n                </TransformComponent>\n              </div>\n              <div className=\"col-3\">\n              <span className=\"close-image-preview\" onClick={()=> setMagnifier(\"\")}>X</span>\n              </div>\n            </div>\n            </>\n          )}\n        </TransformWrapper>\n        \n        </div>\n      </div>\n    )}\n    \n    {props.showToaster && <AlertBox ShowAlert={props.showToaster} message={props.toasterMessage} type={props.toasterType} />}\n    {props && props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n    <div className=\"col-lg-12\">\n      {isSummaryList ? (\n        <a className=\"back\" role=\"button\" onClick={e=>togglePageRedirect()} style={{cursor:'pointer'}}> Back </a>\n      ):(\n        <Link to=\"/yard-qa\" className=\"back\"> Back </Link>\n      )}\n      <div className=\"middleContent\">\n        <div className=\"row contentWrapper\">\n        {appointmentDetails && appointmentDetails.make && (\n          <div className=\"col-lg-3\">\n            <div className=\"form-group\">\n              <h5>{appointmentDetails.make + \" \" + appointmentDetails.model}</h5>\n              <span>{appointmentDetails.variant ? appointmentDetails.variant+ \" | \" : ''}</span> \n              <span>{appointmentDetails.fuelType ? appointmentDetails.fuelType : ''}</span>\n            </div>\n          </div>\n        )}\n\n          <div className=\"col-lg-3\">\n            <div className=\"form-group  bolder-label\">\n            <label>Inspected By: </label>\n              {appointmentDetails?.createdBy?.uid ? \" \" + appointmentDetails.createdBy.uid : \" N/A\"}\n            </div>\n          </div>\n\n          <div className=\"col-lg-3\">\n            <div className=\"form-group bolder-label\">\n              <label>Workshop Name: </label>\n              {appointmentDetails?.loc?.name ? \" \" + appointmentDetails?.loc?.name : \" N/A\"}\n            </div>\n          </div>\n\n          <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-label\">\n              <label>Assigned To: </label>\n                <span>{appointmentDetails?.assignedTo?.uid ? ' ' + appointmentDetails.assignedTo.uid : ' None'}</span>\n              </div>\n            </div>\n\n        </div>\n      \n        <div className=\"row\">\n          <div className=\"col-lg-3\">\n            <div className=\"form-group bolder-span\">\n              <label>Appointment ID: </label>\n              <span>{ appointmentDetails?.appointmentId ? \" \" + appointmentDetails.appointmentId : ' N/A'}</span>\n            </div>\n          </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Inspection Date: </label>\n                <span>{appointmentDetails?.formatedUpdatedAt ? \" \" + appointmentDetails.formatedUpdatedAt : ' N/A'}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Acceptable Imperfection: </label>\n                <span> {accImperfection}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Non-Acceptable Imperfection: </label>\n                <span> {nonAccImperfection}</span>\n              </div>\n            </div>\n          \n        </div>\n       {!isSummaryList ? (<>\n        {/* Photo slider starts here*/}\n        <div className=\"row titleWrapper\">\n          <div className=\"col-lg-12\">\n            <div className=\"photos-row align-items-center d-flex justify-content-between\">\n              <label>Photos</label> <span>Total <strong>{allImages.length}</strong> photos</span>\n            </div>\n            {allImages && allImages.length > 0 && (\n            <div className=\"row\">\n              <div className=\"photo-container-horiz\">\n              {allImages.map((image,index)=>(\n                <div className=\"col-lg-4 photos-slider\" key={index}>\n                  <img src={image.path} alt={image.label} onClick={()=>{imageMagnifier(image)}}/>\n                </div>\n              ))}\n              </div>\n              </div>\n             )}\n          </div>\n        </div>\n        {/* Photo slider ends here*/}\n        <div className=\"row\">\n            <div className=\"col-lg-12\">\n              {appointmentDetails && appointmentDetails.data && (\n                <div className=\"cardWrapper\">\n                <span className=\"list-header\">Imperfections List {\" \" + (accImperfection + nonAccImperfection)}</span>\n                {appointmentDetails.data.checkpoints && Object.keys(appointmentDetails.data.checkpoints).map((item,index)=>{\n                  return(\n                   <>\n                   {appointmentDetails.data.checkpoints[item]?.choices.length  ? ( \n                  <div className=\"container-box-card\" key={index}>\n                    <label className=\"label-top\">{item}</label>\n                    <span className={appointmentDetails.data.qualityChecks[item]?.tag === \"NONE\" ? \"greyLabel\" :\n                    appointmentDetails.data.qualityChecks[item]?.tag === \"GREEN\" ? \"greenLabel\" :\n                    appointmentDetails.data.qualityChecks[item]?.tag === \"YELLOW\" ? \"yellowLabel\" :\n                    appointmentDetails.data.qualityChecks[item]?.tag === \"RED\" ? \"redLabel\" : ''}\n                    >{appointmentDetails.data.qualityChecks[item]?.tag}</span>\n                    {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.qualityChecks[item].status &&\n                    (\n                      <button className=\"checkpoint-edit-button\" \n                      onClick={e=>{editCheckpointClicked(index,item);setRejectAction(\"\");setIsConfirmationDialog(false);setDataKey(\"\");}}\n                      disabled={isCheckpointEdit === index || !iscorrectAssigned}\n                      >EDIT</button>\n                    )}\n                    {isCheckpointEdit !== index && (\n                      <div className=\"info-container\">\n                      <div className=\"row\">\n                        <div className=\"col-lg-6\">\n                          <div className=\"row\">\n                            <div className=\"col-lg-12 image-container\">\n                              {toggleViewHandlerFlag === index ? (\n                                <video width=\"100%\" height=\"300\" controls>\n                                {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].videos.\n                                map((video,index)=>{\n                                  return(   <source src={video.path} type=\"video/mp4\" key={index}/>)\n                                })}\n                                </video>\n                              ):\n                                (<>\n                                  {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].images.\n                                  map((image,index)=>{\n                                    return(<img src={image.path} alt={image.label} key={index} onClick={()=>{imageMagnifier(image)}}/>)\n                                  })}\n                                </>\n                              )}\n                            </div>\n                          </div>\n                          {appointmentDetails.data.checkpoints[item] && \n                          appointmentDetails.data.checkpoints[item].images &&\n                          appointmentDetails.data.checkpoints[item].images.length > 0 && (\n                            <button className=\"toggle-view-button\" onClick={()=>{toggleImageHandler(index)}}>Image View</button>\n                          )}\n                          {appointmentDetails.data.checkpoints[item] && \n                          appointmentDetails.data.checkpoints[item].videos &&\n                          appointmentDetails.data.checkpoints[item].videos.length > 0 && (\n                            <button className=\"toggle-view-button\" onClick={()=>{toggleVideoHandler(index)}}>Video View</button>\n                          )}\n                        </div>\n                        <div className=\"col-lg-6\">\n                          <div className=\"row\">\n                              {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].ok === true && \n                              appointmentDetails.data.checkpoints[item].choices.length > 0 &&(\n                                <div className=\"col-lg-12  light-label dark-span textTitle\">\n                                      <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                      {appointmentDetails.data.checkpoints[item].choices.map((choice)=>{\n                                        return(choice.acceptable ? choice.choice + ' | ':'')\n                                        })}\n                                    </div>\n                              )}\n\n                              {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].ok === false && \n                              appointmentDetails.data.checkpoints[item].choices.length  > 0 &&(\n                                <>\n                                <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                      <h6>Unacceptable Imperfections (shown to customer)</h6>\n                                      {appointmentDetails.data.checkpoints[item].choices.map((choice)=>{\n                                        return(!choice.acceptable ? choice.choice + ' | ' : '')\n                                        })}\n                                    </div>\n\n                                    <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                    <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                    {appointmentDetails.data.checkpoints[item].choices.map((choice)=>{\n                                      return(choice.acceptable ? choice.choice + ' | ' : '')\n                                      })}\n                                  </div>\n                                </>\n                              )}\n                                {appointmentDetails.data.estimates && appointmentDetails.data.estimates[item] && appointmentDetails.data.estimates[item] && appointmentDetails.data.estimates[item].invalidated === false  &&(\n                                    <div className=\"col-lg-6\">\n                                      <div className=\"row\">\n                                       <div className=\"col-lg-6 pl20 light-label dark-span borderRight\">\n                                              <h6>Additional Part</h6>\n                                       </div>\n                                       <div className=\"col-lg-6 pl20 light-label dark-span\">\n                                              <h6>Part Cost</h6>\n                                       </div>\n                                       </div>\n                                    {appointmentDetails.data.estimates[item]?.parts.map((data,index)=>{\n                                      return(\n                                            <div className=\"row\" key={index}>\n                                                <div className=\"col-lg-6 pl20 light-label dark-span borderRight\">\n                                                  <span>{data.name}</span>\n                                                </div>\n                                                <div className=\"col-lg-6 pl20 light-label dark-span\">\n                                                  <span>{data.cost}</span>\n                                                </div>\n                                            </div>                                                                                   \n                                      )\n                                    })}\n                                    </div>\n                                )} \n                          </div>      \n                            {isRejected === index ? (\n                              <div className=\"row\"> \n                                <div className=\"col-lg-12 button-container buttonContainer\">\n                                      <div className=\"form-group reject-form\">\n                                      <textarea className=\"form-control\" rows=\"3\" cols=\"50\"\n                                        placeholder=\"Please add reason for rejection\"\n                                        onChange={handleRejectionComment}\n                                        />\n                                        {showOnRejectSubmitError && (\n                                          <div className=\"text-danger\">\n                                            {comment === \"\" ? \"Please add reason for rejection\" : ''}\n                                            </div>\n                                        )}\n                                      <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={()=>{setShowOnRejectSubmitError(false);setRejectAction(\"\");setComment(\"\");}}>Cancel</button>\n                                      <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={()=>{onSubmitReject(item,index,comment,false)}}>Submit</button>\n                                      </div>                            \n                                </div>\n                              </div>\n                                ):(<>\n                                  {appointmentDetails.data.qualityChecks[item] &&\n                                  (appointmentDetails.data.qualityChecks[item].status === \"PENDING\" ||\n                                  (appointmentDetails.data.qualityChecks[item].status !== \"PENDING\" && reEdit === index))\n                                  ? (\n                                  <div className=\"col-lg-12 button-container buttonContainer\">\n                                  <button\n                                  style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                  disabled={isConfirmationDialog || !iscorrectAssigned}\n                                  onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                  setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n                                  <button \n                                  style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                  disabled={isConfirmationDialog || !iscorrectAssigned}\n                                  onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n                                  </div>\n                                ) : (\n                                  <div className=\"col-lg-12 button-container buttonContainer\">\n                                    {appointmentDetails.data.qualityChecks[item] &&\n                                  appointmentDetails.data.qualityChecks[item].status !== \"PENDING\" &&\n                                    (<>\n                                      {appointmentDetails.data.qualityChecks[item].status === \"REJECTED\" &&\n                                      appointmentDetails.data.qualityChecks[item].invalidated === false ? (\n                                        <>\n                                        {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.checkpoints[item].ok === true &&\n                                        appointmentDetails.data.checkpoints[item].choices && appointmentDetails.data.checkpoints[item].choices.length ? (\n                                          <>\n                                          <button\n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={true}\n                                          onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                          setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n\n                                         <button \n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={isConfirmationDialog || !iscorrectAssigned}\n                                          onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n                                          </>\n                                        ):(null)}\n\n                                        {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.checkpoints[item].ok === false ?(\n                                        <>\n                                        <button\n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={true}\n                                        onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                        setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n\n                                         <button \n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={isConfirmationDialog || !iscorrectAssigned}\n                                          onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n                                         \n                                         </>):(null)}\n                                      </>\n                                      ):(null)}\n\n                                      {appointmentDetails.data.qualityChecks[item].status === \"APPROVED\" &&\n                                      appointmentDetails.data.qualityChecks[item]?.reason !== \"NO_WORK_TO_BE_DONE\" &&\n                                      appointmentDetails.data.qualityChecks[item].invalidated === false ? (\n                                      <>\n                                      {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.checkpoints[item].ok === true &&\n                                      appointmentDetails.data.checkpoints[item].choices && appointmentDetails.data.checkpoints[item].choices.length ? (\n                                          <>\n                                          <button\n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={isConfirmationDialog || !iscorrectAssigned}\n                                          onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                          setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n\n                                         <button \n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={true}\n                                          onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n                                          </>\n                                        ):(null)}\n\n                                        {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.checkpoints[item].ok === false ?(\n                                        <>\n                                        <button\n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={isConfirmationDialog || !iscorrectAssigned}\n                                        onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                        setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n                                        \n                                        <button \n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={true}\n                                        onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n                                         </> ):(null)}\n                                      </>):(null)}\n\n                                      {(\n                                        <div className=\"action-done-reset-view\">\n                                              <div style={{padding: \"25px 40px\"}}>{appointmentDetails.data.checkpoints[item].noImperfectionChoices[0]}</div>\n                                        <label>\n                                          {appointmentDetails.data.qualityChecks[item].status === \"APPROVED\" ? \n                                          \"This checkpoint and estimates is Approved\" :[appointmentDetails.data.qualityChecks[item].status === \"NO_ACTION\" ?\n                                           \"This checkpoint and estimates is Approved\" : \"This checkpoint and estimates is Rejected\"]}\n                                        </label>\n                                        </div>\n                                      )}\n                                      </>)\n                                    }\n                                  </div>\n                                )}\n                                  </>\n                                )\n                              }\n                              <div className=\"settagmainWrapper\">\n                                <div className=\"settagWrapper\">\n                                  <p>Set tag as</p>\n                                  <div className=\"dropdown\">\n                                    <span>{appointmentDetails.data.qualityChecks[item]?.tag}</span>\n                                    <ul>\n                                      <li className=\"none\" onClick={e=>addTagHandler(\"none\",item)}>None</li>\n                                      {appointmentDetails.data.qualityChecks[item]?.status !== \"REJECTED\" ? (\n                                        <>\n                                        <li className=\"green\" onClick={e=>addTagHandler(\"green\",item)}>Green</li>\n                                        <li className=\"yellow\" onClick={e=>addTagHandler(\"yellow\", item)}>Yellow  </li>\n                                        <li className=\"red\" onClick={e=>addTagHandler(\"red\",item)}>Red</li>\n                                        </>\n                                      ):(null)}\n                                    </ul>\n                                  </div>\n                                  \n                                  <img src={Question} alt=\"info\"  onClick={e=>onAllocateOpen(item)}/>  \n                                  <Popup isOpen={allocateOpen} close={e=>onAllocateClose()}>\n                                      <QuestionMarkPopUp onClose={e=>onAllocateClose()} hintData={hintData}/>\n                                  </Popup>\n                                </div>\n                              </div>\n                        </div>\n                      </div>\n                    </div>\n                    )}\n\n                    {isCheckpointEdit === index && (\n                      <div className=\"info-container\">\n                      <div className=\"row\">\n                        <div className=\"col-lg-12\">\n                          <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                              <div className=\"row\">\n                                {appointmentDetails.data.checkpoints[item] && \n                                  (\n                                    <>\n                                    <div className=\"col-lg-12 light-label dark-span\">\n                                          <h6>Current condition</h6>\n                                          {stateToBeUpdated && stateToBeUpdated.nonAcceptImpChoices && stateToBeUpdated.nonAcceptImpChoices.choices && \n                                          stateToBeUpdated.nonAcceptImpChoices.choices.map((choice,ind)=>{\n                                            return(\n                                              <>\n                                              {choice && choice.other === false ? (\n                                                <>\n                                                <input type=\"checkbox\" checked={choice.selected} onChange={e=> changeChoicesHandler(\"nonAccept\",ind)}/>\n                                                 <span> {choice.choice}</span><br/>\n                                                </>\n                                              ):( null\n                                              )}\n                                              \n                                              {masterData && masterData.checkpoints && masterData.checkpoints.map((ChildrenItem)=>{\n                                                return (<>\n                                                {item === ChildrenItem.key && (\n                                                  <>\n                                                  {ChildrenItem.choices && ChildrenItem.choices.map((choice2)=>{\n                                                    return(\n                                                      <>\n                                                      {choice2 && choice2.name === choice.choice && choice.selected && !choice.other && choice2.type === \"relative\" && (\n                                                        <div className=\"checkpoint-edit-options\">\n                                                        <input type=\"radio\" name={\"imperfectionType\"+choice.choice} onChange={e=> changeImperfectionType(choice,ind,\"acceptable\")} checked={choice.acceptable} value=\"acceptable\"/>\n                                                        <span className=\"large-text\"> Acceptable Imperfection (not shown to customer)</span><br/>\n                                                        {choice2.acceptable && choice2.acceptable.map((info,index)=>{\n                                                          return(\n                                                            <>\n                                                            <span className=\"small-text\">{index + 1} {info}</span><br/>\n                                                            </>\n                                                          )\n                                                        })}\n                                                        <br/>        \n                                                        <input type=\"radio\" name={\"imperfectionType\"+choice.choice} onChange={e=> changeImperfectionType(choice,ind,\"non-acceptable\")} checked={!choice.acceptable} value=\"non-acceptable\"/>\n                                                        <span className=\"large-text\"> Non-Acceptable Imperfection (shown to customer)</span><br/>\n                                                        {choice2.acceptable && choice2.nonAcceptable.map((info,index)=>{\n                                                          return(\n                                                            <>\n                                                            <span className=\"small-text\">{index + 1} {info}</span><br/>\n                                                            </>\n                                                          )\n                                                        })}\n                                                      </div>\n                                                      )}\n                                                      </>\n                                                    )\n                                                  })}\n                                                  </>\n                                                )}\n                                                </>)\n                                              })}\n                                              </>\n                                            )\n                                            })}\n                                        <div className=\"row\">\n                                          <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                            <br/>\n                                            <span className=\"small-text\">Others : </span><br/>\n                                            <input type=\"text\" className=\"form-control\"\n                                            value={otherImperfectionEntered} \n                                            onChange={e=> otherImperfection(e.target.value)}/>\n                                          </div>\n\n                                          {masterData && masterData.checkpoints && masterData.checkpoints.map((masterData)=>{\n                                            return(\n                                              <>\n                                              {item === masterData.key && (\n                                                <>\n                                                {masterData && masterData.noImperfectionChoices && masterData.noImperfectionChoices.map((option)=>{\n                                                  return(\n                                                    <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                                    <input type=\"radio\" name=\"imperfectionType\" checked={isOkNoImperfSelected === option.name} value={option.name} onChange={e=> isNotApplicableSelected(e.target.value)}/>\n                                                    <span>{\" \" + option.name}</span>\n                                                    </div>\n                                                  )\n                                                })}\n                                                </>\n                                              )}\n                                              </>\n                                            )\n                                          })}\n                                        </div>\n                                        </div>\n                                    </>\n                                  )}\n                              </div>\n                            </div>\n                          </div>      \n                          <div className=\"row\">\n                            <div className=\"col-lg-12 button-container buttonContainer text-center m-0 p-0\">\n                              <div className=\"reject-form\">\n                              <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={()=>{setIsEditCheckpoint(\"\"); checkpointEditCancled(item)}}>Cancel</button>\n                              <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={e=>updateCheckpointDataHandler(item)}>Save</button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    )}\n                    \n                    {/* Last inspection data */}\n                    <div className=\"row\">\n                      <div className=\"col-lg-12\">\n                      {lastInspectionData && lastInspectionData.data && (\n                        <div className=\"container-box\">\n                      {Object.keys(lastInspectionData.data.qualityChecks).map((inspectionItem,index2)=>{\n                        return (\n                          <div>\n                            {inspectionItem === item && lastInspectionData.data.qualityChecks[inspectionItem]?.invalidated === false && (\n                          <div className=\"container-box-card  toggle-info-container\" key={index2}>\n                            <div className=\"lastinspection-header\">\n                              <span className=\"list-header-first\" onClick={() => toggleLastInspectionHandler(index2)}>Last Inspection Data</span>\n                              <span className=\"list-header2 list-header-first\">Workshop : {lastInspectionData?.loc?.name ? \" \" + lastInspectionData.loc.name : \" N/A\"} </span>\n                              <span className=\"list-header2 list-header-first\">Date: {\" \" + lastInspectionData.formatedUpdatedAt} </span>\n                              <span className=\"list-header2 list-header-first\">Time: {\" \" + lastInspectionData.formatedUpdateAtTime} </span>\n                            </div>\n                          \n                          <div className=\"info-container last-inspection-info-container\" hidden={toggleLastInspection !== index2 || !showHideToggler}>\n                          <label className=\"label-top\">{item}</label>\n                            <div className=\"row my-2 mx-2\">\n                              <div className=\"col-lg-6\">\n                                <div className=\"row\">\n                                  <div className=\"col-lg-12 image-container\">\n                                        { mediaType === \"video\" ? (\n                                          <video width=\"100%\" height=\"300\" controls>\n                                          {lastInspectionData.data.checkpoints[item] && lastInspectionData.data.checkpoints[item].videos.\n                                          map((video,index)=>{\n                                            return(   <source src={video.path} type=\"video/mp4\" key={index}/>)\n                                          })}\n                                          </video>\n                                        ):\n                                          (<>\n                                            {lastInspectionData.data.checkpoints[item] && lastInspectionData.data.checkpoints[item].images.\n                                            map((image,index)=>{\n                                              return(<img src={image.path} alt={image.label} key={index} onClick={()=>{imageMagnifier(image)}}/>)\n                                            })}\n                                          </>\n                                        )}\n                                  </div>\n                                </div>\n                                {lastInspectionData.data.checkpoints[inspectionItem] && \n                                lastInspectionData.data.checkpoints[inspectionItem].images &&\n                                lastInspectionData.data.checkpoints[inspectionItem].images.length > 0 && (\n                                  <button className=\"toggle-view-button\" onClick={()=>{toggleImageHandler2(index2,\"image\")}}>Image View</button>\n                                )}\n                                {lastInspectionData.data.checkpoints[inspectionItem] && \n                                lastInspectionData.data.checkpoints[inspectionItem].videos &&\n                                lastInspectionData.data.checkpoints[inspectionItem].videos.length > 0 && (\n                                  <button className=\"toggle-view-button\" onClick={()=>{toggleVideoHandler2(index2,\"video\")}}>Video View</button>\n                                )}\n                              </div>\n                              <div className=\"col-lg-6\">\n                                <div className=\"row\">\n                                    {lastInspectionData.data.checkpoints[inspectionItem] && lastInspectionData.data.checkpoints[inspectionItem].ok === true && (\n                                      <div className=\"col-lg-12 card light-label dark-span\">\n                                            <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                            {lastInspectionData.data.checkpoints[inspectionItem].choices.map((choice)=>{\n                                              return(choice.acceptable ? choice.choice + ' | ' : '')                                              \n                                              })}\n                                          </div>\n                                    )}\n\n                                    {lastInspectionData.data.checkpoints[inspectionItem] && lastInspectionData.data.checkpoints[inspectionItem].ok === false && (\n                                      <>\n                                      <div className=\"col-lg-12 card light-label dark-span\">\n                                            <h6>Unacceptable Imperfections (shown to customer)</h6>\n                                            {lastInspectionData.data.checkpoints[item].choices.map((choice,ind,arr)=>{\n                                              return(!choice.acceptable ? choice.choice + ' | ' : '')\n                                              })}\n                                          </div>\n\n                                          <div className=\"col-lg-12 card light-label dark-span\">\n                                          <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                          {lastInspectionData.data.checkpoints[item].choices.map((choice,ind,arr)=>{\n                                            return(choice.acceptable ? choice.choice + ' | ' : '')\n                                            })}\n                                        </div>\n                                    </>\n                                    )}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          </div>\n                          )}\n                          </div>\n                      )}\n                      )}\n                        </div>\n                      )}\n                      </div>\n                    </div>\n                        {/* Last inspection section ends*/}\n                  </div>\n                ):(null)}\n                </>\n                )                  \n                })}\n\n                {/* Change status starts here */}\n                {Object.keys(appointmentDetails.data.checkpoints).map((item,index)=>{\n                  return(\n                   <>\n                   {appointmentDetails.data.checkpoints[item]?.choices.length === 0  ? ( \n                  <div className=\"container-box-card\" key={index}>\n                    <label className=\"label-top\">{item}</label>\n                    <span className={appointmentDetails.data.qualityChecks[item]?.tag === \"GREEN\" ? \"greenLabel\" :\n                    appointmentDetails.data.qualityChecks[item]?.tag === \"YELLOW\" ? \"yellowLabel\" :\n                    appointmentDetails.data.qualityChecks[item]?.tag === \"RED\" ? \"redLabel\" : 'greenLabel'}\n                    >{appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.qualityChecks[item]?.tag !== \"NONE\" ? appointmentDetails.data.qualityChecks[item]?.tag : 'GREEN'}</span>\n                    <button className=\"checkpoint-edit-button\" \n                      onClick={e=>editCheckpointClicked(index,item)}\n                      disabled={isCheckpointEdit === index || !iscorrectAssigned}\n                      >EDIT</button>\n                     <div className=\"row\">\n                    {isCheckpointEdit === index ? (\n                        <div className=\"col-lg-12\">\n                          <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                              <div className=\"row\">\n                                {appointmentDetails.data.checkpoints[item] && \n                                  (\n                                    <>\n                                    <div className=\"col-lg-12 light-label dark-span\">\n                                          <h6>Current condition</h6>\n                                          {stateToBeUpdated && stateToBeUpdated.nonAcceptImpChoices && stateToBeUpdated.nonAcceptImpChoices.choices && \n                                          stateToBeUpdated.nonAcceptImpChoices.choices.map((choice,ind)=>{\n                                            return(\n                                              <>\n                                              {choice && choice.other === false ? (\n                                                <>\n                                                <input type=\"checkbox\" checked={choice.selected} onChange={e=> changeChoicesHandler(\"nonAccept\",ind)}/>\n                                                 <span> {choice.choice}</span><br/>\n                                                </>\n                                              ):( null\n                                              )}\n                                              \n                                              {masterData && masterData.checkpoints && masterData.checkpoints.map((ChildrenItem)=>{\n                                                return (<>\n                                                {item === ChildrenItem.key && (\n                                                  <>\n                                                  {ChildrenItem.choices && ChildrenItem.choices.map((choice2)=>{\n                                                    return(\n                                                      <>\n                                                      {choice2 && choice2.name === choice.choice && choice.selected && !choice.other && choice2.type === \"relative\" && (\n                                                        <div className=\"checkpoint-edit-options\">\n                                                        <input type=\"radio\" name={\"imperfectionType\"+choice.choice} onChange={e=> changeImperfectionType(choice,ind,\"acceptable\")} checked={choice.acceptable} value=\"acceptable\"/>\n                                                        <span className=\"large-text\"> Acceptable Imperfection (not shown to customer)</span><br/>\n                                                        {choice2.acceptable && choice2.acceptable.map((info,index)=>{\n                                                          return(\n                                                            <>\n                                                            <span className=\"small-text\">{index + 1} {info}</span><br/>\n                                                            </>\n                                                          )\n                                                        })}\n                                                        <br/>        \n                                                        <input type=\"radio\" name={\"imperfectionType\"+choice.choice} onChange={e=> changeImperfectionType(choice,ind,\"non-acceptable\")} checked={!choice.acceptable} value=\"non-acceptable\"/>\n                                                        <span className=\"large-text\"> Non-Acceptable Imperfection (shown to customer)</span><br/>\n                                                        {choice2.acceptable && choice2.nonAcceptable.map((info,index)=>{\n                                                          return(\n                                                            <>\n                                                            <span className=\"small-text\">{index + 1} {info}</span><br/>\n                                                            </>\n                                                          )\n                                                        })}\n                                                      </div>\n                                                      )}\n                                                      </>\n                                                    )\n                                                  })}\n                                                  </>\n                                                )}\n                                                </>)\n                                              })}\n                                              </>\n                                            )\n                                            })}\n                                        <div className=\"row\">\n                                          <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                            <br/>\n                                            <span className=\"small-text\">Others : </span><br/>\n                                            <input type=\"text\" className=\"form-control\"\n                                            value={otherImperfectionEntered} \n                                            onChange={e=> otherImperfection(e.target.value)}/>\n                                          </div>\n\n                                          {masterData && masterData.checkpoints && masterData.checkpoints.map((masterData)=>{\n                                            return(\n                                              <>\n                                              {item === masterData.key && (\n                                                <>\n                                                {masterData && masterData.noImperfectionChoices && masterData.noImperfectionChoices.map((option)=>{\n                                                  return(\n                                                    <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                                    <input type=\"radio\" name=\"imperfectionType\" checked={isOkNoImperfSelected === option.name} value={option.name} onChange={e=> isNotApplicableSelected(e.target.value)}/>\n                                                    <span>{\" \" + option.name}</span>\n                                                    </div>\n                                                  )\n                                                })}\n                                                </>\n                                              )}\n                                              </>\n                                            )\n                                          })}\n                                        </div>\n                                        </div>\n                                    </>\n                                  )}\n                              </div>\n                            </div>\n                          </div>      \n                          <div className=\"row\">\n                            <div className=\"col-lg-12 button-container buttonContainer text-center m-0 p-0\">\n                              <div className=\"reject-form\">\n                              <button\n                              disabled={isConfirmationDialog}\n                              style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                              onClick={()=>{setIsEditCheckpoint(\"\"); checkpointEditCancled(item)}}>Cancel</button>\n                              <button\n                              disabled={isConfirmationDialog}\n                              style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                              onClick={e=>updateCheckpointDataHandler(item)}>Save</button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                    ):(\n                      <>\n                      <div className=\"col-lg-6\">\n                          <div className=\"row\">\n                            <div className=\"col-lg-12 image-container\">\n                              {toggleViewHandlerFlag === index ? (\n                                <video width=\"100%\" height=\"300\" controls>\n                                {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].videos.\n                                map((video,index)=>{\n                                  return(   <source src={video.path} type=\"video/mp4\" key={index}/>)\n                                })}\n                                </video>\n                              ):\n                                (<>\n                                  {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].images.\n                                  map((image,index)=>{\n                                    return(<img src={image.path} alt={image.label} key={index} onClick={()=>{imageMagnifier(image)}}/>)\n                                  })}\n                                </>\n                              )}\n                            </div>\n                          </div>\n                          {appointmentDetails.data.checkpoints[item] && \n                          appointmentDetails.data.checkpoints[item].images &&\n                          appointmentDetails.data.checkpoints[item].images.length > 0 && (\n                            <button className=\"toggle-view-button\" onClick={()=>{toggleImageHandler(index)}}>Image View</button>\n                          )}\n                          {appointmentDetails.data.checkpoints[item] && \n                          appointmentDetails.data.checkpoints[item].videos &&\n                          appointmentDetails.data.checkpoints[item].videos.length > 0 && (\n                            <button className=\"toggle-view-button\" onClick={()=>{toggleVideoHandler(index)}}>Video View</button>\n                          )}\n                        </div>\n                    <div className=\"col-lg-6\"> \n                    {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].noImperfectionChoices.length &&\n                          appointmentDetails.data.checkpoints[item].noImperfectionChoices && isCheckpointEdit !== index ? (\n                            <div>{appointmentDetails.data.checkpoints[item].noImperfectionChoices[0]}</div>\n                          ):(null)} \n                    {isRejected === index ? (\n                      <div className=\"col-lg-12 button-container buttonContainer\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12 form-group reject-form\">\n                            <textarea className=\"form-control\" rows=\"3\" cols=\"50\"\n                              placeholder=\"Please add reason for rejection\"\n                              onChange={handleRejectionComment}\n                              />\n                              {showOnRejectSubmitError && (\n                                <div className=\"text-danger\">\n                                  {comment === \"\" ? \"Please add reason for rejection\" : ''}\n                                  </div>\n                              )}\n                            <button\n                            disabled={isConfirmationDialog}\n                            style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                            onClick={()=>{setShowOnRejectSubmitError(false);setRejectAction(\"\");setComment(\"\");setActionArray([])}}>Cancel</button>\n                            <button\n                            disabled={isConfirmationDialog}\n                            style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                            onClick={()=>{onSubmitReject(item,index,comment,true)}}>Submit</button>\n                            </div>\n                        </div>                                \n                      </div>\n                        ):(<>{ !actionArray.includes(index) ? (\n                          <div className=\"col-lg-12 button-container buttonContainer\">\n                          <button\n                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                          disabled={!iscorrectAssigned || isConfirmationDialog}\n                          onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n                          </div>\n                        ) : (\n                          <div className=\"col-lg-12 button-container buttonContainer\">\n                                    {appointmentDetails.data.qualityChecks[item] &&\n                                  appointmentDetails.data.qualityChecks[item].status !== \"PENDING\" &&\n                                  appointmentDetails.data.qualityChecks[item].status !== \"NO_ACTION\" &&\n                                    (<>\n                                      {(\n                                        <div className=\"action-done-reset-view\">\n                                        <label>\n                                          {appointmentDetails.data.qualityChecks[item].status === \"APPROVED\" ? \"This checkpoint and estimates is Approved\" : [appointmentDetails.data.qualityChecks[item].status === \"REJECTED\" ? \"This checkpoint and estimates is Rejected\" : '']}\n                                        </label>\n                                        {/* {appointmentDetails.data.qualityChecks[item].status === \"REJECTED\" && (\n                                        <button onClick={() => qcActionResetHandler(item,index,false)}>Reset</button>\n                                        )} */}\n                                        </div>\n                                      )}\n                                      </>)\n                                    }\n                                  </div>\n                                  \n                        )}\n                          </>\n                        )}\n                        <div className=\"settagmainWrapper\">\n                                <div className=\"settagWrapper\">\n                                  <p>Set tag as</p>\n                                  <div className=\"dropdown\">\n                                    <span>{appointmentDetails.data.qualityChecks[item]?.tag ? appointmentDetails.data.qualityChecks[item]?.tag : 'GREEN'}</span>\n                                    <ul>\n                                      <li className=\"none\" onClick={e=>addTagHandler(\"none\",item)}>None</li>\n                                      <li className=\"green\" onClick={e=>addTagHandler(\"green\",item)}>Green</li>\n                                      <li className=\"yellow\" onClick={e=>addTagHandler(\"yellow\", item)}>Yellow  </li>\n                                      <li className=\"red\" onClick={e=>addTagHandler(\"red\",item)}>Red</li>\n                                    </ul>\n                                  </div>\n                                  \n                                  <img src={Question} alt=\"info\"  onClick={e=>onAllocateOpen(item)} /> \n                                  <Popup isOpen={allocateOpen} close={e=>onAllocateClose()}>\n                                      <QuestionMarkPopUp onClose={e=>onAllocateClose()} hintData={hintData}/>\n                                  </Popup>\n                                </div>\n                              </div>\n                    \n                      </div>\n                      </>\n                    )}\n                    </div>\n                  </div>\n                ):(null)}\n                </>\n                )                  \n                })}\n                {/* Change status ends here */}\n                    <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} className=\"submit-all-ac-actions submitAction\" onClick={() => submitAllQcAction()}>Submit All QC Actions</button>\n              </div>\n              )}\n            </div>\n        </div>\n        </>) : (\n          <SummaryList totalCheckpointsCount={+nonAccImperfection + +accImperfection} \n          appointmentDetail={appointmentDetails} addTagging={addTagging}/>\n        )}\n      </div>\n      {/* Summary list */}\n    </div>\n    </>\n  );\n};\n\nconst mapDispatchToProps = {\n  getYardListingDetails,\n  approveQualityChecks,\n  addTagging\n};\n\nconst mapStateToProps = state => {\nreturn {\n        isProcessing: state.workshopReducer.isProcessing,\n        showToaster: state.commonReducer.showToaster,\n        toasterMessage: state.commonReducer.toasterMessage,\n        toasterType: state.commonReducer.toasterType,\n        listingDetails: state.workshopReducer.yardListingDetails,\n        lastInspectionData:state.workshopReducer.lastInspectionData,\n        qaTopImagesKeys:state.workshopReducer.qaTopImagesKeys,\n        masterData: state.workshopReducer.masterData\n};\n};\n\nexport default connect(mapStateToProps,\nmapDispatchToProps)(YardQaDetailsComponent);\n","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/inspectionHistoryDetail/inspectionHistoryDetailsComponent.js",["372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399"],"import React, { useState, useEffect, useRef } from \"react\";\nimport \"./style.css\"\nimport { useDispatch } from \"react-redux\";\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport \"../workshopQaDetail/workshopDetails.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { dateFormat, timeFormat } from \"../../utils/utils\";\nimport { Link } from 'react-router-dom';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\nimport Slider from \"react-slick\";\n\nconst SIDEBAR_HEADS = {\n  UNACCEPTABLE: \"Unacceptable Imperfection\",\n  ACCEPTABLE: \"Acceptable Imperfection\",\n  NO_IMPERFECTION: \"No Imperfection\"\n}\n\nconst INITAL_DATA = {\n  [SIDEBAR_HEADS.UNACCEPTABLE]: {\n    subCategory: [],\n    expand: true\n  },\n  [SIDEBAR_HEADS.ACCEPTABLE]: {\n    subCategory: [],\n    expand: true\n  },\n  [SIDEBAR_HEADS.NO_IMPERFECTION]: {\n    subCategory: [],\n    expand: true\n  }\n}\n\nconst InspectionHistoryDetailsComponent = (props) => {\n  const historyLink = useHistory();\n  const dispatch = useDispatch();\n  const [appointmentDetails, setAppointmentDetails] = useState({});\n  const [showHideToggler, setShowHideToggler] = useState(false);\n  const [imperfectionCount, setImperfectionCount] = useState(\"\");\n  const [nonAccImperfection, setNonAccImperfection] = useState(\"\");\n  const [accImperfection, setAccImperfection] = useState(\"\");\n  const [toggleViewHandlerFlag, setToggleViewHandler] = useState(\"\");\n  const [allImages, setAllImages] = useState([]);\n  const [lastInspectionData, setInspectionData] = useState([]);\n  const [toggleLastInspection, setToggleLastInspection] = useState(\"\");\n  const [mediaType, setMediaType] = useState(\"image\");\n  const [magnifyImg, setMagnifier] = useState(\"\");\n  const sliderRef = useRef();\n  const [modalImages, setModalImages] = useState([]);\n  const [inspectionSummary, setInspectionSummary] = useState({});\n  const [activeTab, setActiveTab] = useState(\"Exterior\")\n  const [filterednspectionData, setFilterednspectionData] = useState([]);\n  const currentCardRef = useRef();\n  const [activeSideBar, setActiveSideBar] = useState(null)\n\n  const sliderSettings = {\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    infinite: false,\n    arrow: true\n  };\n\n  const sliderTabSettings = {\n    slidesToShow: 4,\n    slidesToScroll: 2,\n    infinite: false,\n    arrow: true\n  }\n\n  const [sideTabs, setSideTab] = useState(INITAL_DATA);\n\n\n  useEffect(() => {\n    if (props && props.inspectionSummary) {\n      setInspectionSummary(props.inspectionSummary);\n    }\n  }, [props.inspectionSummary]);\n\n  useEffect(() => {\n    let totlaNonAcceptableImperfections = 0;\n    let totlalAcceptableImperfections = 0;\n    let allImages = [];\n    let allVideos = [];\n    if (props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.checkpoints) {\n      Object.keys(props.listingDetails[0].data.checkpoints).map((item) => {\n        props.qaTopImagesKeys.map((itemTop) => {\n          if (itemTop === item) {\n            props.listingDetails[0].data.checkpoints[itemTop].images.map((item, index) => {\n              allImages.push(item);\n            });\n            props.listingDetails[0].data.checkpoints[itemTop].videos.map((item, index) => {\n              allVideos.push(item);\n            })\n          }\n        })\n        setAllImages(allImages);\n      });\n\n      Object.keys(props.listingDetails[0].data.qualityChecks).map((item)=>{\n        if(props.listingDetails[0].data.qualityChecks[item].invalidated === false){\n            if(props.listingDetails[0].data.checkpoints[item].ok === false){\n                totlaNonAcceptableImperfections += 1;\n              }\n              else if( \n                props.listingDetails[0].data.checkpoints[item].choices.length > 0){\n                  totlalAcceptableImperfections += 1;\n              }\n        }\n      });\n    }\n    setNonAccImperfection(totlaNonAcceptableImperfections);\n    setAccImperfection(totlalAcceptableImperfections);\n    let totalQCheck = 0;\n    if (props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.qualityChecks) {\n      Object.keys(props.listingDetails[0].data.qualityChecks).map((item) => {\n        Object.keys(props.listingDetails[0].data.qualityChecks[item]).map((invalidated) => {\n          if (invalidated && invalidated === \"invalidated\" &&\n            props.listingDetails[0].data.qualityChecks[item][invalidated] === false) {\n            totalQCheck += 1\n          }\n        })\n      });\n      setImperfectionCount(totalQCheck);\n    }\n  }, [props.listingDetails]);\n\n  useEffect(() => {\n    props && props.listingDetails.map((item) => {\n      if (item && item.updatedAt) {\n        item.formatedUpdatedAt = dateFormat(item.updatedAt);\n      }\n    });\n    setAppointmentDetails(props.listingDetails[0]);\n  }, [props.listingDetails]);\n\n  useEffect(() => {\n    if (props && props.masterData && props.masterData.checkpoints && props.listingDetails[0]\n      && props.listingDetails[0].data && props.listingDetails[0].data.checkpoints) {\n      let orderedCheckpoints = {};\n      props.masterData.checkpoints.map((item) => {\n        if (props.listingDetails[0].data.checkpoints[item.key]) {\n          orderedCheckpoints[item.key] = props.listingDetails[0].data.checkpoints[item.key];\n        }\n      });\n      props.listingDetails[0].data.checkpoints = orderedCheckpoints;\n    }\n\n    if (props && props.masterData && props.masterData.checkpoints && props.listingDetails[0]\n      && props.listingDetails[0].data && props.listingDetails[0].data.qualityChecks) {\n      let orderedQualitychecks = {};\n      props.masterData.checkpoints.map((item) => {\n        if (props.listingDetails[0].data.qualityChecks[item.key] && !props.listingDetails[0].data.qualityChecks[item.key].invalidated) {\n          orderedQualitychecks[item.key] = props.listingDetails[0].data.qualityChecks[item.key];\n        }\n      });\n      props.listingDetails[0].data.qualityChecks = orderedQualitychecks;\n      console.log(orderedQualitychecks);\n    }\n\n    props && props.listingDetails.map((item, index) => {\n      if (item && item.updatedAt) {\n        item.formatedUpdatedAt = dateFormat(item.updatedAt);\n        item.formatedUpdateAtTime = timeFormat(item.updatedAt);\n      }\n    });\n    setInspectionData(props.listingDetails);\n    if (props && props.masterData && props.masterData.categories) setData(props.masterData.categories[0].category, props.listingDetails)\n  }, [props.listingDetails, props.masterData]);\n\n  // Creating Side Filter data\n  useEffect(() => {\n    let sideBarClone = JSON.parse(JSON.stringify(sideTabs));\n    Object.keys(sideBarClone).forEach(item => sideBarClone[item].subCategory = [])\n    if (props && props.masterData && props.listingDetails.length > 0) {\n      props.masterData.categories && props.masterData.categories.length > 0 && props.masterData.categories.forEach((item) => {\n        if (item.category === activeTab) {\n          item.subCategories.forEach(subItem => {\n            subItem.checkpoints.forEach(subItemCheckpoint => {\n              if (props.listingDetails.length > 0 && props.listingDetails[0].data.qualitychecks) {\n                //qualitychecks\n                if (Object.keys(props.listingDetails[0].data.qualitychecks).length > 0 &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key] === props.listingDetails[0].data.qualityChecks[subItemCheckpoint.key] &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].choices.length > 0 &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].ok === true) {\n                  sideBarClone[SIDEBAR_HEADS.ACCEPTABLE].subCategory.push(\n                    {\n                      header: subItemCheckpoint.key,\n                      ...props.listingDetails[0].data.checkpoints[subItemCheckpoint.key]\n                    })\n                } else if (\n                  Object.keys(props.listingDetails[0].data.qualitychecks).length > 0 &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key] === props.listingDetails[0].data.qualityChecks[subItemCheckpoint.key] &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].ok === false &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].choices.length) {\n                  sideBarClone[SIDEBAR_HEADS.UNACCEPTABLE].subCategory.push(\n                    {\n                      header: subItemCheckpoint.key,\n                      ...props.listingDetails[0].data.checkpoints[subItemCheckpoint.key]\n                    })\n                }\n              }\n              // non-quality\n              if (props.listingDetails.length > 0 && props.listingDetails[0].data.checkpoints) {\n                if (Object.keys(props.listingDetails[0].data.checkpoints).length > 0 &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key] !== props.listingDetails[0].data.qualityChecks[subItemCheckpoint.key] &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].choices.length > 0 &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].ok === true) {\n                  sideBarClone[SIDEBAR_HEADS.ACCEPTABLE].subCategory.push(\n                    {\n                      header: subItemCheckpoint.key,\n                      ...props.listingDetails[0].data.checkpoints[subItemCheckpoint.key]\n                    })\n                }\n                else if (\n                  Object.keys(props.listingDetails[0].data.checkpoints).length > 0 &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key] !== props.listingDetails[0].data.qualityChecks[subItemCheckpoint.key] &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].ok === false &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].choices.length > 0) {\n                  sideBarClone[SIDEBAR_HEADS.UNACCEPTABLE].subCategory.push(\n                    {\n                      header: subItemCheckpoint.key,\n                      ...props.listingDetails[0].data.checkpoints[subItemCheckpoint.key]\n                    })\n                }\n                else if (\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].ok === true &&\n                  props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].noImperfectionChoices.length > 0) {\n                  sideBarClone[SIDEBAR_HEADS.NO_IMPERFECTION].subCategory.push(\n                    {\n                      header: subItemCheckpoint.key,\n                      ...props.listingDetails[0].data.checkpoints[subItemCheckpoint.key]\n                    })\n                }\n\n              }\n\n            })\n          })\n        }\n      })\n      setSideTab(sideBarClone)\n    }\n  }, [filterednspectionData])\n\n  useEffect(() => {\n    window.setTimeout(() => {\n      if (currentCardRef && currentCardRef.current) {\n        currentCardRef.current.scrollIntoView({\n          behavior: \"auto\",\n          block: \"center\"\n        });\n      }\n    }, 0);\n  }, [activeSideBar])\n\n  const moveTo = (tab) => {\n    setActiveSideBar(tab)\n  }\n\n  const toggleVideoHandler = (index) => {\n    setToggleViewHandler(index);\n  }\n\n  const toggleImageHandler = (index) => {\n    setToggleViewHandler(\"\");\n  }\n\n  const imageMagnifier = (data, allImages, index) => {\n    setMagnifier(data);\n    setModalImages(allImages);\n    setTimeout(() => {\n      sliderRef.current.slickGoTo(index);\n    }, 100);\n  };\n\n\n  const renderImages = (itemTop, item) => {\n    let imageAr = [];\n    imageAr = itemTop.data.checkpoints[item] && itemTop.data.checkpoints[item].images.map((image, index) => (\n      <div\n        key={index} className=\"imageWrap\">\n        <img src={image.path} alt={image.label} key={index} onClick={() => { imageMagnifier(image, itemTop.data.checkpoints[item].images, index) }} å />\n      </div>\n    ));\n    return imageAr;\n  };\n\n  const setData = (tab, data) => {\n    setActiveTab(tab)\n    let curentData = JSON.parse(JSON.stringify(data))\n    let filteredCheckpoints = {}\n    let filteredQualityCheck = {}\n    curentData.forEach(itemTop => {\n      itemTop.data.checkpoints && Object.keys(itemTop.data.checkpoints).map((item) => {\n        return (\n          filteredCheckpoints = {\n            ...filteredCheckpoints,\n            ...(item.includes(tab) && { [item]: itemTop.data.checkpoints[item] })\n          }\n        )\n      })\n\n      itemTop.data.checkpoints = filteredCheckpoints\n\n      itemTop.data.qualityChecks && Object.keys(itemTop.data.qualityChecks).map((item) => (\n        filteredQualityCheck = {\n          ...filteredQualityCheck,\n          ...(item.includes(tab) && { [item]: itemTop.data.qualityChecks[item] })\n        }\n      ))\n      let unAcc = {}\n      let acc = {}\n      let noiImp= {}\n\n      Object.keys(filteredQualityCheck).map(qc => {\n        if (filteredCheckpoints[qc].ok === false && filteredCheckpoints[qc].noImperfectionChoices.length === 0) {\n          unAcc = {\n            ...unAcc,\n            [qc]: filteredQualityCheck[qc]\n          }\n        } else if (filteredCheckpoints[qc].ok === true && filteredCheckpoints[qc].noImperfectionChoices.length === 0) {\n          acc = {\n            ...acc,\n            [qc]: filteredQualityCheck[qc]\n          }\n        } else if (filteredCheckpoints[qc].ok === true && filteredCheckpoints[qc].noImperfectionChoices.length > 0) {\n          noiImp = {\n            ...noiImp,\n            [qc]: filteredQualityCheck[qc]\n          }\n        }\n      })\n\n      // itemTop.data.qualityChecks = sortfilteredQualityCheck\n      itemTop.data.qualityChecks = {...unAcc, ...acc, ...noiImp}\n    })\n    setFilterednspectionData(curentData);\n  }\n\n  const onTabChange = (tab) => {\n    setData(tab, lastInspectionData)\n    setSideTab(INITAL_DATA)\n  }\n\n  const getCount = (tabName) => {\n    let count = null\n    if (props && props.masterData && props.listingDetails.length > 0) {\n      props.masterData.categories.forEach((item) => {\n        if (item.category === tabName) {\n          item.subCategories.forEach(subItem => {\n            subItem.checkpoints.forEach(subItemCheckpoint => {\n              if (Object.keys(props.listingDetails[0].data.checkpoints).length > 0 &&\n                props.listingDetails[0].data.checkpoints[subItemCheckpoint.key] &&\n                props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].choices.length > 0 &&\n                props.listingDetails[0].data.checkpoints[subItemCheckpoint.key].ok === false) {\n                count++\n              }\n            })\n          })\n        }\n      })\n    }\n    return count\n  }\n\n  const onChangeAccording = (head) => {\n    if (sideTabs[head].expand) {\n      setSideTab(\n        {\n          ...sideTabs,\n          [head]: { ...sideTabs[head], expand: false }\n        }\n      )\n    }\n    else {\n      setSideTab(\n        {\n          ...sideTabs,\n          [head]: { ...sideTabs[head], expand: true }\n        }\n      )\n    }\n  }\n\n  return (\n    <>\n      {magnifyImg && magnifyImg.path && (\n        <div className=\"background-shadow\">\n          <div className=\"sliderMainwrapper\">\n            <div className=\"col-3 close\">\n              <span className=\"close-image-preview\" onClick={() => setMagnifier(\"\")}>X</span>\n            </div>\n            <Slider ref={sliderRef} {...sliderSettings}>\n              {modalImages.map((image, index) => (\n                <TransformWrapper defaultScale={1} defaultPositionX={200} defaultPositionY={100}>\n                  {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n                    <><div className=\"row m-0\">\n                      <div className=\"col-4\"></div>\n                      <div className=\"col-5\">\n                        <button className=\"btn btn-primary p-1 px-3 text-white\" onClick={() => zoomIn()}> + </button>\n                        <button className=\"btn mx-1 my-1 p-1 btn-primary text-white\" onClick={() => resetTransform()}> Reset </button>\n                        <button className=\"btn btn-primary p-1 px-3 text-white\" onClick={() => zoomOut()}> - </button>\n                        <div className=\"imageWrapper\">\n                          <TransformComponent>\n                            <img src={image.path} width=\"550\" alt={image.label} />\n                          </TransformComponent>\n                        </div>\n                      </div>\n                    </div>\n                    </>\n                  )}\n                </TransformWrapper>\n              ))}\n            </Slider>\n          </div>\n        </div>\n      )}\n\n      {props.showToaster && <AlertBox ShowAlert={props.showToaster} message={props.toasterMessage} type={props.toasterType} />}\n      {props && props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n      <div className=\"col-lg-12\">\n        <Link to=\"/inspection-history-qa\" className=\"back\"> Back </Link>\n        <div className=\"middleContent\">\n          <div className=\"row contentWrapper\">\n            {appointmentDetails && appointmentDetails.make && (\n              <div className=\"col-lg-3\">\n                <div className=\"form-group\">\n                  <h5>{appointmentDetails.make + \" \" + appointmentDetails.model}</h5>\n                  <span>{appointmentDetails.variant ? appointmentDetails.variant + \" | \" : ''}</span>\n                  <span>{appointmentDetails.fuelType ? appointmentDetails.fuelType : ''}</span>\n                  {appointmentDetails.data.derivedStatus === \"GREEN_TAG\" || appointmentDetails.data.derivedStatus === \"YELLOW_TAG\"\n                  || appointmentDetails.data.derivedStatus === \"RED_TAG\" || appointmentDetails.data.derivedStatus === \"NONE\" ? (\n                    <span className={appointmentDetails.data.derivedStatus === \"NONE\" ? \"greyLabel\" :\n                    appointmentDetails.data.derivedStatus === \"GREEN_TAG\" ? \"greenLabel\" :\n                    appointmentDetails.data.derivedStatus === \"YELLOW_TAG\" ? \"yellowLabel\" :\n                    appointmentDetails.data.derivedStatus === \"RED_TAG\" ? \"redLabel\" : ''}\n                    >{appointmentDetails.data.derivedStatus ? appointmentDetails.data.derivedStatus.split(\"_\")[0] : ''}</span>\n                  ) : (null)}\n                  </div>\n              </div>\n            )}\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group  bolder-label\">\n                <label>Inspected By: </label>\n                {appointmentDetails?.createdBy?.uid ? \" \" + appointmentDetails.createdBy.uid : \" N/A\"}\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-label\">\n                <label>Workshop Name: </label>\n                {appointmentDetails?.loc?.name ? \" \" + appointmentDetails?.loc?.name : \" N/A\"}\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-label\">\n              <label>Assigned To: </label>\n                <span>{appointmentDetails?.assignedTo?.uid ? ' ' + appointmentDetails.assignedTo.uid : ' None'}</span>\n              </div>\n            </div>\n\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n                <label>Appointment ID: </label>\n                <span>{appointmentDetails?.appointmentId ? \" \" + appointmentDetails.appointmentId : ' N/A'}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n                <label>Inspection Date: </label>\n                <span>{appointmentDetails?.formatedUpdatedAt ? \" \" + appointmentDetails.formatedUpdatedAt : ' N/A'}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n                <label>Acceptable Imperfection: </label>\n                <span> {accImperfection}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n                <label>Non-Acceptable Imperfection: </label>\n                <span> {nonAccImperfection}</span>\n              </div>\n            </div>\n\n          </div>\n\n          {appointmentDetails && appointmentDetails.locationType === \"SERVICE_CENTER\" ? (\n            <div className=\"row contentWrapper border-top\">\n              <div className=\"col-lg-6\">\n                <div className=\"form-group bolder-span cost-center\">\n                  <label>Approved Estimate cost: </label>\n                  <span>{inspectionSummary && inspectionSummary.current && inspectionSummary.current.approved >= 0 ? inspectionSummary.current.approved : \" N/A\"}</span>\n                </div>\n              </div>\n\n              <div className=\"col-lg-6\">\n                <div className=\"form-group bolder-span cost-center\">\n                  <label>Total Refurb Cost till now: </label>\n                  <span>{inspectionSummary && inspectionSummary.totalCost >= 0 ? inspectionSummary.totalCost : \"N/A\"}</span>\n                </div>\n              </div>\n            </div>\n          ) : (null)}\n\n          {/* Photo slider starts here*/}\n          <div className=\"row titleWrapper\">\n            <div className=\"col-lg-12\">\n              <div className=\"photos-row align-items-center d-flex justify-content-between\">\n                <label>Photos</label> <span>Total <strong>{allImages.length}</strong> photos</span>\n              </div>\n              {allImages && allImages.length > 0 && (\n                <div className=\"row\">\n                  <div className=\"photo-container-horiz\">\n                    {allImages.map((image, index) => (\n                      <div className=\"col-lg-4 photos-slider\" key={index}>\n                        <img src={image.path} alt={image.label} onClick={() => { imageMagnifier(image, allImages, index) }} />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n          {/* Photo slider ends here*/}\n          {/* Tab view */}\n          <div className=\"tabsSliderWrapper\">\n            <Slider {...sliderTabSettings}>\n              {props && props.masterData && props.masterData.categories && props.masterData.categories.map((tab, index) => (\n                <div className={`tabs ${tab.category === activeTab && \"activeTab\"}`} key={index} onClick={() => onTabChange(tab.category)}>\n                  {tab.category} {getCount(tab.category) && <span className=\"tabCount\">{getCount(tab.category)}</span>}\n                </div>\n              ))}\n            </Slider>\n          </div>\n          <div className=\"h-line\"></div>\n\n          <div className=\"row\">\n            <div className=\"col-lg-3\">\n              <div className=\"sideViewWrapper\">\n                {Object.keys(sideTabs).map((item, index) => (\n                  sideTabs[item].subCategory.length > 0 && <div className=\"sideView\" key={index}>\n                    <h2 className={sideTabs[item].expand ? \"upArrow\" : \"downArrow\"} onClick={() => onChangeAccording(item)}>{item}</h2>\n                    {sideTabs[item].expand && <ul>\n                      {sideTabs[item].subCategory.map((subItem, subIndex) => (\n                        <li key={subIndex} onClick={() => moveTo(subItem.header)}>{subItem.header}</li>\n                      ))}\n                    </ul>}\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"col-lg-9\">\n              {appointmentDetails && appointmentDetails.data && (\n                <div className=\"cardWrapper\">\n                  <span className=\"list-header\">Imperfections List {\" \" + (accImperfection + nonAccImperfection)}</span>\n                  {filterednspectionData && filterednspectionData.map((itemTop, indexTop) => {\n                    return (\n                      <>\n                        {/* List of qualitychecks */}\n                        {itemTop.data.qualityChecks && Object.keys(itemTop.data.qualityChecks).map((item, index) => {\n                          return (\n                            <div className=\"container-box-card\" key={index} ref={activeSideBar === item ? currentCardRef : null}>\n                              <label className=\"label-top\">{item}</label>\n                              {appointmentDetails.locationType === \"FULFILLMENT_CENTER\" ? (\n                                <span className={appointmentDetails.data.qualityChecks[item]?.tag === \"NONE\" ? \"greyLabel\" :\n                                appointmentDetails.data.qualityChecks[item]?.tag === \"GREEN\" ? \"greenLabel\" :\n                                appointmentDetails.data.qualityChecks[item]?.tag === \"YELLOW\" ? \"yellowLabel\" :\n                                appointmentDetails.data.qualityChecks[item]?.tag === \"RED\" ? \"redLabel\" : ''}\n                                >{appointmentDetails.data.qualityChecks[item]?.tag}</span>\n                              ):(null)}\n                              <div className=\"info-container\">\n                                <div className=\"row\">\n                                  <div className=\"col-lg-6\">\n                                    <div className=\"row\">\n                                      <div className=\"col-lg-12 image-container-history\">\n                                        {toggleViewHandlerFlag === index ? (\n                                          <video width=\"100%\" height=\"300\" controls>\n                                            {itemTop.data.checkpoints[item] && itemTop.data.checkpoints[item].videos.\n                                              map((video, index) => {\n                                                return (<source src={video.path} type=\"video/mp4\" key={index} />)\n                                              })}\n                                          </video>\n                                        ) :\n                                          (\n                                            <Slider {...sliderSettings}>\n                                              {renderImages(itemTop, item)}\n                                            </Slider>\n                                          )}\n                                      </div>\n                                    </div>\n                                    {itemTop.data.checkpoints[item] &&\n                                      itemTop.data.checkpoints[item].images &&\n                                      itemTop.data.checkpoints[item].images.length > 0 && (\n                                        <button className=\"toggle-view-button\" onClick={() => { toggleImageHandler(index) }}>Image View</button>\n                                      )}\n                                    {itemTop.data.checkpoints[item] &&\n                                      itemTop.data.checkpoints[item].videos &&\n                                      itemTop.data.checkpoints[item].videos.length > 0 && (\n                                        <button className=\"toggle-view-button\" onClick={() => { toggleVideoHandler(index) }}>Video View</button>\n                                      )}\n                                  </div>\n                                  <div className=\"col-lg-6\">\n                                    <div className=\"row\">\n                                      <div className=\"col-lg-12\">\n                                        {itemTop.data.checkpoints[item] && itemTop.data.qualityChecks[item]?.reason === \"NO_WORK_TO_BE_DONE\"\n                                        && itemTop.data.qualityChecks[item]?.status === \"APPROVED\" ? \"NO WORK TO BE DONE\" : [itemTop.data.qualityChecks[item]?.status !== \"NO_ACTION\" ? itemTop.data.qualityChecks[item]?.status : '']}\n                                      </div>\n                                      {itemTop.data.checkpoints[item] && itemTop.data.checkpoints[item].ok === true &&\n                                        itemTop.data.checkpoints[item].choices.length > 0 && (\n                                          <div className=\"col-lg-12  light-label dark-span textTitle\">\n                                            <h6 className=\"margin-inspection-history\">Acceptable Imperfections (not shown to customer)</h6>\n                                            {itemTop.data.checkpoints[item].choices.map((choice) => {\n                                              return (choice.acceptable ? choice.choice + ' | ' : '')\n                                            })}\n                                          </div>\n                                        )}\n\n                                      {itemTop.data.checkpoints[item] && itemTop.data.checkpoints[item].ok === false &&\n                                        itemTop.data.checkpoints[item].choices.length > 0 && (\n                                          <>\n                                            <div className=\"col-lg-12  light-label dark-span textTitle\">\n                                              <h6 className=\"margin-inspection-history\">Unacceptable Imperfections (shown to customer)</h6>\n                                              {itemTop.data.checkpoints[item].choices.map((choice) => {\n                                                return (!choice.acceptable ? choice.choice + ' | ' : '')\n                                              })}\n                                            </div>\n\n                                            <div className=\"col-lg-12  light-label dark-span textTitle\">\n                                              <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                              {itemTop.data.checkpoints[item].choices.map((choice) => {\n                                                return (choice.acceptable ? choice.choice + ' | ' : '')\n                                              })}\n                                            </div>\n                                          </>\n                                        )}\n\n                                      {itemTop.data.checkpoints[item].refurbishmentChoices.length > 0 && (\n                                        <div className=\"col-lg-6\">\n                                          <div className=\"row\">\n                                            <div className=\"col-lg-6 light-label dark-span borderRight\">\n                                              <h6>Work to be done</h6>\n                                              <span>\n                                                {itemTop.data.checkpoints[item].refurbishmentChoices.map((choice, index) => {\n                                                  return (<span>{index + 1 + \". \" + choice.refurbishment + ' '}</span>)\n                                                })}\n                                              </span>\n                                            </div>\n                                            <div className=\"col-lg-6 pl20 light-label dark-span\">\n                                              {itemTop.data.estimates[item] && itemTop.data.estimates[item]?.invalidated === false && itemTop.data.estimates[item].labourCost >= 0\n                                                &&\n                                                (<>\n                                                  <h6>Labour Cost</h6>\n                                                  {itemTop.data.estimates[item].labourCost}\n                                                </>\n                                                )}\n                                            </div>\n                                          </div>\n                                        </div>\n                                      )}\n                                      {itemTop.data.estimates && itemTop.data.estimates[item]?.invalidated === false && (\n                                        <div className=\"col-lg-6\">\n                                          <div className=\"row\">\n                                            <div className=\"col-lg-6 pl20 light-label dark-span\">\n                                              <h6>Additional Part</h6>\n                                            </div>\n                                            <div className=\"col-lg-6 pl20 light-label dark-span\">\n                                              <h6>Part Cost</h6>\n                                            </div>\n                                          </div>\n                                          {itemTop.data.estimates[item]?.parts.map((data, index) => {\n                                            return (\n                                              <div className=\"row\" key={index}>\n                                                <div className=\"col-lg-6 pl20 light-label dark-span borderRight\">\n                                                  <span>{data.name}</span>\n                                                </div>\n                                                <div className=\"col-lg-6 pl20 light-label dark-span\">\n                                                  <span>{data.cost}</span>\n                                                </div>\n                                              </div>\n                                            )\n                                          })}\n                                        </div>\n                                      )}\n                                      {itemTop.data.checkpoints[item].ok &&\n                                        itemTop.data.checkpoints[item].noImperfectionChoices.length > 0 &&\n                                        <div className=\"col-lg-12 card2 light-label dark-span textTitle margin-inspection-history\">\n                                          {itemTop.data.checkpoints[item].noImperfectionChoices[0] || \"OK / No Imperfections\"}\n                                        </div>\n                                      }\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          )\n                        })}\n                        {/* List of checkpoints which is not is qualityChecks */}\n                        {itemTop.data.checkpoints && Object.keys(itemTop.data.checkpoints).map((item, index) => {\n                          return (\n                            <>\n                              {JSON.stringify(itemTop.data.checkpoints[item]) !== JSON.stringify(itemTop.data.qualityChecks[item]) &&\n                                !itemTop.data.qualityChecks[item] && (\n                                  <>\n                                    <div className=\"container-box-card\" key={index} ref={activeSideBar === item ? currentCardRef : null}>\n                                      <label className=\"label-top\">{item}</label>\n                                      {appointmentDetails.locationType === \"FULFILLMENT_CENTER\" ? (\n                                        <span className={appointmentDetails.data.qualityChecks[item]?.tag === \"NONE\" ? \"greyLabel\" :\n                                        appointmentDetails.data.qualityChecks[item]?.tag === \"GREEN\" ? \"greenLabel\" :\n                                        appointmentDetails.data.qualityChecks[item]?.tag === \"YELLOW\" ? \"yellowLabel\" :\n                                        appointmentDetails.data.qualityChecks[item]?.tag === \"RED\" ? \"redLabel\" : 'greenLabel'}\n                                        >{appointmentDetails.data.qualityChecks[item]?.tag ? appointmentDetails.data.qualityChecks[item]?.tag : \"GREEN\"}</span>\n                                      ):(null)}\n                                      <div className=\"info-container\">\n                                        <div className=\"row\">\n                                          <div className=\"col-lg-6\">\n                                            <div className=\"row\">\n                                              <div className=\"col-lg-12 image-container-history\">\n                                                {toggleViewHandlerFlag === index ? (\n                                                  <video width=\"100%\" height=\"300\" controls>\n                                                    {itemTop.data.checkpoints[item] && itemTop.data.checkpoints[item].videos.\n                                                      map((video, index) => {\n                                                        return (<source src={video.path} type=\"video/mp4\" key={index} />)\n                                                      })}\n                                                  </video>\n                                                ) :\n                                                  (\n                                                    <Slider {...sliderSettings}>\n                                                      {renderImages(itemTop, item)}\n                                                    </Slider>\n                                                  )}\n                                              </div>\n                                            </div>\n                                            {itemTop.data.checkpoints[item] &&\n                                              itemTop.data.checkpoints[item].images &&\n                                              itemTop.data.checkpoints[item].images.length > 0 && (\n                                                <button className=\"toggle-view-button\" onClick={() => { toggleImageHandler(index) }}>Image View</button>\n                                              )}\n                                            {itemTop.data.checkpoints[item] &&\n                                              itemTop.data.checkpoints[item].videos &&\n                                              itemTop.data.checkpoints[item].videos.length > 0 && (\n                                                <button className=\"toggle-view-button\" onClick={() => { toggleVideoHandler(index) }}>Video View</button>\n                                              )}\n                                          </div>\n                                          <div className=\"col-lg-6\">\n                                            <div className=\"row\">\n                                              <div className=\"col-lg-12\">\n                                              {itemTop.data.checkpoints[item] && itemTop.data.qualityChecks[item]?.reason === \"NO_WORK_TO_BE_DONE\"\n                                               && itemTop.data.qualityChecks[item]?.status === \"APPROVED\" ? \"NO WORK TO BE DONE\" : itemTop.data.qualityChecks[item]?.status}\n                                              </div>\n                                              {itemTop.data.checkpoints[item] && itemTop.data.checkpoints[item].ok === true &&\n                                                itemTop.data.checkpoints[item].choices.length > 0 && (\n                                                  <div className=\"col-lg-12 card light-label dark-span textTitle\">\n                                                    <h6 className=\"margin-inspection-history\">Acceptable Imperfections (not shown to customer)</h6>\n                                                    {itemTop.data.checkpoints[item].choices.map((choice) => {\n                                                      return (choice.acceptable ? choice.choice + ' | ' : '')\n                                                    })}\n                                                  </div>\n                                                )}\n\n                                              {itemTop.data.checkpoints[item] && itemTop.data.checkpoints[item].ok === false &&\n                                                itemTop.data.checkpoints[item].choices.length > 0 && (\n                                                  <>\n                                                    <div className=\"col-lg-12 card light-label dark-span textTitle\">\n                                                      <h6 className=\"margin-inspection-history\">Unacceptable Imperfections (shown to customer)</h6>\n                                                      {itemTop.data.checkpoints[item].choices.map((choice) => {\n                                                        return (!choice.acceptable ? choice.choice + ' | ' : '')\n                                                      })}\n                                                    </div>\n\n                                                    <div className=\"col-lg-12 card light-label dark-span textTitle\">\n                                                      <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                                      {itemTop.data.checkpoints[item].choices.map((choice) => {\n                                                        return (choice.acceptable ? choice.choice + ' | ' : '')\n                                                      })}\n                                                    </div>\n                                                  </>\n                                                )}\n\n                                              {itemTop.data.checkpoints[item].refurbishmentChoices.length > 0 && (\n                                                <div className=\"col-lg-12\">\n                                                  <div className=\"row\">\n                                                    <div className=\"col-lg-3 light-label dark-span borderRight\">\n                                                      <h6>Work to be done</h6>\n                                                      <span>\n                                                        {itemTop.data.checkpoints[item].refurbishmentChoices.map((choice, index) => {\n                                                          return (<span>{index + 1 + \". \" + choice.refurbishment + ' '}</span>)\n                                                        })}\n                                                      </span>\n                                                    </div>\n                                                    <div className=\"col-lg-3 pl20 light-label dark-span\">\n                                                      {itemTop.data.estimates[item] && itemTop.data.estimates[item].invalidated === false && itemTop.data.estimates[item].labourCost\n                                                        && (<>\n                                                          <h6>Labour Cost</h6>\n                                                          {itemTop.data.estimates[item].labourCost}\n                                                        </>\n                                                        )}\n                                                    </div>\n                                                  </div>\n                                                </div>\n                                              )}\n                                              {itemTop.data.estimates && itemTop.data.estimates[item] && itemTop.data.estimates[item].invalidated === false && (\n                                                <div className=\"row\">\n                                                  <div className=\"col-lg-12\">\n                                                    {itemTop.data.estimates[item]?.parts.map((data, index) => {\n                                                      return (\n                                                        <div className=\"float-div\" key={index}>\n                                                          <div>\n                                                            <h6>Additional Part</h6>\n                                                            <span>{data.name}</span>\n                                                          </div>\n\n                                                          <div>\n                                                            <h6>Part Cost</h6>\n                                                            <span>{data.cost}</span>\n                                                          </div>\n                                                        </div>\n                                                      )\n                                                    })}\n                                                  </div>\n                                                </div>\n                                              )}\n                                              {itemTop.data.checkpoints[item].ok &&\n                                                itemTop.data.checkpoints[item].noImperfectionChoices.length > 0 &&\n                                                <div className=\"col-lg-12 card light-label dark-span textTitle margin-inspection-history\">\n                                                  {itemTop.data.checkpoints[item].noImperfectionChoices[0] || \"OK / No Imperfections\"}\n                                                </div>\n                                              }\n                                            </div>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </>\n                                )}\n                            </>\n                          )\n                        })}\n                      </>\n                    )\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default InspectionHistoryDetailsComponent;\n","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workshopQa/workshopQaComponent.js",["400","401","402","403","404"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, GridColumn } from \"@progress/kendo-react-grid\";\nimport \"./workshopQa.css\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport GridCustomCell from \"../../common/GridCustomCell\";\nimport { useDispatch } from \"react-redux\";\nimport { dateFormat,timeFormat } from \"./../../utils/utils\";\nimport AppointmentIdCell from \"../../common/Tooltip/AppointmentIdCell\";\nimport MakeModelCell from \"../../common/Tooltip/makeModelCell\";\nimport InspectionTimeCell from \"../../common/Tooltip/inspectionTimeCell\";\nimport WorkshopNameCell from \"../../common/Tooltip/workshopNameCell\";\nimport AssignedToCell from \"../../common/Tooltip/assignedToCell\";\n\nconst WorkshopQaComponent = (props) => {\n    const dispatch = useDispatch();\n    const [paginationData, setPaginationData] = useState({ skip: 0, take: 10 });\n    const [currentPage, setCurrentPage] = useState(\"\");\n    const [qaListingData, setQaListingData] = useState([]);\n    const [qaListingCount, setQaListingCount] = useState(0);\n    const pageChange = (event) => {\n        setPaginationData({\n          skip: event.page.skip,\n          take: event.page.take\n        });\n        setCurrentPage(event.page.skip ? event.page.skip / 10 : 0);\n        dispatch(props.getWorkshopListing({ page: event.page.skip ? event.page.skip / 10 : 0, size: event.page.take}))\n    }\n\n    useEffect(()=>{\n        props.qaListing.map(item => {\n            if(item && item.updatedAt){\n                item[\"formatedInspectionTime\"] = dateFormat(item.updatedAt) + \" - \" + timeFormat(item.updatedAt)\n            }            \n        });\n        setQaListingData(props.qaListing);\n        setQaListingCount(props.qaListingCount);\n    },[props.qaListing]);\n\n    const inputSearchHandler = (value)=>{\n        dispatch(props.searchAppointmentId(value+\"%\"));\n        dispatch(props.getWorkshopListingCount(\"\",value+\"%\"))\n    }\n\n\n    const appointmentIdCell = (props) => <GridCustomCell dataLink={'/workshop-qa/' + `${props.dataItem.appointmentId}/${props.dataItem.version}`} dataText={props.dataItem?.appointmentId} />\n    \n    return(\n        <div className=\"col-lg-12\">\n            <div className=\"gridData\">\n                <div className=\"middleContent\">\n                    <div className=\"search-box\">\n                        <input type=\"text\" onChange={(e)=>inputSearchHandler(e.target.value)} placeholder=\"Search for appointment ID\" />\n                    </div>\n          <Tooltip openDelay={100} position=\"right\" anchorElement=\"element\">\n            <Grid\n              data={qaListingData}\n              pageable={true}\n              skip={paginationData.skip}\n              take={paginationData.take}\n              onPageChange={(e) => pageChange(e)}\n              total={qaListingCount}\n            >\n                <GridColumn\n                    field=\"appointmentId\"\n                    cell={(e)=> appointmentIdCell(e)}\n                    title=\"App. ID\"\n                />\n\n                <GridColumn\n                    field=\"makeModel\"\n                    title=\"Make/Model\"\n                    cell={MakeModelCell}\n                />\n             \n              <GridColumn \n                field=\"inspectionTime\" \n                cell={InspectionTimeCell}\n                title=\"Inspection Time\" \n                />\n\n                <GridColumn\n                    field=\"workshopName\"\n                    title=\"Workshop Name\"\n                    cell={WorkshopNameCell}\n                />\n\n                <GridColumn\n                    field=\"assignedTo\"\n                    title=\"Assigned To\"\n                    cell={AssignedToCell}\n                />\n            </Grid>\n          </Tooltip>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WorkshopQaComponent;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorderDetail/workorderListingDetailComponent.js",["405","406","407","408","409","410","411","412"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport \"../workshopQaDetail/workshopDetails.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { dateFormat, timeFormat } from \"../../utils/utils\";\nimport { Link } from 'react-router-dom';\nimport WorkorderPrintComponent from './workorderPrintComponent';\nimport { useRef } from 'react';\nimport ReactToPrint from 'react-to-print';\nimport { useReactToPrint } from 'react-to-print';\nimport { render } from \"react-dom\";\n\n\nconst WorkorderListingDetailComponent = (props) => {\n    const componentRef = useRef();\n    const historyLink = useHistory();\n    const dispatch = useDispatch();\n    const [listingDetail, setListingDetail] = useState({});\n    const [nonAccImperfection, setNonAccImperfection] = useState(\"\");\n    const [accImperfection, setAccImperfection] = useState(\"\");\n\n    useEffect(()=>{\n        let totlaNonAcceptableImperfections = 0;\n        let totlalAcceptableImperfections = 0;\n        props && props.listingDetails.map((item)=>{\n            if(item && item.updatedAt){\n              item.formatedUpdatedAt = dateFormat(item.updatedAt);\n            }\n          });  \n        setListingDetail(props.listingDetails[0]);\n        if(props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.checkpoints){\n            Object.keys(props.listingDetails[0].data.qualityChecks).map((item)=>{\n              if(props.listingDetails[0].data.qualityChecks[item].invalidated === false){\n                  if(props.listingDetails[0].data.checkpoints[item].ok === false){\n                      totlaNonAcceptableImperfections += 1;\n                    }\n                    else if( \n                      props.listingDetails[0].data.checkpoints[item].choices.length > 0){\n                        totlalAcceptableImperfections += 1;\n                    }\n              }\n            });\n          }\n          setNonAccImperfection(totlaNonAcceptableImperfections);\n          setAccImperfection(totlalAcceptableImperfections);\n    },[props]);\n\n    return (\n      <>\n      {props.showToaster && <AlertBox ShowAlert={props.showToaster} message={props.toasterMessage} type={props.toasterType} />}\n      {props && props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n      <div className=\"col-lg-12\">\n      <Link to=\"/estimate\"> Back </Link>\n      <PrintComponent data={listingDetail}  accImperfection={accImperfection} nonAccImperfection={nonAccImperfection}/>\n        <div className=\"middleContent\">\n        <div className=\"row contentWrapper\">\n        {listingDetail && listingDetail.make && (\n          <div className=\"col-lg-3\">\n            <div className=\"form-group\">\n              <h5>{listingDetail.make + \" \" + listingDetail.model}</h5>\n              <span>{listingDetail.variant ? listingDetail.variant+ \" | \" : ''}</span> \n              <span>{listingDetail.fuelType ? listingDetail.fuelType : ''}</span>\n            </div>\n          </div>\n        )}\n\n          <div className=\"col-lg-3\">\n            <div className=\"form-group  bolder-label\">\n            <label>Inspected By: </label>\n              <span>{listingDetail?.createdBy?.uid ? \" \" + listingDetail?.createdBy?.uid : ' N/A'}</span>\n            </div>\n          </div>\n\n          <div className=\"col-lg-3\">\n            <div className=\"form-group bolder-label\">\n              <label>Workshop Name: </label>\n              <span>{listingDetail?.loc?.name ? ' ' + listingDetail.loc?.name : ' N/A'}</span>\n            </div>\n          </div>\n        </div>\n      \n        <div className=\"row contentWrapper\">\n          <div className=\"col-lg-3\">\n            <div className=\"form-group bolder-span\">\n              <label>Appointment ID: </label>\n              <span>{listingDetail?.appointmentId ? \" \" + listingDetail.appointmentId : \" N/A\"}</span>\n            </div>\n          </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Inspection Date: </label>\n                <span>{listingDetail?.formatedUpdatedAt ? \" \" + listingDetail.formatedUpdatedAt : \" N/A\"}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Acceptable Imperfection: </label>\n                <span>{\" \"+ accImperfection}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Non-Acceptable Imperfection: </label>\n                <span>{\" \" + nonAccImperfection}</span>\n              </div>\n            </div>\n          \n        </div>\n          <div className=\"row\">\n              <div className=\"col-lg-12\">\n                  <div className=\"container-box\">\n                {listingDetail && listingDetail.data &&(\n                    <>\n                    {Object.keys(listingDetail.data.qualityChecks).map((item,index)=>{\n                        return(\n                            <>\n                            {listingDetail.data.qualityChecks[item]?.invalidated === false &&\n                            listingDetail.data.checkpoints[item]?.ok === false && \n                            (listingDetail.data.qualityChecks[item]?.reason !== \"NO_WORK_TO_BE_DONE\" &&\n                            listingDetail.data.qualityChecks[item]?.status === \"APPROVED\") &&\n                            (\n                              <div className=\"container-box-card mt-4\">\n                                <label className=\"label-top\">{item + \" \"}</label>\n                                <label className=\"label-top status-right-aligned\">{listingDetail.data.qualityChecks[item].status.toLowerCase()}</label>\n                                <div className=\"shaded-border\"></div>\n                                <div className=\"info-container\">\n                                <div className=\"row my-2 mx-2\">\n                                    <div className=\"col-lg-6\">\n                                    {listingDetail.data.checkpoints[item] && listingDetail.data.checkpoints[item].ok === false && \n                                    listingDetail.data.checkpoints[item].choices.length  > 0 &&(\n                                        <div className=\"col-lg-12 light-label dark-span\">\n                                            <h6>Unacceptable Imperfections</h6>\n                                            {listingDetail.data.checkpoints[item].choices.map((choice)=>{\n                                                return(!choice.acceptable ? choice.choice + ' | ' : '')\n                                                })}\n                                            </div>\n                                    )}\n\n                                    {listingDetail.data.checkpoints[item].refurbishmentChoices.length  > 0 && (\n                                        <div className=\"col-lg-12 light-label dark-span\">\n                                            <h6 className=\"work-to-done\">Work to be done</h6>\n                                            {listingDetail.data.checkpoints[item].refurbishmentChoices.map((choice,index)=>{\n                                                return(index+1 +\". \"+ choice.refurbishment + ' ')\n                                                })}\n                                        </div>\n                                    )}\n\n                                        <div className=\"col-lg-12 light-label dark-span\">\n                                            <h6 className=\"work-to-done\">Estimated labour cost</h6>\n                                            <input type=\"text\" className=\"form-control\"\n                                            value={listingDetail.data.estimates && listingDetail.data.estimates[item] && \n                                                listingDetail.data.estimates[item].invalidated === false &&\n                                                (listingDetail.data.estimates[item].labourCost || \n                                                listingDetail.data.estimates[item].labourCost === 0)? \n                                                listingDetail.data.estimates[item].labourCost : null} \n                                            disabled={listingDetail.data.qualityChecks[item].status === \"APPROVED\"}/>\n                                        </div>\n\n                                    </div>\n                                    <div className=\"col-lg-6\">\n                                        {listingDetail.data.estimates && listingDetail.data.estimates[item] &&\n                                        listingDetail.data.estimates[item].invalidated === false &&\n                                         listingDetail.data.estimates[item].parts && \n                                        listingDetail.data.estimates[item].parts.map((part,index2)=>{\n                                            return(\n                                            <div className=\"row\">\n                                            <div className=\"col-lg-6 light-label dark-span\">\n                                                <h6>Additional part name</h6>\n                                                <input type=\"text\" className=\"form-control\"\n                                                value={part && part.name ? part.name : null}\n                                                disabled={listingDetail.data.qualityChecks[item].status === \"APPROVED\"}/>\n                                            </div>\n                                            <div className=\"col-lg-6 light-label dark-span\">\n                                                <h6>Additional part cost</h6>\n                                                <input type=\"text\" className=\"form-control\"\n                                                value={part && (part.cost || part.cost === 0) ? part.cost : null}\n                                                disabled={listingDetail.data.qualityChecks[item].status === \"APPROVED\"}/>\n                                            </div>\n                                            </div>\n                                            ) \n                                        })} \n                                    </div>\n                                </div>\n                                </div>\n                              </div>  \n                            )}\n                            </>\n                        )\n                    })}\n                    </>\n                )}\n                </div>\n              </div>\n          </div>\n        </div>\n      </div>\n      </>\n    );\n  };\n\nexport default WorkorderListingDetailComponent;\n\nexport const PrintComponent = (props) => {\n  const [printData,setPrintData] = useState(false);\n  const componentRef = useRef();\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current\n  });\n  useEffect(()=>{\n    if(props && props.data){\n      setPrintData(true)\n    }\n  },[props]);\n  return (\n    <div>\n      <button onClick={handlePrint} className=\"print-button-work-order\">Print{printData}</button>\n      <div hidden={true}>\n      <WorkorderPrintComponent ref={componentRef} data={props.data} accImperfection={props.accImperfection} nonAccImperfection={props.nonAccImperfection}/>    \n      </div>  \n    </div>\n  );\n};\n","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/estimateDetails/estimateDetailsComponent.js",["413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433"],"import React, { useState, useEffect } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport \"../workshopQaDetail/workshopDetails.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { dateFormat, timeFormat } from \"../../utils/utils\";\nimport { Link } from 'react-router-dom';\nimport {getEstimateDetails} from \"../../store/actions/workshopQaManagement/workshopQaManagement.action\";\nimport { AlertType } from '../../utils/constants/values.constants';\n\nconst EstimateDetailsComponent = (props) => {\n    const historyLink = useHistory();\n    const dispatch = useDispatch();\n    let estimatesFinalData = {\n        \"inspectionType\": \"CATALOG\",\n        \"schemaVersion\": \"IN_CAR_CATALOG_V1\",\n        \"data\":{\n            \"action\":\"estimation\",\n            \"estimates\":{\n                \n            }\n        }\n    };\n    const [listingDetail, setListingDetail] = useState({});\n    const [otherWorkToBeDoneFieldValue,setOtherWorkToBeDoneFieldValue] = useState(\"\");\n    const [isEdit, setIsEdit] = useState(\"\");\n    const [nonAccImperfection, setNonAccImperfection] = useState(\"\");\n    const [accImperfection, setAccImperfection] = useState(\"\");\n    const [errors, setError] = useState({\n      name:'',\n      errors:false\n    })\n    let estimateFields = {};\n    let worktobedone = {};\n    const [estimatesFieldsInitial, setEstimatesFieldsInitial] =  useState(estimateFields);\n    const [prevIndex,setPrevIndex] = useState(\"0\");\n    const [masterData, setMasterData] = useState([]);\n    const [workToBeDone, setWorkToBeDone] = useState(worktobedone);\n    const [editWorkClicked,setEditWorkClicked] = useState(false);\n    const [refurbishmentChoices, setRefurbishmentChoices] = useState({});\n    const [possibleOptions, setPossibleOptions] = useState({});\n\n    const [totalEstimates,setTotalEstimates] = useState(\"\");\n    const [remainingEstimates, setRemainingEstimates] = useState(\"\");\n    const [totalNoWorkToBeDone, setTotalNoWorkToBeDone] = useState(\"\");\n    const [acceptableImperfectionRejected,setAcceptableImperfectionRejected] = useState(false);\n\n    useEffect(()=>{\n      if(props.listingDetailsUpdated && props.listingDetailsUpdated[0] && props.listingDetailsUpdated[0].data && \n        props.listingDetailsUpdated[0].data.estimates){\n         setListingDetail(props.listingDetailsUpdated[0])\n        }\n     \n      if(props.listingDetailsUpdated && props.listingDetailsUpdated[0] && props.listingDetailsUpdated[0].data){\n        let totalEstimatesToBeFilled = 0;\n        let totalEstimatesFilled = 0;\n        let totalEstimatesRejected = 0;\n        let totalNoWorkToBeDone = 0;\n        Object.keys(props.listingDetailsUpdated[0].data.qualityChecks).map((item)=>{\n\n           //check whether acceptable imperfection is rejected\n          if(props.listingDetailsUpdated[0].data.qualityChecks[item]?.invalidated === false &&\n            props.listingDetailsUpdated[0].data.checkpoints[item]?.ok === true && \n            props.listingDetailsUpdated[0].data.checkpoints[item]?.choices.length && \n            props.listingDetailsUpdated[0].data.qualityChecks[item]?.status === \"REJECTED\"){\n              setAcceptableImperfectionRejected(true);\n            }\n\n          //count of no work to be done\n          if(props.listingDetailsUpdated[0].data.checkpoints[item]?.ok === false &&\n            props.listingDetailsUpdated[0].data?.qualityChecks[item]?.reason === \"NO_WORK_TO_BE_DONE\" &&\n            props.listingDetailsUpdated[0].data?.qualityChecks[item]?.status === \"APPROVED\"){\n              totalNoWorkToBeDone += 1;\n            }\n            setTotalNoWorkToBeDone(totalNoWorkToBeDone);\n\n          if(props.listingDetailsUpdated[0].data.checkpoints[item]?.ok === false &&\n            props.listingDetailsUpdated[0].data?.qualityChecks[item]?.reason !== \"NO_WORK_TO_BE_DONE\"){\n              totalEstimatesToBeFilled += 1;\n            }\n            setTotalEstimates(totalEstimatesToBeFilled);\n\n            if(props.listingDetailsUpdated[0].data?.estimates[item] && \n                props.listingDetailsUpdated[0].data?.estimates[item]?.invalidated === false){\n                totalEstimatesFilled += 1;\n              }\n\n            if(props.listingDetailsUpdated[0].data?.estimates[item] && \n              props.listingDetailsUpdated[0].data?.estimates[item]?.invalidated === false &&\n              props.listingDetailsUpdated[0].data?.qualityChecks[item]?.status === \"REJECTED\"){\n                totalEstimatesRejected += 1;\n            }\n           setRemainingEstimates((totalEstimatesToBeFilled - +totalEstimatesFilled) + totalEstimatesRejected);\n        })\n        \n      }\n     },[props.listingDetailsUpdated]);\n\n    //  Setting master data\n    useEffect(()=>{\n      if(props && props.masterData && props.masterData.checkpoints){\n        setMasterData(props.masterData);\n      }\n    },[props.masterData,props.listingDetails,props.listingDetailsUpdated]);\n\n    useEffect(()=>{\n      let totalEstimtates = 0;\n      let allValidQualityChecks = 0;\n      let refurbishment = {};\n      if(props && props.listingDetails && props.listingDetails[0]){\n        Object.keys(props.listingDetails[0].data.qualityChecks).map((item,index)=>{\n          if(props.listingDetails[0].data.qualityChecks[item] && \n            props.listingDetails[0].data.qualityChecks[item]?.invalidated === false &&\n            props.listingDetails[0].data.checkpoints[item]?.ok === false){\n              allValidQualityChecks += 1;\n              if(props.listingDetails[0].data.estimates[item] && \n                props.listingDetails[0].data.estimates[item]?.invalidated === false){\n                totalEstimtates += 1;\n                estimateFields[item] = {\n                  labourCost:props.listingDetails[0].data.estimates[item].labourCost >= 0 ? props.listingDetails[0].data.estimates[item].labourCost : null,\n                  parts:props.listingDetails[0].data.estimates[item].parts ? props.listingDetails[0].data.estimates[item].parts : [{name:'',cost:null}]\n                }\n                if(props.listingDetails[0].data.estimates[item].parts && props.listingDetails[0].data.estimates[item].parts.length === 0){\n                  props.listingDetails[0].data.estimates[item].parts = [{name:'',cost:null}]\n                }\n\n                refurbishment[item] = {};\n                if(props.listingDetails[0].data.checkpoints[item]?.refurbishmentChoices){\n                  refurbishment[item] = props.listingDetails[0].data.checkpoints[item]?.refurbishmentChoices;\n                }\n              }else{\n                estimateFields[item] = {\n                  labourCost:null,\n                  parts:[{name:'',cost:null}]\n                }\n              }\n            }\n        })\n      }\n\n      let castObj = {};\n      castObj = {...estimateFields};\n      setEstimatesFieldsInitial({...castObj});\n      setRefurbishmentChoices({...refurbishment});\n\n      if(props.listingDetails && props.listingDetails[0] && props.listingDetails[0].data.estimates){\n        if(allValidQualityChecks === totalEstimtates){\n          dispatch(props.setToasterMessage({\n            toasterMessage: \"Estimates Submitted\",\n            showToaster: true,\n            toasterType: AlertType.SUCCESS\n        }));\n        }\n        if(props.listingDetails && props.listingDetails[0] && props.listingDetails[0].inspectionStatus &&\n          props.listingDetails[0].inspectionStatus === \"ESTIMATED\" ){\n          setTimeout(()=>{\n            historyLink.push('/estimate');\n          },1000);\n          }\n      }\n    },[props.listingDetails])\n\n\n    useEffect(()=>{\n        props && props.listingDetails.map((item)=>{\n            if(item && item.updatedAt){\n              item.formatedUpdatedAt = dateFormat(item.updatedAt);\n            }\n          });  \n        setListingDetail(props.listingDetails[0]);\n        let totalEstimate = 0;\n        props && props.listingDetails.map((data)=>{\n            Object.keys(data.data.qualityChecks).map((item)=>{\n                if(data.data.qualityChecks[item].invalidated === false && \n                    data.data.checkpoints[item].ok === false && data.data.qualityChecks[item].status !== \"APPROVED\"){\n                    totalEstimate += 1;\n                }\n            });\n        })\n        let totlaNonAcceptableImperfections = 0;\n        let totlalAcceptableImperfections = 0;\n        if(props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.checkpoints){\n          Object.keys(props.listingDetails[0].data.qualityChecks).map((item)=>{\n            if(props.listingDetails[0].data.qualityChecks[item].invalidated === false){\n                if(props.listingDetails[0].data.checkpoints[item].ok === false){\n                    totlaNonAcceptableImperfections += 1;\n                  }\n                  else if( \n                    props.listingDetails[0].data.checkpoints[item].choices.length > 0){\n                      totlalAcceptableImperfections += 1;\n                  }\n            }\n          });\n          }\n          setNonAccImperfection(totlaNonAcceptableImperfections);\n          setAccImperfection(totlalAcceptableImperfections);\n    },[props]);\n\n    const editClickHandler = (index,item) => {\n        setIsEdit(index);\n        let possibleData = {};\n        let availableData = {};\n        setPossibleOptions({});\n        setOtherWorkToBeDoneFieldValue(\"\");\n        if(estimatesFieldsInitial[item] && (estimatesFieldsInitial[item].parts && \n          estimatesFieldsInitial[item].parts.length === 0)){\n          estimatesFieldsInitial[item].parts=[\n            { name:estimatesFieldsInitial[item]?.parts[0]?.name ? estimatesFieldsInitial[item]?.parts[0]?.name : \"\",\n              cost:estimatesFieldsInitial[item]?.parts[0]?.cost ? estimatesFieldsInitial[item]?.parts[0]?.cost : null \n            }];\n        }\n        if(masterData && masterData.checkpoints){\n          masterData.checkpoints.map((checkpoint)=>{\n            if(checkpoint.key === item){\n              if(checkpoint.refurbishment && checkpoint.refurbishment.choices){\n                possibleData[item] = {\n                  refurbishmentChoices:[]\n                }\n                checkpoint.refurbishment.choices.map((name)=>{\n                  possibleData[item].refurbishmentChoices.push({other:false,refurbishment:name,checked:false});\n                })\n              }\n            }\n          });\n          setPossibleOptions({...possibleData});\n        }\n        if(listingDetail && listingDetail.data && listingDetail.data.checkpoints[item] && \n          listingDetail.data.checkpoints[item].refurbishmentChoices){\n            availableData[item] = {\n              refurbishmentChoices:[]\n            }\n            listingDetail.data.checkpoints[item].refurbishmentChoices.map((choice1)=>{\n              listingDetail.data.checkpoints[item].refurbishmentChoices.map((choice1)=>{\n                if(choice1 && choice1.other === true){\n                  setOtherWorkToBeDoneFieldValue(choice1.refurbishment);\n                }\n              });\n              availableData[item].refurbishmentChoices.push({other:choice1.other,refurbishment:choice1.refurbishment,checked:true})\n            });\n            \n          if(possibleData[item] && possibleData[item].refurbishmentChoices && \n            availableData[item] && availableData[item].refurbishmentChoices){\n              let filteredData = {};\n              filteredData[item] = {\n                refurbishmentChoices:[]\n              }\n              let combinedData = [...possibleData[item].refurbishmentChoices,...availableData[item].refurbishmentChoices];\n              filteredData[item].refurbishmentChoices = [...combinedData.reduce((map,obj)=> map.set(obj.refurbishment,obj),new Map()).values()];\n              setPossibleOptions(filteredData);\n            }          \n        }\n        console.log(\"possible options\", possibleOptions);        \n        setEstimatesFieldsInitial({...estimatesFieldsInitial});\n    }\n\n    const estimatedLaborCostHandler = (e,item) => {\n      let checknumbers  = /^\\d*\\.?\\d*$/;\n      if(!checknumbers.test(e.target.value)){\n        setError({\n          name:e.target.name,\n          errors:true\n        })\n      }else{\n        setError({\n          name:e.target.name,\n          errors:false\n        })\n      }\n      estimatesFieldsInitial[item].labourCost = e.target.value;\n      setEstimatesFieldsInitial({...estimatesFieldsInitial});\n    }\n\n    const addtionalPartNameHandler = (e,item,partIntex) => {\n      \n      if(estimatesFieldsInitial[item] && estimatesFieldsInitial[item].parts && !estimatesFieldsInitial[item].parts.length){\n        estimatesFieldsInitial[item].parts=[\n          {name:estimatesFieldsInitial[item]?.parts[partIntex]?.name ? estimatesFieldsInitial[item]?.parts[partIntex]?.name : \"\",\n          cost:estimatesFieldsInitial[item]?.parts[partIntex]?.cost ? estimatesFieldsInitial[item]?.parts[partIntex]?.cost : null\n          }\n        ];\n      }\n      estimatesFieldsInitial[item].parts[partIntex].name = e.target.value;\n      setEstimatesFieldsInitial({...estimatesFieldsInitial})\n      if(estimatesFieldsInitial[item] && estimatesFieldsInitial[item].parts && \n        estimatesFieldsInitial[item].parts.length){\n          if(!!estimatesFieldsInitial[item].parts[partIntex]?.name && !!estimatesFieldsInitial[item].parts[partIntex]?.cost){\n            setPrevIndex(partIntex);\n          }\n      }else{\n        setPrevIndex(\"0\")\n      }\n    }\n\n    const additionalPartCostHandler = (e,item,partIntex) => {\n      let checknumbers  = /^\\d*\\.?\\d*$/;\n      if(!checknumbers.test(e.target.value)){\n        setError({\n          name:e.target.name,\n          errors:true\n        })\n      }else{\n        setError({\n          name:e.target.name,\n          errors:false\n        })\n      }\n      if(estimatesFieldsInitial[item] && estimatesFieldsInitial[item].parts && !estimatesFieldsInitial[item].parts.length){\n        estimatesFieldsInitial[item].parts=[\n          {name:estimatesFieldsInitial[item]?.parts[partIntex]?.name ? estimatesFieldsInitial[item]?.parts[partIntex]?.name : \"\",\n          cost:estimatesFieldsInitial[item]?.parts[partIntex]?.cost ? estimatesFieldsInitial[item]?.parts[partIntex]?.cost : e.target.value}\n        ];\n      }\n      estimatesFieldsInitial[item].parts[partIntex].cost = e.target.value ? e.target.value : \"\";\n      setEstimatesFieldsInitial({...estimatesFieldsInitial});\n\n      if(estimatesFieldsInitial[item] && estimatesFieldsInitial[item].parts && \n        estimatesFieldsInitial[item].parts.length){\n          if(!!estimatesFieldsInitial[item].parts[partIntex]?.name && !!estimatesFieldsInitial[item].parts[partIntex]?.cost){\n            setPrevIndex(partIntex);\n          }\n      }else{\n        setPrevIndex(\"0\")\n      }\n\n    }\n\n    const onSaveEditsHandler = (index, data) => {\n            let editedRefurbs = [];\n            if(possibleOptions && possibleOptions[data] && possibleOptions[data].refurbishmentChoices){\n              possibleOptions[data].refurbishmentChoices.map((selected)=>{\n                if(selected.checked === true && selected.other === false){\n                  editedRefurbs.push({other:selected.other,refurbishment:selected.refurbishment});\n                }\n              });\n            }\n            if(!!otherWorkToBeDoneFieldValue){\n              editedRefurbs.push({\"refurbishment\":otherWorkToBeDoneFieldValue, other:true})\n            }         \n            \n            setEditWorkClicked(\"\")\n            let objSubmit = {};\n            objSubmit = {...estimatesFieldsInitial};\n            setEstimatesFieldsInitial({...objSubmit});\n            // make proper data --> make labourCost and part cost integer\n            let sendSingleEstimate = {...estimatesFieldsInitial};\n            let labourCost; \n            if(!!sendSingleEstimate[data].labourCost){\n              labourCost = sendSingleEstimate[data].labourCost;\n              estimatesFinalData.data.estimates[data] = {\n                labourCost:+sendSingleEstimate[data].labourCost\n              }\n            }\n            if(sendSingleEstimate[data].parts && sendSingleEstimate[data].parts.length){\n              sendSingleEstimate[data].parts.map((part,i,arr)=>{\n                if(!!part.name && part.cost >= 0){\n                  part.cost = +part.cost\n                  return arr\n                }else\n                 return arr.splice(i,1)\n              })\n\n            estimatesFinalData.data.estimates[data] = objSubmit[data];\n            if(estimatesFinalData.data.estimates[data] && !!estimatesFinalData.data.estimates[data].labourCost)\n            estimatesFinalData.data.estimates[data].labourCost = +estimatesFinalData.data.estimates[data].labourCost\n            }\n\n            // saving refrub choices \n            if(editedRefurbs && editedRefurbs.length){\n              let uniqRefurbs = [...editedRefurbs.reduce((map,obj)=> map.set(obj.refurbishment,obj), new Map()).values()];\n              estimatesFinalData.data.estimates[data][\"refurbishmentChoices\"] = uniqRefurbs;\n            }\n            // submit data to api\n            console.log(estimatesFinalData);\n            dispatch(props.approveQualityChecks(estimatesFinalData,listingDetail.appointmentId,\"Estimate filled successfully\"));\n            setIsEdit(\"\"); \n            setOtherWorkToBeDoneFieldValue(\"\");\n            \n          // temprory solution to get updated state from store\n          setTimeout(()=>{\n            let params = {\n              appointmentId:listingDetail.appointmentId,\n              inspectionType:\"CATALOG\",\n            }\n            dispatch(getEstimateDetails(params));\n            dispatch(getEstimateDetails(params));\n          },1500);\n          \n    }\n\n    const addMoreParts = (item) => {\n     setPrevIndex(prevIndex+1)\n     let obj = {};\n     obj = {...estimatesFieldsInitial};\n     obj[item].parts.push({name:\"\",cost:null});\n     setEstimatesFieldsInitial({...obj});\n   }\n\n   const removeParts = (item,index)=>{\n     let obj = {};\n     obj = {...estimatesFieldsInitial};\n     if(obj && obj[item] && obj[item].parts && obj[item].parts.length > 1){\n      obj[item].parts = obj[item].parts.filter((currentItem,currentIndex)=>{\n        if(currentIndex !== index){\n          return currentItem\n        }\n      })\n     }\n     setEstimatesFieldsInitial({...obj});\n     setPrevIndex(obj[item].parts.length - 1);\n   }\n\n   const setOtherWorkToBeDoneField = (value) => {\n    setOtherWorkToBeDoneFieldValue(value);\n   }\n\n   const editWorkToBeDone = (item,option,i,value)=>{\n     let updateWorkToBeDone = {};\n     updateWorkToBeDone = {...possibleOptions};\n     if(option && option.refurbishment && option.refurbishment === value.name){\n      updateWorkToBeDone[item].refurbishmentChoices[i].checked = !updateWorkToBeDone[item].refurbishmentChoices[i].checked;\n     }\n     setWorkToBeDone(updateWorkToBeDone);\n   }\n\n   const editRefurbChoice = (item,event,choice,index)=>{\n     let obj = {};\n     obj = {...refurbishmentChoices};\n     if(refurbishmentChoices && refurbishmentChoices[item]){\n      obj[item][index].refurbishment = event.target.value;\n     }\n     setRefurbishmentChoices({...obj});\n   }\n\n    return (\n      <>\n      {props.showToaster && <AlertBox ShowAlert={props.showToaster} message={props.toasterMessage} type={props.toasterType} />}\n      {props && props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n      <div className=\"col-lg-12\">\n      <Link to=\"/estimate\"> Back </Link>\n        <div className=\"middleContent\">\n        <div className=\"row contentWrapper\">\n        {listingDetail && listingDetail.make && (\n          <div className=\"col-lg-3\">\n            <div className=\"form-group\">\n              <h5>{listingDetail.make + \" \" + listingDetail.model}</h5>\n              <span>{listingDetail.variant ? listingDetail.variant+ \" | \" : ''}</span> \n              <span>{listingDetail.fuelType ? listingDetail.fuelType : ''}</span>\n            </div>\n          </div>\n        )}\n\n          <div className=\"col-lg-3\">\n            <div className=\"form-group  bolder-label\">\n            <label>Inspected By: </label>\n              <span>{listingDetail?.createdBy?.uid ? \" \" + listingDetail?.createdBy?.uid : ' N/A'}</span>\n            </div>\n          </div>\n\n          <div className=\"col-lg-3\">\n            <div className=\"form-group bolder-label\">\n              <label>Workshop Name: </label>\n              <span>{listingDetail?.loc?.name ? ' ' + listingDetail.loc?.name : ' N/A'}</span>\n            </div>\n          </div>\n\n        </div>\n      \n        <div className=\"row contentWrapper\">\n          <div className=\"col-lg-3\">\n            <div className=\"form-group bolder-span\">\n              <label>Appointment ID: </label>\n              <span>{listingDetail?.appointmentId ? \" \" + listingDetail.appointmentId : \" N/A\"}</span>\n            </div>\n          </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Inspection Date: </label>\n                <span>{listingDetail?.formatedUpdatedAt ? \" \" + listingDetail.formatedUpdatedAt : \" N/A\"}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Acceptable Imperfection: </label>\n                <span>{\" \"+ accImperfection}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Non-Acceptable Imperfection: </label>\n                <span>{\" \" + nonAccImperfection}</span>\n              </div>\n            </div>\n          \n        </div>\n        \n        <div className=\"row contentWrapper\">\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Total Estimates: </label>\n                <span>{totalEstimates}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Remaining estimates: </label>\n                <span>{remainingEstimates}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>No work to be done: </label>\n                <span>{totalNoWorkToBeDone}</span>\n              </div>\n            </div>\n            \n          \n        </div>\n        \n        <div className=\"row contentWrapper\">\n          {acceptableImperfectionRejected ? (\n            <div className=\"col-lg-12 text-center\">\n              <div className=\"form-group bolder-span\">\n                <span style={{color:'#F34500'}}>\n                Acceptable imperfections have been rejected for this appointment id.\n                Please re inspect them through mobile app.</span>\n              </div>\n            </div>\n          ):(null)} \n        </div>\n        {/* Photo slider starts here*/}\n          <div className=\"row\">\n              <div className=\"col-lg-12\">\n                  <div className=\"container-box estimates-container\">\n                {listingDetail && listingDetail.data &&(\n                    <>\n                    {Object.keys(listingDetail.data.qualityChecks).map((item,index)=>{\n                        return(\n                            <>\n                            {listingDetail.data.qualityChecks[item]?.invalidated === false &&\n                            listingDetail.data.checkpoints[item]?.ok === false && \n                            (\n                              <div className=\"container-box-card mt-4\">\n                                <label className=\"label-top\">{item}</label>\n                                <label className=\"label-top status-right-aligned\">\n                                  {listingDetail.data.qualityChecks[item]?.reason === \"NO_WORK_TO_BE_DONE\" && \n                                  listingDetail.data.qualityChecks[item].status === \"APPROVED\" ? \"No work to be done\" : \n                                  listingDetail.data.qualityChecks[item].status.toLowerCase()}\n                                </label>\n                                <div className=\"shaded-border\"></div>\n                                <div className=\"info-container\">\n                                <div className=\"row my-2 mx-2\">\n                                    <div className=\"col-lg-12\">\n                                    <div className=\"form-group photos-row\">\n                                        <div className=\"estimate-photo-container-horiz\">\n                                            {listingDetail.data.checkpoints[item]?.images.map((image,index)=>(\n                                                <div className=\"col-lg-4 photos-slider\">\n                                                    <img src={image.path} alt={image.label}/>\n                                                </div>\n                                            ))} \n                                        </div>\n                                    </div>\n                                    </div>\n                                </div>\n                                <div className=\"row my-2 mx-2\">\n                                    <div className=\"col-lg-6\">\n                                    {listingDetail.data.checkpoints[item] && listingDetail.data.checkpoints[item].ok === false && \n                                    listingDetail.data.checkpoints[item].choices.length  > 0 &&(\n                                        <div className=\"col-lg-12 light-label dark-span\">\n                                            <h6>Unacceptable Imperfections</h6>\n                                            {listingDetail.data.checkpoints[item].choices.map((choice)=>{\n                                                return(!choice.acceptable ? choice.choice + ' | ' : '')\n                                                })}\n                                            </div>\n                                    )}\n                                    {isEdit !== index ? (<>\n                                      {listingDetail.data.checkpoints[item].refurbishmentChoices.length  > 0 && (\n                                        <div className=\"col-lg-12 light-label dark-span\">\n                                            <h6 className=\"work-to-done\">Work to be done</h6>\n                                            {listingDetail.data.checkpoints[item].refurbishmentChoices.map((choice,index2)=>{\n                                                return(\n                                                  <>\n                                                  {choice && choice.refurbishment && (\n                                                    <>\n                                                   <span>{index2+1 +\". \"+ choice.refurbishment + ' '}</span><br/>\n                                                    </>\n                                                  )}\n                                                  </>\n                                                )\n                                                })}                                             \n                                        </div>\n                                    \n                                    )}\n                                    </>):(null)}\n                                     <div className=\"col-lg-12 light-label dark-span\">\n                                    {possibleOptions && possibleOptions[item] && possibleOptions[item].refurbishmentChoices && isEdit === index && (\n                                      <> {possibleOptions[item].refurbishmentChoices.map((option,ind)=>{\n                                        return(\n                                          <>\n                                          {option && option.other === false ? (\n                                            <>\n                                             <input type=\"checkbox\" \n                                              name={option.refurbishment} \n                                              checked={option.checked} \n                                              onClick={e=>editWorkToBeDone(item,option,ind,e.target)}/>\n                                              <span>{\" \" + option.refurbishment}</span><br/>\n                                            </>\n                                          ):(null)}\n                                          </>\n                                        )\n                                      })\n                                      }\n                                      <span>Other: </span> \n                                      <input className=\"form-control\" type=\"textbox\" name=\"otherWorkToBeDoneField\"\n                                        value={otherWorkToBeDoneFieldValue} \n                                        onChange={e=> setOtherWorkToBeDoneFieldValue(e.target.value)}\n                                        />\n                                      </>\n                                    )}\n                                    </div>\n\n\n                                        <div className=\"col-lg-12 light-label dark-span\">\n                                            <h6 className=\"work-to-done\">Estimated labour cost</h6>\n                                            <input type=\"text\" className=\"form-control\"\n                                            name={item}\n                                            value={estimatesFieldsInitial[item]?.labourCost >= 0 ? estimatesFieldsInitial[item]?.labourCost : \"\"}\n                                            onChange={e=> estimatedLaborCostHandler(e,item)} \n                                            disabled={((isEdit !== index) || (listingDetail.data.qualityChecks[item].status === \"APPROVED\"))}\n                                            />\n                                            {isEdit === index && errors?.name === item &&\n                                            errors.errors && !!estimatesFieldsInitial[item].labourCost &&\n                                            (<span className=\"text-danger\">Should be number</span>)}\n\n                                        </div>\n                                        <div className=\"col-lg-12 mt-4 pl-0\">\n                                        {(listingDetail.data.qualityChecks[item].status !== \"APPROVED\") && (\n                                            <button className=\"estimates-button\" \n                                            onClick={e => {editClickHandler(index,item);setEditWorkClicked(true)}}\n                                            >Edit</button>\n                                        )}\n                                        { !errors.errors && isEdit === index &&\n                                          ((\n                                            !!estimatesFieldsInitial[item]?.labourCost && \n                                            !!!estimatesFieldsInitial[item]?.parts[0]?.name &&\n                                            !!!estimatesFieldsInitial[item]?.parts[0]?.cost\n                                          ) ||(\n                                            !!estimatesFieldsInitial[item]?.labourCost \n                                            && (\n                                            !!estimatesFieldsInitial[item]?.parts[0]?.name &&\n                                            !!estimatesFieldsInitial[item]?.parts[0]?.cost)\n                                          )||(\n                                            !!!estimatesFieldsInitial[item]?.labourCost &&\n                                            !!estimatesFieldsInitial[item]?.parts[0]?.name &&\n                                            !!estimatesFieldsInitial[item]?.parts[0]?.cost\n                                            ) || (!!otherWorkToBeDoneFieldValue || isEdit === index))\n                                        && (\n                                            <button \n                                            className={\"estimates-button\"}\n                                            onClick={e => onSaveEditsHandler(index,item)}\n                                            >Save</button>                                    \n                                        )}\n                                        </div>\n                                    </div>\n                                    \n                                    <div className=\"col-lg-6\">\n                                          {estimatesFieldsInitial[item]?.parts && estimatesFieldsInitial[item]?.parts.length ? \n                                          (<> \n                                          {estimatesFieldsInitial[item]?.parts.map((part,partIndex)=>{\n                                            return(\n                                              <>\n                                              <div className=\"row\" key={partIndex}>\n                                                <div className=\"col-lg-5 light-label dark-span\">\n                                                    <h6>Additional part name</h6>\n                                                    <input type=\"text\" className=\"form-control\"\n                                                    name={item+partIndex}\n                                                    value={part?.name ? part?.name : \"\"}\n                                                    onChange={(e)=> {addtionalPartNameHandler(e,item,partIndex)}} \n                                                    disabled={(isEdit !== index || listingDetail.data.qualityChecks[item].status === \"APPROVED\")}/>\n                                                </div>\n                                                <div className=\"col-lg-5 light-label dark-span\">\n                                                    <h6>Additional part cost</h6>\n                                                    <input type=\"text\" className=\"form-control\"\n                                                    name={item+partIndex} \n                                                    value={part?.cost >= 0 ? part?.cost : \"\"}\n                                                    onChange={e=> additionalPartCostHandler(e,item,partIndex)} \n                                                    disabled={(isEdit !== index) || (listingDetail.data.qualityChecks[item].status === \"APPROVED\")}/>\n                                                {isEdit === index && errors?.name === item+partIndex &&\n                                                errors.errors && estimatesFieldsInitial[item].parts[partIndex].cost &&\n                                                (<span className=\"text-danger\">Should be number</span>)}\n                                                </div>\n                                                <div className=\"col-lg-2\">\n                                                {partIndex && partIndex !== 0 ? (\n                                                  <button type=\"button\" disabled={isEdit !== index} className=\"remove-additional-part\" \n                                                  onClick={e=> removeParts(item,partIndex)}>X</button>\n                                                ):(null)}\n                                                </div>\n                                              </div> \n                                              </>                                         \n                                            )\n                                          \n                                          })}\n                                          </>)\n                                          :\n                                          (\n                                            <>\n                                              <div className=\"row\" key={0}>\n                                                <div className=\"col-lg-6 light-label dark-span\">\n                                                    <h6>Additional part name</h6>\n                                                    <input type=\"text\" className=\"form-control\"\n                                                    name={item+0}\n                                                    value={estimatesFieldsInitial[item]?.parts[0]?.name ? estimatesFieldsInitial[item]?.parts[0]?.name : \"\"}\n                                                    onChange={(e)=> {addtionalPartNameHandler(e,item,0)}} \n                                                    disabled={(isEdit !== index || listingDetail.data.qualityChecks[item].status === \"APPROVED\")}/>\n                                                </div>\n                                                <div className=\"col-lg-6 light-label dark-span\">\n                                                    <h6>Additional part cost</h6>\n                                                    <input type=\"text\" className=\"form-control\"\n                                                    name={item+0} \n                                                    value={estimatesFieldsInitial[item]?.parts[0]?.cost ? estimatesFieldsInitial[item]?.parts[0]?.cost : \"\"}\n                                                    onChange={e=> additionalPartCostHandler(e,item,0)} \n                                                    disabled={(isEdit !== index) || (listingDetail.data.qualityChecks[item].status === \"APPROVED\")}/>\n                                                {isEdit === index && errors?.name === item+\"0\" &&\n                                                errors.errors && estimatesFieldsInitial[item].parts[0].cost &&\n                                                (<span className=\"text-danger\">Should be number</span>)}\n                                                </div>\n                                              </div> \n                                              </>                                         \n                                          )}\n                                        {isEdit === index && (\n                                          <button \n                                        type=\"button\" \n                                        onClick={e=>addMoreParts(item)}\n                                        className=\"estimates-button\"\n                                        disabled={!!!estimatesFieldsInitial[item].parts[prevIndex]?.cost || \n                                          !!!estimatesFieldsInitial[item].parts[prevIndex]?.name}\n                                        >Add More</button>\n                                        )}\n                                         <div className=\"row\">\n                                            <div className=\"col-lg-12 m-2 p-2 light-label\">\n                                                {listingDetail.data.qualityChecks[item].status === \"REJECTED\" && (\n                                                    <>\n                                                    {listingDetail.data.qualityChecks[item].comment && (\n                                                        <>\n                                                        <h6>Comment : <span>{listingDetail.data.qualityChecks[item].comment}</span> </h6>\n                                                        </>\n                                                    )} \n                                                    </>\n                                                 )} \n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                </div>\n                              </div>  \n                            )}\n                            </>\n                        )\n                    })}\n                    </>\n                )}\n                </div>\n              </div>\n          </div>\n        </div>\n      </div>\n      </>\n    );\n  };\n \n\nconst mapDispatchToProps = {\n  getEstimateDetails,\n};\n\nconst mapStateToProps = state => {\n  return {\n      listingDetailsUpdated: state.workshopReducer.estimatesListingDetail,\n  };\n};\n\nexport default connect(mapStateToProps,\n  mapDispatchToProps)(EstimateDetailsComponent)\n","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/estimate/estimateListingComponent.js",["434","435","436"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, GridColumn } from \"@progress/kendo-react-grid\";\nimport \"../workshopQa/workshopQa.css\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport GridCustomCell from \"../../common/GridCustomCell\";\nimport { useDispatch } from \"react-redux\";\nimport { dateFormat, timeFormat } from \"./../../utils/utils\";\nimport MakeModelCell from \"../../common/Tooltip/makeModelCell\";\nimport InspectionTimeCell from \"../../common/Tooltip/inspectionTimeCell\";\nimport WorkshopNameCell from \"../../common/Tooltip/workshopNameCell\";\n\nconst EstimateListingComponent = (props) => {\n    const dispatch = useDispatch();\n    const [paginationData, setPaginationData] = useState({ skip: 0, take: 10 });\n    const [currentPage, setCurrentPage] = useState(\"\");\n    const [qaListingData, setQaListingData] = useState([]);\n    const [qaListingCount, setQaListingCount] = useState(0);\n    const pageChange = (event) => {\n        setPaginationData({\n          skip: event.page.skip,\n          take: event.page.take\n        });\n        setCurrentPage(event.page.skip ? event.page.skip / 10 : 0);\n        let user = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n        let locationCode = user.accessToken && user.accessToken.claims && user.accessToken.claims.locations && user.accessToken.claims.locations.toString();\n        dispatch(props.getEstimatesListing({ page: event.page.skip ? event.page.skip / 10 : 0, size: event.page.take}, locationCode))\n    }\n\n    useEffect(()=>{\n        props.estimatesListing.map(item => {\n            if(item && item.updatedAt){\n                item[\"formatedInspectionTime\"] = dateFormat(item.updatedAt) + \" - \" + timeFormat(item.updatedAt);\n            }          \n        });\n        setQaListingData(props.estimatesListing);\n        setQaListingCount(props.qaListingCount);\n    },[props]);\n\n    const inputSearchHandler = (value)=>{\n            let user = JSON.parse(localStorage.getItem(\"okta-token-storage\"));\n            let locationCode = user.accessToken && user.accessToken.claims && user.accessToken.claims.locations && user.accessToken.claims.locations.toString();\n            dispatch(props.searchAppointmentId(value+\"%\",\"estimate\"));\n            dispatch(props.getEstimatesListingCount(value+\"%\",locationCode));\n    }\n    const appointmentIdCell = (props) => <GridCustomCell dataLink={'/estimate-detail/' + `${props.dataItem.appointmentId}/${props.dataItem.version}`} dataText={props.dataItem.appointmentId} />\n    \n    return(\n        <div className=\"col-lg-12\">\n            <div className=\"gridData\">\n                <div className=\"middleContent\">\n                    <div className=\"search-box\">\n                        <input type=\"text\" onChange={(e)=>inputSearchHandler(e.target.value)} placeholder=\"Search for appointment ID\" />\n                    </div>\n          <Tooltip openDelay={100} position=\"right\" anchorElement=\"element\">\n            <Grid\n              data={qaListingData}\n              pageable={true}\n              skip={paginationData.skip}\n              take={paginationData.take}\n              onPageChange={(e) => pageChange(e)}\n              total={qaListingCount}\n            >\n                <GridColumn\n                    field=\"appointmentId\"\n                    cell={(e)=> appointmentIdCell(e)}\n                    title=\"App. ID\"\n                />\n\n                <GridColumn\n                    field=\"makeModel\"\n                    title=\"Make/Model\"\n                    cell={MakeModelCell}\n                />\n             \n              <GridColumn \n                field=\"inspectionTime\" \n                cell={InspectionTimeCell}\n                title=\"Inspection Time\" \n                />\n\n                <GridColumn\n                    field=\"workshopName\"\n                    title=\"Workshop Name\"\n                    cell={WorkshopNameCell}\n                />\n\n            </Grid>\n          </Tooltip>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EstimateListingComponent;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workshopQaDetail/workshopQaDetailsComponent.js",["437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport loaderImg from \"../../assets/img/loader.png\";\nimport AlertBox from './../../common/showAlert';\nimport \"../workshopQaDetail/workshopDetails.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { dateFormat, setLocationType, timeFormat } from \"../../utils/utils\";\nimport { AlertType } from '../../utils/constants/values.constants';\nimport { Link } from 'react-router-dom';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\nimport { connect } from 'react-redux';\nimport {getWorkshopListingDetails,approveQualityChecks,getInspectionSummary} from \"../../store/actions/workshopQaManagement/workshopQaManagement.action\";\nimport CustomDialog from './../dialog/customDialog';\n\nconst WorkshopQaDetailsComponent = (props) => {\n  const historyLink = useHistory();\n  const dispatch = useDispatch();\n  let imperfectionActionsData = {\n    \"inspectionType\": \"CATALOG\",\n    \"locationType\":\"\",\n    \"schemaVersion\": \"IN_CAR_CATALOG_V1\",\n    \"data\":{\n        \"action\":\"qa\",\n        \"qualityChecks\":{\n        \n        }\n    }\n  };\n  const [appointmentDetails, setAppointmentDetails] = useState({});\n  const [showHideToggler, setShowHideToggler] = useState(false);\n  const [imperfectionCount, setImperfectionCount] = useState(\"\");\n  const [nonAccImperfection, setNonAccImperfection] = useState(\"\");\n  const [accImperfection, setAccImperfection] = useState(\"\");\n  const [isRejected, setRejectAction] = useState(\"\");\n  const [comment,setComment] = useState(\"\");\n  const [toggleViewHandlerFlag, setToggleViewHandler] = useState(\"\");\n  let   [qcActionData, setQcActionData] = useState(imperfectionActionsData);\n  const [allImages, setAllImages] = useState([]);\n  const [allVideos, setAllVideos] = useState([]);\n  const [actionArray, setActionArray] = useState([]);\n  const [lastInspectionData, setInspectionData] = useState([]);\n  const [toggleLastInspection, setToggleLastInspection] = useState(\"\");\n  const [mediaType, setMediaType] = useState(\"image\");\n  const [magnifyImg, setMagnifier] = useState(\"\");\n  const [showOnRejectSubmitError,setShowOnRejectSubmitError] = useState(false);\n  const [qcPendingStatusLength,setQcPendingStatusLength] = useState(0);\n  const [qcPendingStatusAcceptableImp,setQcPendingStatusAcceptableImp] = useState(0);\n  const [qcActionCompletedStatus, setQcActionCompletedStatus] = useState(0);\n  const [iscorrectAssigned, setIscorrectAssigned] = useState(false);\n\n  //For editing checkpoints data starts\n  const [masterData, setMasterData] = useState({});\n  const [reEdit,setReEdit] = useState(\"\");\n  const [isCheckpointEdit, setIsEditCheckpoint] = useState(\"\");\n  const [stateToBeUpdated, setStateToBeUpdated] = useState({});\n  const [isOkNoImperfSelected,setIsOkNoImperfectionSelected] = useState(\"\");\n  const [otherImperfectionEntered, setOtherImperfectionEntered] = useState(\"\");\n  const [otherWorkToBeDone, setOtherWorkToBeDone] = useState(\"\");\n  const [disableWhenAcceptableImperf, setDisableWhenAcceptableImperf] = useState(false);\n  const [isConfirmationDialog, setIsConfirmationDialog] = useState(false);\n  const [getConfirmation, setGetConfirmation] = useState(false);\n  const [dataKey,setDataKey] = useState(\"\");\n  const [confirmationForOnSubmitReject, setConfirmationForOnSubmitReject] = useState({\n    item:'',index:'',comment:'',optional:false, isConfirm:false\n  });\n  const [popupMessage, setPopupMessage] = useState(\"\");\n  //inspection summary data\n  const [inspectionSummary, setInspectionSummary] = useState({});\n  //No work to be done \n  const [noWorkToBeDone,setNoWorkToBeDone] = useState(\"\");\n\n  useEffect(()=>{\n    let totlaNonAcceptableImperfections = 0;\n    let totlalAcceptableImperfections = 0;\n    let searchParams = {\n      appointmentId:'',\n      inspectionType:\"CATALOG\",\n      version:'all'\n    };\n    let allImages = [];\n    let allVideos = [];\n    if(props && props.listingDetails && props.listingDetails[0] && props.listingDetails[0].appointmentId){\n      searchParams.appointmentId = props.listingDetails[0].appointmentId;\n      dispatch(props.getInspectionData(searchParams));\n      setInspectionData(props.lastInspectionData[1]);\n      }\n    if(props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.checkpoints){\n      Object.keys(props.listingDetails[0].data.checkpoints).map((item)=>{\n          props.qaTopImagesKeys.map((itemTop)=>{\n            if(itemTop === item){\n              props.listingDetails[0].data.checkpoints[itemTop].images.map((item,index)=>{\n                allImages.push(item);\n              });\n              props.listingDetails[0].data.checkpoints[itemTop].videos.map((item,index)=>{\n                allVideos.push(item);\n              })\n            }          \n          })\n          setAllImages(allImages);\n          setAllVideos(allVideos);\n      });\n\n      Object.keys(props.listingDetails[0].data.qualityChecks).map((item)=>{\n        if(props.listingDetails[0].data.qualityChecks[item].invalidated === false){\n            if(props.listingDetails[0].data.checkpoints[item].ok === false){\n                totlaNonAcceptableImperfections += 1;\n              }\n              else if( \n                props.listingDetails[0].data.checkpoints[item].choices.length > 0){\n                  totlalAcceptableImperfections += 1;\n              }\n        }\n      });\n    }\n    setNonAccImperfection(totlaNonAcceptableImperfections);\n    setAccImperfection(totlalAcceptableImperfections);\n    let totalQCheck = 0;\n    if(props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.qualityChecks){\n      Object.keys(props.listingDetails[0].data.qualityChecks).map((item)=>{\n        Object.keys(props.listingDetails[0].data.qualityChecks[item]).map((invalidated)=>{\n          if(invalidated && invalidated === \"invalidated\" && \n          props.listingDetails[0].data.qualityChecks[item][invalidated] === false){\n            totalQCheck += 1\n          }        \n        })\n      });   \n      setImperfectionCount(totalQCheck);   \n    }\n\n    let lengthQc = 0;\n    let acceptableImp = 0;\n        if(props && props.listingDetails[0] && props.listingDetails[0].data && props.listingDetails[0].data.qualityChecks){\n        Object.keys(props.listingDetails[0].data.qualityChecks).map((item)=>{\n        if(props.listingDetails[0].data.qualityChecks[item].status === \"PENDING\" \n        && props.listingDetails[0].data.qualityChecks[item].invalidated === false){\n            lengthQc += 1 \n        }\n        });\n        setQcPendingStatusLength(lengthQc);\n        } \n\n        if(props && props.listingDetails[0] && props.listingDetails[0].data){\n          if(props.listingDetails[0].data && props.listingDetails[0].data.checkpoints){\n            Object.keys(props.listingDetails[0].data.checkpoints).map((item)=>{\n              if(((props.listingDetails[0].data.qualityChecks[item]?.status === \"APPROVED\") || \n              (props.listingDetails[0].data.checkpoints[item]?.ok === true))\n              ){\n                acceptableImp += 1 \n              }\n            })\n          }\n          setQcPendingStatusAcceptableImp(lengthQc);\n        }\n\n  },[props.listingDetails]);\n\n  useEffect(()=>{\n    if(props && props.inspectionSummary){\n      setInspectionSummary(props.inspectionSummary);\n    }\n  },[props.inspectionSummary]);\n\n  useEffect(()=>{\n    if(props && props.masterData){\n      setMasterData(props.masterData);\n    }\n  },[props.masterData]);\n  useEffect(()=>{\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\n    if(userData && userData.email && props && props.listingDetails[0] && props.listingDetails[0].assignedTo){\n      setIscorrectAssigned(userData.email === props.listingDetails[0].assignedTo.uid);\n    }\n    props && props.listingDetails.map((item)=>{\n      if(item && item.updatedAt){\n        item.formatedUpdatedAt = dateFormat(item.updatedAt);\n      }\n    });   \n    setAppointmentDetails(props.listingDetails[0]);\n  },[props.listingDetails]);\n\n  useEffect(()=>{\n    props && props.lastInspectionData.map((item)=>{\n      if(item && item.updatedAt){\n        item.formatedUpdatedAt = dateFormat(item.updatedAt);\n        item.formatedUpdateAtTime = timeFormat(item.updatedAt);\n      }\n    });\n    if(props && props.lastInspectionData && props.lastInspectionData.length > 1){\n      props.lastInspectionData.sort((a,b)=>{\n        return b.version - a.version;\n      });\n      setInspectionData(props.lastInspectionData[1]);\n    }\n  },[props.lastInspectionData]);\n  \n  const handleRejectionComment = (event)=>{\n    setComment(event.target.value);\n  }\n\n  useEffect(()=>{\n    if(getConfirmation && confirmationForOnSubmitReject.isConfirm){\n      onSubmitReject(confirmationForOnSubmitReject.item,confirmationForOnSubmitReject.index,\n        confirmationForOnSubmitReject.comment,confirmationForOnSubmitReject.optional);\n    }\n  },[getConfirmation]);\n\n  const rejectHandler = (item)=>{\n    let obj = {};\n    obj = {...qcActionData};\n    obj.data.qualityChecks = {};\n    setQcActionData({...obj});\n    setConfirmationForOnSubmitReject({item:'',index:'',comment:'',optional:false, isConfirm:false});\n  }\n\n  useEffect(()=>{\n    if(getConfirmation && !!noWorkToBeDone){\n      onFinalSubmitNoWorkToBeDone(noWorkToBeDone);\n    }\n    if(!getConfirmation){\n      setNoWorkToBeDone(\"\");\n      setPopupMessage(\"\");\n    }\n  },[getConfirmation && noWorkToBeDone]);\n\n  const onSubmitNoWorkToBeDone = (item) => {\n    setIsConfirmationDialog(true);\n    setNoWorkToBeDone(item);\n    setPopupMessage(\"No work to be done will remove the checkpoint estimates, Are you sure?\");\n  }\n\n  const onFinalSubmitNoWorkToBeDone = (item) => {\n    let data = {\n      \"inspectionType\": \"CATALOG\",\n      \"schemaVersion\": \"IN_CAR_CATALOG_V1\",\n      \"data\":{\n          \"action\":\"noWork\",\n          \"qualityChecks\":{} \n            }\n          }\n          data.data.qualityChecks[item] = {\n            \"status\":\"APPROVED\",\n          }\n\n          dispatch(approveQualityChecks(data,appointmentDetails.appointmentId,\"Approved Successfully\"));\n          let params = {\n            appointmentId:appointmentDetails.appointmentId,\n            inspectionType:\"CATALOG\",\n            inspectionStatus:\"ESTIMATED\"\n          }\n          setTimeout(()=>{\n            dispatch(getWorkshopListingDetails(params));\n            dispatch(getWorkshopListingDetails(params));\n          },1000);\n  \n          setTimeout(()=>{\n            dispatch(getInspectionSummary({appointmentId:appointmentDetails.appointmentId}));\n            dispatch(getInspectionSummary({appointmentId:appointmentDetails.appointmentId}));\n          },1100);\n  \n          setGetConfirmation(false);\n          setIsConfirmationDialog(false);\n          setNoWorkToBeDone(\"\");\n          setPopupMessage(\"\");\n  }\n\n  const onSubmitReject = (item,index,comment,optional)=>{\n    setReEdit(\"\");\n    setNoWorkToBeDone(\"\");\n    setPopupMessage(\"\");\n    if(!comment || comment === \"\"){\n      setShowOnRejectSubmitError(true);\n      return false\n    }\n    setConfirmationForOnSubmitReject({item:item,index:index,comment:comment,optional:optional, isConfirm:true});\n    setIsConfirmationDialog(true);\n    setShowOnRejectSubmitError(false);\n    let obj = {};\n    obj = {...qcActionData};\n    obj.data.qualityChecks[item] = {status:\"REJECTED\",\"comment\":comment};\n    setQcActionData({...obj});\n\n    let newActionArray = [];\n    newActionArray = [...actionArray];\n    newActionArray.push(index);\n    setActionArray([...newActionArray]);\n    if(optional === false){\n    let qcActionCompletedStatus = 0;\n    if(appointmentDetails?.data?.qualityChecks){\n      Object.keys(appointmentDetails.data.qualityChecks).map((key)=>{\n        if(qcActionData.data.qualityChecks[key]){\n          qcActionCompletedStatus += 1;\n          setQcActionCompletedStatus(qcActionCompletedStatus);\n        }\n      })\n      }\n    }\n    // Submitting single request\n    if(getConfirmation && confirmationForOnSubmitReject.isConfirm){\n      if(appointmentDetails && appointmentDetails.inspectionStatus === \"ESTIMATED\"){\n        let appointmentId = window.location.pathname.split(\"/\")[2];\n        qcActionData.locationType = appointmentDetails.locationType;\n        dispatch(approveQualityChecks(qcActionData,appointmentId,\"Rejected successfully\"));\n        setQcActionData(imperfectionActionsData);\n        setActionArray([]);\n        setComment(\"\");\n        setRejectAction(\"\");\n        // Refreshing list details\n        let params = {\n          appointmentId:appointmentDetails.appointmentId,\n          inspectionType:\"CATALOG\",\n          inspectionStatus:\"ESTIMATED\"\n        }\n        \n        setTimeout(()=>{\n          dispatch(getWorkshopListingDetails(params));\n          dispatch(getWorkshopListingDetails(params));\n        },1000);\n\n        setTimeout(()=>{\n          dispatch(getInspectionSummary({appointmentId:appointmentDetails.appointmentId}));\n          dispatch(getInspectionSummary({appointmentId:appointmentDetails.appointmentId}));\n        },1100);\n\n        setGetConfirmation(false);\n        setIsConfirmationDialog(false);\n        setConfirmationForOnSubmitReject({item:'',index:'',comment:'',optional:false, isConfirm:false});        \n  \n      }else{\n        dispatch(props.setToasterMessage({\n          toasterMessage: \"Something went wrong\",\n          showToaster: true,\n          toasterType: AlertType.ERROR\n        }));\n      }  \n    } \n      \n  }\n\n  const onSubmitApprove = (item,index,optional) =>{\n    setReEdit(\"\");\n    setNoWorkToBeDone(\"\");\n    setPopupMessage(\"\");\n    let obj = {};\n    obj = {...qcActionData};\n    obj.data.qualityChecks[item] = {status:\"APPROVED\"};\n    setQcActionData({...obj});\n\n    let newActionArray = [];\n    newActionArray = [...actionArray];\n    newActionArray.push(index);\n    setActionArray([...newActionArray]);\n    if(optional === false){\n    let qcActionCompletedStatus = 0;\n    if(appointmentDetails?.data?.qualityChecks){\n      Object.keys(appointmentDetails.data.qualityChecks).map((key)=>{\n        if(qcActionData.data.qualityChecks[key]){\n          qcActionCompletedStatus += 1;\n          setQcActionCompletedStatus(qcActionCompletedStatus);\n        }\n      })\n    }\n    }\n\n    if(appointmentDetails && appointmentDetails.inspectionStatus === \"ESTIMATED\"){\n      let appointmentId = window.location.pathname.split(\"/\")[2];\n      qcActionData.locationType = appointmentDetails.locationType;\n      dispatch(approveQualityChecks(qcActionData,appointmentId,\"Approved successfully\"));\n      setQcActionData(imperfectionActionsData);\n      setActionArray([]);\n\n      // Refreshing list details\n      let params = {\n        appointmentId:appointmentDetails.appointmentId,\n        inspectionType:\"CATALOG\",\n        inspectionStatus:\"ESTIMATED\"\n      }\n      setTimeout(()=>{\n        dispatch(getWorkshopListingDetails(params));\n        dispatch(getWorkshopListingDetails(params));\n      },1000);\n\n      setTimeout(()=>{\n        dispatch(getInspectionSummary({appointmentId:appointmentDetails.appointmentId}));\n        dispatch(getInspectionSummary({appointmentId:appointmentDetails.appointmentId}));\n      },1100);\n      \n      // historyLink.push('/workshop-qa');\n    }else{\n      dispatch(props.setToasterMessage({\n        toasterMessage: \"Something went wrong\",\n        showToaster: true,\n        toasterType: AlertType.ERROR\n      }));\n    }    \n    \n  }\n\n  const qcActionResetHandler = (item,index,optional) => {\n    setActionArray(actionArray.filter(item => item !== index));\n    setReEdit(index);\n    let obj = {};\n    obj = {...qcActionData};\n    delete obj.data.qualityChecks[item]; \n    setQcActionData({...obj});\n    if(optional === false){\n      let qcActionCompletedCount = 1;\n      setQcActionCompletedStatus(qcActionCompletedStatus - qcActionCompletedCount);\n    }\n    }\n\n  const submitAllQcAction = () => {\n    if(appointmentDetails && appointmentDetails.inspectionStatus === \"ESTIMATED\"){\n      let appointmentId = window.location.pathname.split(\"/\")[2];\n      let payload = {\n        \"inspectionType\": \"CATALOG\",\n        \"schemaVersion\": \"IN_CAR_CATALOG_V1\",\n        \"data\":{\n            \"action\":\"submitQa\"\n        }\n    };\n      dispatch(approveQualityChecks(payload,appointmentId,\"Submitted successfully\",\"submit all qc workshopQA\"));\n      setQcActionData(imperfectionActionsData);\n      setActionArray([]);\n    }else{\n      dispatch(props.setToasterMessage({\n        toasterMessage: \"Something went wrong\",\n        showToaster: true,\n        toasterType: AlertType.ERROR\n      }));\n    } \n  }\n\n  const toggleVideoHandler = (index)=>{\n    setToggleViewHandler(index);\n  }\n\n  const toggleVideoHandler2 = (index, type)=>{\n    setMediaType(type);\n  }\n\n  const toggleImageHandler = (index)=>{\n    setToggleViewHandler(\"\");\n  }\n\n  const toggleImageHandler2 = (index,type)=>{\n    setMediaType(type);\n  }\n\n  const toggleLastInspectionHandler = (index) => {\n    setToggleLastInspection(index);\n    setShowHideToggler(!showHideToggler);\n  }\n\n  const imageMagnifier = (data) =>{\n    setMagnifier(data);    \n  };\n\n  // Handlers to update checkpoints data starts here\n  const editCheckpointClicked = (index,checkpointName) => {\n    setConfirmationForOnSubmitReject({item:'',index:'',comment:'',optional:false, isConfirm:false});\n    setIsConfirmationDialog(false);\n    setIsEditCheckpoint(index);\n    setReEdit(\"\");\n    setNoWorkToBeDone(\"\");\n    setRejectAction(\"\");\n    setIsOkNoImperfectionSelected(\"\");\n    setOtherImperfectionEntered(\"\");\n    setOtherWorkToBeDone(\"\");\n    setStateToBeUpdated({});\n    let prevCondition = {\n      acceptImpChoices:{},\n      nonAcceptImpChoices:{}\n    };\n    if(appointmentDetails && appointmentDetails.data && appointmentDetails.data.checkpoints && \n      appointmentDetails.data.checkpoints[checkpointName]){\n              masterData && masterData.checkpoints && masterData.checkpoints.map((masterData)=>{\n                if(checkpointName === masterData.key){\n                  masterData && masterData.noImperfectionChoices && masterData.noImperfectionChoices.map((option)=>{\n                    if(appointmentDetails.data.checkpoints[checkpointName].noImperfectionChoices.includes(option.name)){\n                      setIsOkNoImperfectionSelected(option.name);\n                    }\n                  });\n                }\n              })\n\n          //Imperfections\n          if(appointmentDetails.data.checkpoints[checkpointName]){\n              prevCondition.nonAcceptImpChoices[\"choices\"] = appointmentDetails.data.checkpoints[checkpointName].choices;\n              prevCondition.nonAcceptImpChoices[\"choices\"].map((choice,index)=>{\n                if(choice.other === true){\n                  setOtherImperfectionEntered(choice.choice);\n                }\n                choice.selected = true;\n                return choice\n              })\n            }\n\n          // Work to be done\n          if(appointmentDetails.data.checkpoints[checkpointName]?.refurbishmentChoices?.length){\n            prevCondition[\"reburbChoices\"] = appointmentDetails.data.checkpoints[checkpointName].refurbishmentChoices;\n            prevCondition[\"reburbChoices\"].map((item,index)=>{\n                if(item.other === true){\n                  setOtherWorkToBeDone(item.refurbishment);\n                }\n                item.selected = true;\n                return item;\n            })\n          }\n\n          // Possible options\n          if(masterData && masterData.checkpoints){\n            let addPossibleChoices = [];\n            let addPossibleRefurbChoices = [];\n            masterData.checkpoints.map((item) => {\n              if(item.key === checkpointName){\n                if(item && item.choices){\n                  item.choices.map((choice)=>{\n                    addPossibleChoices.push({acceptable: choice?.type === \"absolute\" ? false : true,choice: choice.name, other: false,selected: false});\n                  });\n                }\n                if(item && item.refurbishment && item.refurbishment.choices){\n                  item.refurbishment.choices.map((choice)=>{\n                    addPossibleRefurbChoices.push({refurbishment: choice, other: false, selected: false});\n                  })\n                }\n              }\n            });\n            if(prevCondition.nonAcceptImpChoices[\"choices\"] && addPossibleChoices){\n              prevCondition.nonAcceptImpChoices[\"choices\"] = [...addPossibleChoices,...prevCondition.nonAcceptImpChoices[\"choices\"]];\n              prevCondition.nonAcceptImpChoices[\"choices\"] = [...prevCondition.nonAcceptImpChoices[\"choices\"].reduce((map,obj)=> map.set(obj.choice,obj), new Map()).values()];\n            }else if(!prevCondition.nonAcceptImpChoices[\"choices\"] && addPossibleChoices){\n              prevCondition.nonAcceptImpChoices[\"choices\"] = [...addPossibleChoices];\n              prevCondition.nonAcceptImpChoices[\"choices\"] = [...prevCondition.nonAcceptImpChoices[\"choices\"].reduce((map,obj)=> map.set(obj.choice,obj), new Map()).values()];\n            }\n            if(prevCondition[\"reburbChoices\"] && addPossibleRefurbChoices){\n            prevCondition[\"reburbChoices\"] = [...addPossibleRefurbChoices,...prevCondition[\"reburbChoices\"]];\n            prevCondition[\"reburbChoices\"] = [... prevCondition[\"reburbChoices\"].reduce((map,obj)=> map.set(obj.refurbishment,obj), new Map()).values()];\n            }else if(!prevCondition[\"reburbChoices\"] && addPossibleRefurbChoices){\n              prevCondition[\"reburbChoices\"] = [...addPossibleRefurbChoices];\n              prevCondition[\"reburbChoices\"] = [... prevCondition[\"reburbChoices\"].reduce((map,obj)=> map.set(obj.refurbishment,obj), new Map()).values()];\n            }\n          }\n          setStateToBeUpdated({...prevCondition});\n          let allSelectedChoices = [];\n          let allAcceptableChoices = [];\n          let allOptions = {};\n          allOptions = {...stateToBeUpdated};\n          if(allOptions && allOptions.nonAcceptImpChoices \n            && allOptions.nonAcceptImpChoices.choices && \n            allOptions.nonAcceptImpChoices.choices.length){\n              allSelectedChoices = allOptions.nonAcceptImpChoices.choices.filter((item)=>{\n                if(item && item.selected === true){\n                return true;\n                } \n              });\n              if(allSelectedChoices && allSelectedChoices.length){\n                allAcceptableChoices = allSelectedChoices.filter((item)=>{\n                  if(item && item.acceptable === true ){\n                    return item\n                  }\n                });\n              }\n            }\n          if(allSelectedChoices && allSelectedChoices.length && allAcceptableChoices \n            && allAcceptableChoices.length && allAcceptableChoices.length === allSelectedChoices.length && !!!otherImperfectionEntered){\n            setDisableWhenAcceptableImperf(true);\n            setOtherWorkToBeDone(\"\");\n            if(stateToBeUpdated && stateToBeUpdated.reburbChoices && stateToBeUpdated.reburbChoices.length){\n              stateToBeUpdated.reburbChoices.filter((item) => {\n                item.selected = false;\n                return item\n                })\n              }\n            }else{\n              setDisableWhenAcceptableImperf(false);\n            }\n    }\n  }\n\n  const changeChoicesHandler = (type,index,value) => {\n    if(type === \"modify\"){\n      stateToBeUpdated.nonAcceptImpChoices.choices[index].choice = value;\n    }\n    if(type === \"nonAccept\"){\n      setIsOkNoImperfectionSelected(\"\");\n      stateToBeUpdated.nonAcceptImpChoices.choices[index].selected = !stateToBeUpdated.nonAcceptImpChoices.choices[index].selected;\n    }\n    if(type === \"accept\"){\n      setIsOkNoImperfectionSelected(\"\");\n      stateToBeUpdated.acceptImpChoices.choices[index].selected = !stateToBeUpdated.acceptImpChoices.choices[index].selected;\n    }\n\n    let allSelectedChoices = [];\n      let allAcceptableChoices = [];\n      let allOptions = {};\n      allOptions = {...stateToBeUpdated};\n      if(allOptions && allOptions.nonAcceptImpChoices \n        && allOptions.nonAcceptImpChoices.choices && \n        allOptions.nonAcceptImpChoices.choices.length){\n          allSelectedChoices = allOptions.nonAcceptImpChoices.choices.filter((item)=>{\n           if(item && item.selected === true){\n            return true;\n           } \n          });\n          if(allSelectedChoices && allSelectedChoices.length){\n            allAcceptableChoices = allSelectedChoices.filter((item)=>{\n              if(item && item.acceptable === true ){\n                return item\n              }\n            });\n          }\n        }\n      if(allSelectedChoices && allSelectedChoices.length && allAcceptableChoices \n        && allAcceptableChoices.length && allAcceptableChoices.length === allSelectedChoices.length && !!!otherImperfectionEntered){\n        setDisableWhenAcceptableImperf(true);\n        setOtherWorkToBeDone(\"\");\n        if(stateToBeUpdated && stateToBeUpdated.reburbChoices && stateToBeUpdated.reburbChoices.length){\n          stateToBeUpdated.reburbChoices.filter((item) => {\n            item.selected = false;\n            return item\n            })\n          }\n        }else{\n          setDisableWhenAcceptableImperf(false);\n        }\n\n    if(type === \"reburbChoice\"){\n      if(!!isOkNoImperfSelected){\n        dispatch(props.setToasterMessage({\n          toasterMessage: \"No imperfection selected !!\",\n          showToaster: true,\n          toasterType: AlertType.WARNING\n        }));\n        return\n      }\n      if(disableWhenAcceptableImperf){\n        dispatch(props.setToasterMessage({\n          toasterMessage: \"Acceptable imperfection selected !!\",\n          showToaster: true,\n          toasterType: AlertType.WARNING\n        }));\n        return\n      }\n      stateToBeUpdated.reburbChoices[index].selected = !stateToBeUpdated.reburbChoices[index].selected;\n    }\n    if(type === \"reburbChoiceModify\"){\n      stateToBeUpdated.reburbChoices[index].refurbishment = value ? value : stateToBeUpdated.reburbChoices[index].refurbishment;\n    }\n    setStateToBeUpdated({...stateToBeUpdated});\n  }\n\n  const changeImperfectionType = (choice,index,imperfectionType) => {\n    stateToBeUpdated.nonAcceptImpChoices.choices[index].acceptable = !stateToBeUpdated.nonAcceptImpChoices.choices[index].acceptable;\n    setStateToBeUpdated({...stateToBeUpdated});\n      let allSelectedChoices = [];\n      let allAcceptableChoices = [];\n      let allOptions = {};\n      allOptions = {...stateToBeUpdated};\n      if(allOptions && allOptions.nonAcceptImpChoices \n        && allOptions.nonAcceptImpChoices.choices && \n        allOptions.nonAcceptImpChoices.choices.length){\n          allSelectedChoices = allOptions.nonAcceptImpChoices.choices.filter((item)=>{\n           if(item && item.selected === true){\n            return true;\n           } \n          });\n          if(allSelectedChoices && allSelectedChoices.length){\n            allAcceptableChoices = allSelectedChoices.filter((item)=>{\n              if(item && item.acceptable === true ){\n                return item\n              }\n            });\n          }\n        }\n      if(allSelectedChoices && allSelectedChoices.length && allAcceptableChoices \n        && allAcceptableChoices.length && allAcceptableChoices.length === allSelectedChoices.length && !!!otherImperfectionEntered){\n        setDisableWhenAcceptableImperf(true);\n        setOtherWorkToBeDone(\"\");\n        if(stateToBeUpdated && stateToBeUpdated.reburbChoices && stateToBeUpdated.reburbChoices.length){\n          stateToBeUpdated.reburbChoices.filter((item) => {\n            item.selected = false;\n            return item\n            })\n          }\n        }else{\n          setDisableWhenAcceptableImperf(false);\n        }\n    \n  }\n\n  const isNotApplicableSelected = (value) => {\n    setOtherImperfectionEntered(\"\");\n    setOtherWorkToBeDone(\"\");\n    setDisableWhenAcceptableImperf(false);\n    setIsOkNoImperfectionSelected(value);\n    if(stateToBeUpdated.nonAcceptImpChoices && stateToBeUpdated.nonAcceptImpChoices.choices){\n      stateToBeUpdated.nonAcceptImpChoices.choices.map((data)=>{\n        data.selected = false;\n        return data;\n      })\n    }\n    if(stateToBeUpdated && stateToBeUpdated.reburbChoices && stateToBeUpdated.reburbChoices.length){\n      stateToBeUpdated.reburbChoices.map((refurb)=>{\n        refurb.selected = false;\n        return refurb;\n      });\n    }\n  }\n\n  const otherImperfection = (value) =>{\n    setIsOkNoImperfectionSelected(\"\");\n    setDisableWhenAcceptableImperf(false);\n    setOtherImperfectionEntered(value);\n    let allSelectedChoices = [];\n            let allAcceptableChoices = [];\n            let allOptions = {};\n            allOptions = {...stateToBeUpdated};\n            if(allOptions && allOptions.nonAcceptImpChoices \n              && allOptions.nonAcceptImpChoices.choices && \n              allOptions.nonAcceptImpChoices.choices.length){\n                allSelectedChoices = allOptions.nonAcceptImpChoices.choices.filter((item)=>{\n                 if(item && item.selected === true){\n                  return true;\n                 } \n                });\n                if(allSelectedChoices && allSelectedChoices.length){\n                  allAcceptableChoices = allSelectedChoices.filter((item)=>{\n                    if(item && item.acceptable === true ){\n                      return item\n                    }\n                  });\n                }\n              }\n            if(allSelectedChoices && allSelectedChoices.length && allAcceptableChoices \n              && allAcceptableChoices.length && allAcceptableChoices.length === allSelectedChoices.length && (!value || !otherImperfectionEntered)){\n              setDisableWhenAcceptableImperf(true);\n              setOtherWorkToBeDone(\"\");\n              if(stateToBeUpdated && stateToBeUpdated.reburbChoices && stateToBeUpdated.reburbChoices.length){\n                stateToBeUpdated.reburbChoices.filter((item) => {\n                  item.selected = false;\n                  return item\n                  })\n                }\n              }else{\n                setDisableWhenAcceptableImperf(false);\n              }\n  }\n\n  const otherWorktoBeDone = (value) => {\n    if(disableWhenAcceptableImperf){\n      dispatch(props.setToasterMessage({\n        toasterMessage: \"Acceptable imperfection selected !!\",\n        showToaster: true,\n        toasterType: AlertType.WARNING\n      }));\n      return\n    }\n    if(!!!isOkNoImperfSelected){\n      setOtherWorkToBeDone(value);\n    }\n  }\n\n  const checkpointEditCancled = (item)=>{\n    let params = {\n      appointmentId:appointmentDetails.appointmentId,\n      inspectionType:\"CATALOG\",\n      inspectionStatus:\"ESTIMATED\"\n    };    \n    setTimeout(()=>{\n      dispatch(getWorkshopListingDetails(params));\n    },100);\n  }\n\n  useEffect(()=>{\n    if(dataKey && getConfirmation){\n      updateCheckpointDataHandler(dataKey);\n    }\n  },[getConfirmation]);\n\n  const updateCheckpointDataHandler = (dataKey) => {\n      let payload = {\n        \"inspectionType\": \"CATALOG\",\n        \"schemaVersion\": \"IN_CAR_CATALOG_V1\",\n            \"data\":{\n                \"action\":\"checkpointsQa\",\n                \"checkpoints\":{}\n            }\n        };\n      payload.data.checkpoints[dataKey] = {};\n      let selectedChoices;\n      let selectedRefurbChoices;\n      let noImperfectionChoices = [];\n        if(stateToBeUpdated.nonAcceptImpChoices && stateToBeUpdated.nonAcceptImpChoices.choices){\n          selectedChoices = stateToBeUpdated.nonAcceptImpChoices.choices.map((item)=>{\n            if(item.selected === true && item.other === false){\n              return {acceptable:item.acceptable,choice:item.choice,other:item.other}\n            }\n          });\n    \n          selectedChoices = selectedChoices.filter(function( element ) {\n            return element !== undefined;\n         });\n    \n         if(!!otherImperfectionEntered){\n          selectedChoices.push({acceptable:false,choice:otherImperfectionEntered,other:true});\n         }    \n        }\n        if(stateToBeUpdated && stateToBeUpdated.reburbChoices){\n          selectedRefurbChoices = stateToBeUpdated.reburbChoices.map((item)=>{\n            if(item.selected === true && item.other === false){\n              return {refurbishment:item.refurbishment,other:item.other}\n            }\n          });\n          selectedRefurbChoices = selectedRefurbChoices.filter(function( element ) {\n            return element !== undefined;\n         });\n         if(!!otherWorkToBeDone){\n          selectedRefurbChoices.push({refurbishment:otherWorkToBeDone,other:true})\n         }\n        }\n    \n        if(!!isOkNoImperfSelected){\n          noImperfectionChoices.push(isOkNoImperfSelected);\n        }\n    \n        if(selectedChoices?.length){\n          payload.data.checkpoints[dataKey][\"choices\"] = selectedChoices;\n        }\n        if(selectedRefurbChoices?.length){\n          payload.data.checkpoints[dataKey][\"refurbishmentChoices\"] = selectedRefurbChoices;\n        }\n        if(noImperfectionChoices?.length){\n          payload.data.checkpoints[dataKey][\"noImperfectionChoices\"] = noImperfectionChoices;\n        }\n    \n        if(appointmentDetails && appointmentDetails.data && appointmentDetails.data.checkpoints && \n          appointmentDetails.data.checkpoints[dataKey] && appointmentDetails.data.checkpoints[dataKey].images && \n          appointmentDetails.data.checkpoints[dataKey].images.length){\n            payload.data.checkpoints[dataKey][\"images\"] = appointmentDetails.data.checkpoints[dataKey].images;\n        }\n    \n        if(appointmentDetails && appointmentDetails.data && appointmentDetails.data.checkpoints && \n          appointmentDetails.data.checkpoints[dataKey] && appointmentDetails.data.checkpoints[dataKey].videos && \n          appointmentDetails.data.checkpoints[dataKey].videos.length){\n            payload.data.checkpoints[dataKey][\"videos\"] = appointmentDetails.data.checkpoints[dataKey].videos;\n        }\n    \n        console.log(payload);\n        // check whether no work to be done selected or not in case of non-acceptable imperfection\n        let showWorkToBeDoneWarning = 0;\n        if(payload.data.checkpoints[dataKey] && payload.data.checkpoints[dataKey].choices && payload.data.checkpoints[dataKey].choices.length){\n          payload.data.checkpoints[dataKey].choices.map((choice)=>{\n            if(choice && choice.acceptable === false && \n              (!payload.data.checkpoints[dataKey].refurbishmentChoices || payload.data.checkpoints[dataKey].refurbishmentChoices.length === 0)){\n                showWorkToBeDoneWarning += 1;\n                dispatch(props.setToasterMessage({\n                  toasterMessage: \"Please select work to be done!!\",\n                  showToaster: true,\n                  toasterType: AlertType.WARNING\n                })); \n                return                             \n            }\n          });\n        }\n       \n        if(showWorkToBeDoneWarning === 0){\n          setDataKey(dataKey);\n          setIsConfirmationDialog(true);\n        }else{\n          setDataKey(\"\");\n          setIsConfirmationDialog(false);\n        }\n\n        if(getConfirmation && dataKey){\n        dispatch(approveQualityChecks(payload,appointmentDetails.appointmentId));\n        setIsEditCheckpoint(\"\");\n        setTimeout(()=>{\n          let params = {\n            appointmentId:appointmentDetails.appointmentId,\n            inspectionType:\"CATALOG\",\n            inspectionStatus:\"ESTIMATED\"\n          }\n          dispatch(getWorkshopListingDetails(params));\n          dispatch(getWorkshopListingDetails(params));\n        },1000);\n        setTimeout(()=>{\n          dispatch(getInspectionSummary({appointmentId:appointmentDetails.appointmentId}));\n          dispatch(getInspectionSummary({appointmentId:appointmentDetails.appointmentId}));\n        },1100);\n        setGetConfirmation(false);\n        setDataKey(\"\");\n        setIsConfirmationDialog(false);\n      }      \n  }\n  // Handlers to update checkpoints data ends here\n\n  return (\n    <>\n    {isConfirmationDialog ? (\n    <CustomDialog\n    setPopupMessage={popupMessage} \n    setGetConfirmation={setGetConfirmation} \n    setIsConfirmationDialog={setIsConfirmationDialog}\n    />  \n    ):(null)}\n\n    {magnifyImg && magnifyImg.path && (\n      <div className=\"background-shadow\">\n        <div>\n        <TransformWrapper defaultScale={1} defaultPositionX={200} defaultPositionY={100}>\n          {({zoomIn,zoomOut,resetTransform,...rest}) => (\n            <><div className=\"row m-0\">\n              <div className=\"col-4\"></div>\n              <div className=\"col-5\">\n                <button className=\"btn btn-primary p-1 px-3 text-white\" onClick={()=>zoomIn()}> + </button>\n                <button className=\"btn mx-1 my-1 p-1 btn-primary text-white\" onClick={()=>resetTransform()}> Reset </button>\n                <button className=\"btn btn-primary p-1 px-3 text-white\" onClick={()=>zoomOut()}> - </button>\n                <TransformComponent>\n                  <img src={magnifyImg.path} width=\"550\"/>\n                </TransformComponent>\n              </div>\n              <div className=\"col-3\">\n              <span className=\"close-image-preview\" onClick={()=> setMagnifier(\"\")}>X</span>\n              </div>\n            </div>\n            </>\n          )}\n        </TransformWrapper>\n        \n        </div>\n      </div>\n    )}\n    \n    {props.showToaster && <AlertBox ShowAlert={props.showToaster} message={props.toasterMessage} type={props.toasterType} />}\n    {props && props.isProcessing && <div className=\"loaderSection\"> <img src={loaderImg} alt=\"loader\" /></div>}\n    <div className=\"col-lg-12\">\n    <Link to=\"/workshop-qa\" className=\"back\">Back</Link>\n      <div className=\"middleContent\">\n        <div className=\"row contentWrapper\">\n        {appointmentDetails && appointmentDetails.make && (\n          <div className=\"col-lg-3\">\n            <div className=\"form-group\">\n              <h5>{appointmentDetails.make + \" \" + appointmentDetails.model}</h5>\n              <span>{appointmentDetails.variant ? appointmentDetails.variant+ \" | \" : ''}</span> \n              <span>{appointmentDetails.fuelType ? appointmentDetails.fuelType : ''}</span>\n            </div>\n          </div>\n        )}\n\n          <div className=\"col-lg-3\">\n            <div className=\"form-group  bolder-label\">\n            <label>Inspected By: </label>\n              <span>{appointmentDetails?.createdBy?.uid ? \" \" + appointmentDetails?.createdBy?.uid : ' N/A'}</span>\n            </div>\n          </div>\n\n          <div className=\"col-lg-3\">\n            <div className=\"form-group bolder-label\">\n              <label>Workshop Name: </label>\n              <span>{appointmentDetails?.loc?.name ? ' ' + appointmentDetails.loc?.name : ' N/A'}</span>\n            </div>\n          </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-label\">\n              <label>Assigned To: </label>\n                <span>{appointmentDetails?.assignedTo?.uid ? ' ' + appointmentDetails.assignedTo.uid : ' None'}</span>\n              </div>\n            </div>\n\n        </div>\n      \n        <div className=\"row contentWrapper\">\n          <div className=\"col-lg-3\">\n            <div className=\"form-group bolder-span\">\n              <label>Appointment ID: </label>\n              <span>{appointmentDetails?.appointmentId ? \" \" + appointmentDetails.appointmentId : \" N/A\"}</span>\n            </div>\n          </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Inspection Date: </label>\n                <span>{appointmentDetails?.formatedUpdatedAt ? \" \" + appointmentDetails.formatedUpdatedAt : \" N/A\"}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Acceptable Imperfection: </label>\n                <span>{\" \"+ accImperfection}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-3\">\n              <div className=\"form-group bolder-span\">\n              <label>Non-Acceptable Imperfection: </label>\n                <span>{\" \" + nonAccImperfection}</span>\n              </div>\n            </div>\n          \n        </div>\n        \n        <div className=\"row contentWrapper border-top\">\n          {/* <div className=\"col-lg-3\">\n            <div className=\"form-group bolder-span cost-center\">\n              <label>Price of the car: </label>\n              <span>{inspectionSummary && inspectionSummary.purchasePrice >= 0 ? inspectionSummary.purchasePrice : \" N/A\"}</span>\n            </div>\n          </div> */}\n\n            <div className=\"col-lg-4\">\n              <div className=\"form-group bolder-span cost-center\">\n              <label>Pending estimate cost: </label>\n                <span>{inspectionSummary && inspectionSummary.current && inspectionSummary.current.pending >= 0 ? inspectionSummary.current.pending : \" N/A\"}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-4\">\n              <div className=\"form-group bolder-span cost-center\">\n              <label>Approved Estimate cost: </label>\n                <span>{inspectionSummary && inspectionSummary.current && inspectionSummary.current.approved >= 0 ? inspectionSummary.current.approved : \" N/A\"}</span>\n              </div>\n            </div>\n\n            <div className=\"col-lg-4\">\n              <div className=\"form-group bolder-span cost-center\">\n              <label>Total Refurb Cost till now: </label>\n                <span>{inspectionSummary && inspectionSummary.totalCost >= 0 ? inspectionSummary.totalCost : \"N/A\"}</span>\n              </div>\n            </div>\n          \n        </div>\n\n        {/* Photo slider starts here*/}\n        <div className=\"row titleWrapper\">\n          <div className=\"col-lg-12\">\n            <div className=\"photos-row align-items-center d-flex justify-content-between\">\n              <label>Photos</label> <span>Total <strong>{allImages.length}</strong> photos</span>\n            </div>\n            {allImages && allImages.length > 0 && (\n            <div className=\"row\">\n              <div className=\"photo-container-horiz\">\n              {allImages.map((image,index)=>(\n                <div className=\"col-lg-4 photos-slider\" key={index}>\n                  <img src={image.path} alt={image.label} onClick={()=>{imageMagnifier(image)}}/>\n                </div>\n              ))}\n              </div>\n              </div>\n             )}\n          </div>\n        </div>\n        {/* Photo slider ends here*/}\n        <div className=\"row\">\n            <div className=\"col-lg-12\">\n              {appointmentDetails && appointmentDetails.data && (\n                <div className=\"cardWrapper\">\n                <span className=\"list-header\">Imperfections List {\" \" + (accImperfection + nonAccImperfection)}</span>\n                {appointmentDetails.data.checkpoints && Object.keys(appointmentDetails.data.checkpoints).map((item,index)=>{\n                  return(\n                   <>\n                   {appointmentDetails.data.qualityChecks[item]?.invalidated === false && ( \n            \n                  <div className=\"container-box-card\" key={index}>\n                    <label className=\"label-top\">{item}</label>\n                    {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.qualityChecks[item].status &&\n                     (\n                      <button className=\"checkpoint-edit-button\" \n                      onClick={e=>{editCheckpointClicked(index,item);setRejectAction(\"\");setIsConfirmationDialog(false);setDataKey(\"\");}}\n                      disabled={isCheckpointEdit === index || !iscorrectAssigned}\n                      >EDIT</button>\n                    )}\n                    {isCheckpointEdit !== index && (\n                      <div className=\"info-container\">\n                      <div className=\"row\">\n                        <div className=\"col-lg-6\">\n                          <div className=\"row\">\n                            <div className=\"col-lg-12 image-container\">\n                              {toggleViewHandlerFlag === index ? (\n                                <video width=\"100%\" height=\"300\" controls>\n                                {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].videos.\n                                map((video,index)=>{\n                                  return(   <source src={video.path} type=\"video/mp4\" key={index}/>)\n                                })}\n                                </video>\n                              ):\n                                (<>\n                                  {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].images.\n                                  map((image,index)=>{\n                                    return(<img src={image.path} alt={image.label} key={index} onClick={()=>{imageMagnifier(image)}}/>)\n                                  })}\n                                </>\n                              )}\n                            </div>\n                          </div>\n                          {appointmentDetails.data.checkpoints[item] && \n                          appointmentDetails.data.checkpoints[item].images &&\n                          appointmentDetails.data.checkpoints[item].images.length > 0 && (\n                            <button className=\"toggle-view-button\" onClick={()=>{toggleImageHandler(index)}}>Image View</button>\n                          )}\n                          {appointmentDetails.data.checkpoints[item] && \n                          appointmentDetails.data.checkpoints[item].videos &&\n                          appointmentDetails.data.checkpoints[item].videos.length > 0 && (\n                            <button className=\"toggle-view-button\" onClick={()=>{toggleVideoHandler(index)}}>Video View</button>\n                          )}\n                        </div>\n                        <div className=\"col-lg-6\">\n                          <div className=\"row\">\n                              {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].ok === true && \n                              appointmentDetails.data.checkpoints[item].choices.length > 0 &&(\n                                <div className=\"col-lg-12  light-label dark-span textTitle\">\n                                      <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                      {appointmentDetails.data.checkpoints[item].choices.map((choice)=>{\n                                        return(choice.acceptable ? choice.choice + ' | ':'')\n                                        })}\n                                    </div>\n                              )}\n\n                              {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].ok === false && \n                              appointmentDetails.data.checkpoints[item].choices.length  > 0 &&(\n                                <>\n                                <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                      <h6>Unacceptable Imperfections (shown to customer)</h6>\n                                      {appointmentDetails.data.checkpoints[item].choices.map((choice)=>{\n                                        return(!choice.acceptable ? choice.choice + ' | ' : '')\n                                        })}\n                                    </div>\n\n                                    <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                    <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                    {appointmentDetails.data.checkpoints[item].choices.map((choice)=>{\n                                      return(choice.acceptable ? choice.choice + ' | ' : '')\n                                      })}\n                                  </div>\n                                </>\n                              )}\n\n                              {appointmentDetails.data.checkpoints[item].refurbishmentChoices.length  > 0 && (\n                                <div className=\"col-lg-6\">\n                                  <div className=\"row\">\n                                    <div className=\"col-lg-6 light-label dark-span borderRight\">\n                                          <h6>Work to be done</h6>\n                                            {appointmentDetails.data.checkpoints[item].refurbishmentChoices.map((choice,index)=>{\n                                              return(\n                                                <span>{index+1 +\". \"+ choice.refurbishment + ''}</span>\n                                                )\n                                              })}\n                                    </div>\n                                    <div className=\"col-lg-6 pl20 light-label dark-span\">\n                                      \n                                      {appointmentDetails.data.estimates[item] && appointmentDetails.data.estimates[item].invalidated === false  && \n                                      appointmentDetails.data.estimates[item].labourCost >= 0\n                                      &&(\n                                        <>\n                                        <h6>Labour Cost</h6>\n                                        {appointmentDetails.data.estimates[item].labourCost}\n                                        </>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              )}\n                                {appointmentDetails.data.estimates && appointmentDetails.data.estimates[item] && appointmentDetails.data.estimates[item] && appointmentDetails.data.estimates[item].invalidated === false  &&(\n                                    <div className=\"col-lg-6\">\n                                      <div className=\"row\">\n                                          <div className=\"col-lg-6 pl20 light-label dark-span borderRight\">\n                                                  <h6>Additional Part</h6>\n                                          </div>\n                                          <div className=\"col-lg-6 pl20 light-label dark-span\">\n                                                  <h6>Part Cost</h6>\n                                          </div>\n                                       </div>\n                                    {appointmentDetails.data.estimates[item]?.parts.map((data,index)=>{\n                                      return(\n                                            <div className=\"row\" key={index}>\n                                                <div className=\"col-lg-6 pl20 light-label dark-span borderRight\">\n                                                  <span>{data.name}</span>\n                                                </div>\n                                                <div className=\"col-lg-6 pl20 light-label dark-span\">\n                                                  <span>{data.cost}</span>\n                                                </div>\n                                            </div>                                                                                   \n                                      )\n                                    })}\n                                    </div>\n                                  \n                                )} \n                          </div>      \n                            {isRejected === index ? (\n                              <div className=\"row\"> \n                                <div className=\"col-lg-12 button-container buttonContainer\">\n                                      <div className=\"form-group reject-form\">\n                                      <textarea className=\"form-control\" rows=\"3\" cols=\"50\"\n                                        placeholder=\"Please add reason for rejection\"\n                                        onChange={handleRejectionComment}\n                                        />\n                                        {showOnRejectSubmitError && (\n                                          <div className=\"text-danger\">\n                                            {comment === \"\" ? \"Please add reason for rejection\" : ''}\n                                            </div>\n                                        )}\n                                      <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={()=>{setShowOnRejectSubmitError(false);setRejectAction(\"\");setComment(\"\");}}>Cancel</button>\n                                      <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={()=>{onSubmitReject(item,index,comment,false)}}>Submit</button>\n                                      </div>                            \n                                </div>\n                              </div>\n                                ):(<>\n                                  {appointmentDetails.data.qualityChecks[item] &&\n                                  (appointmentDetails.data.qualityChecks[item].status === \"PENDING\" ||\n                                  (appointmentDetails.data.qualityChecks[item].status !== \"PENDING\" && reEdit === index))\n                                  ? (\n                                  <div className=\"col-lg-12 button-container buttonContainer\">\n                                  <button\n                                  style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                  disabled={isConfirmationDialog || !iscorrectAssigned}\n                                  onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                  setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n                                  <button \n                                  style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                  disabled={isConfirmationDialog || !iscorrectAssigned}\n                                  onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n                                  {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].ok === false && \n                                  appointmentDetails.data.checkpoints[item].choices.length  > 0 && (\n                                    <button className=\"no-work-to-be-done\"\n                                      style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                      disabled={isConfirmationDialog || !iscorrectAssigned}\n                                      onClick={(e)=>onSubmitNoWorkToBeDone(item)}>No work <br/>to be done</button>\n                                  )}                                  \n                                  </div>\n                                ) : (\n                                  <div className=\"col-lg-12 button-container buttonContainer\">\n                                    {appointmentDetails.data.qualityChecks[item] &&\n                                  appointmentDetails.data.qualityChecks[item].status !== \"PENDING\" &&\n                                    (<>\n                                      {appointmentDetails.data.qualityChecks[item].status === \"APPROVED\" &&\n                                      appointmentDetails.data.qualityChecks[item]?.reason === \"NO_WORK_TO_BE_DONE\" &&\n                                      appointmentDetails.data.qualityChecks[item].invalidated === false ? (\n                                        <>\n                                        {appointmentDetails.data.qualityChecks[item] && \n                                        appointmentDetails.data.checkpoints[item].ok === false ?\n                                        (\n                                        <>\n                                        <button\n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={isConfirmationDialog || !iscorrectAssigned}\n                                        onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                        setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n\n                                        <button className=\"no-work-to-be-done\"\n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={true}\n                                        onClick={(e)=>onSubmitNoWorkToBeDone(item)}>No work <br/>to be done</button>  \n                                         </> ):(null)}\n                                        </>\n                                      ):(null)}\n\n                                      {appointmentDetails.data.qualityChecks[item].status === \"REJECTED\" &&\n                                      appointmentDetails.data.qualityChecks[item].invalidated === false ? (\n                                        <>\n                                        {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.checkpoints[item].ok === true && \n                                        appointmentDetails.data.checkpoints[item].choices && appointmentDetails.data.checkpoints[item].choices.length ? (\n                                          <>\n                                          <button\n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={true}\n                                          onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                          setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n\n                                          <button \n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={isConfirmationDialog || !iscorrectAssigned}\n                                          onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n                                          </>\n                                        ):(null)}\n                                        {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.checkpoints[item].ok === false ?(\n                                        <>\n                                        <button\n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={true}\n                                        onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                        setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n\n                                        {appointmentDetails.data.estimates[item] &&\n                                         appointmentDetails.data.estimates[item].invalidated === false ? (\n                                          <button \n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={isConfirmationDialog || !iscorrectAssigned}\n                                          onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n                                         ):(null)}\n                                        \n                                        <button className=\"no-work-to-be-done\"\n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={isConfirmationDialog || !iscorrectAssigned}\n                                        onClick={(e)=>onSubmitNoWorkToBeDone(item)}>No work <br/>to be done</button>  \n                                         </>):(null)}\n                                      </>\n                                      ):(null)}\n\n                                      {appointmentDetails.data.qualityChecks[item].status === \"APPROVED\" &&\n                                      appointmentDetails.data.qualityChecks[item]?.reason !== \"NO_WORK_TO_BE_DONE\" &&\n                                      appointmentDetails.data.qualityChecks[item].invalidated === false ? (\n                                      <>\n                                      {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.checkpoints[item].ok === true && \n                                      appointmentDetails.data.checkpoints[item].choices && appointmentDetails.data.checkpoints[item].choices.length ? (\n                                          <>\n                                          <button\n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={isConfirmationDialog || !iscorrectAssigned}\n                                          onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                          setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n\n                                          <button \n                                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                          disabled={true}\n                                          onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n                                          </>\n                                        ):(null)}\n                                        {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.checkpoints[item].ok === false ?(\n                                        <>\n                                        <button\n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={isConfirmationDialog || !iscorrectAssigned}\n                                        onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);\n                                        setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n                                        \n                                        <button \n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={true}\n                                        onClick={(e)=>{onSubmitApprove(item,index,false);}}>Approve</button>\n\n                                        <button className=\"no-work-to-be-done\"\n                                        style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                                        disabled={isConfirmationDialog || !iscorrectAssigned}\n                                        onClick={(e)=>onSubmitNoWorkToBeDone(item)}>No work <br/>to be done</button>  \n                                         </> ):(null)}\n                                      </>):(null)}\n                                      {(\n                                        <div className=\"action-done-reset-view\">\n                                        <label>\n                                          {appointmentDetails.data.qualityChecks[item].status === \"APPROVED\" ?\n                                           `This checkpoint and estimates is \n                                           ${appointmentDetails.data.qualityChecks[item]?.reason === \"NO_WORK_TO_BE_DONE\" ? \"No work to be done\" : 'Approved'}` : \n                                           \"This checkpoint and estimates is Rejected\"}\n                                        </label>\n                                        </div>\n                                      )}\n                                      </>)\n                                    }\n                                  </div>\n                                )}\n                                  </>\n                                )\n                              }\n                        </div>\n                      </div>\n                    </div>\n                    )}\n\n                    {isCheckpointEdit === index && (\n                      <div className=\"info-container\">\n                      <div className=\"row\">\n                        <div className=\"col-lg-12\">\n                          <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                              <div className=\"row\">\n                                {appointmentDetails.data.checkpoints[item] && \n                                  (\n                                    <>\n                                    <div className=\"col-lg-12 light-label dark-span\">\n                                          <h6>Current condition</h6>\n                                          {stateToBeUpdated && stateToBeUpdated.nonAcceptImpChoices && stateToBeUpdated.nonAcceptImpChoices.choices && \n                                          stateToBeUpdated.nonAcceptImpChoices.choices.map((choice,ind)=>{\n                                            return(\n                                              <>\n                                              {choice && choice.other === false ? (\n                                                <>\n                                                <input type=\"checkbox\" checked={choice.selected} onChange={e=> changeChoicesHandler(\"nonAccept\",ind)}/>\n                                                 <span> {choice.choice}</span><br/>\n                                                </>\n                                              ):( null\n                                                // <>\n                                                // <input type=\"text\" className=\"form-control\" value={choice.choice} \n                                                // onChange={e=> changeChoicesHandler(\"modify\",ind,e.target.value)}\n                                                // /><br/>\n                                                // </>\n                                              )}\n                                              \n                                              {masterData && masterData.checkpoints && masterData.checkpoints.map((ChildrenItem)=>{\n                                                return (<>\n                                                {item === ChildrenItem.key && (\n                                                  <>\n                                                  {ChildrenItem.choices && ChildrenItem.choices.map((choice2)=>{\n                                                    return(\n                                                      <>\n                                                      {choice2 && choice2.name === choice.choice && choice.selected && !choice.other && choice2.type === \"relative\" && (\n                                                        <div className=\"checkpoint-edit-options\">\n                                                        <input type=\"radio\" name={\"imperfectionType\"+choice.choice} \n                                                        onChange={e=> changeImperfectionType(choice,ind,\"acceptable\")} \n                                                        checked={choice.acceptable} value=\"acceptable\"/>\n                                                        <span className=\"large-text\"> Acceptable Imperfection (not shown to customer)</span><br/>\n                                                        {choice2.acceptable && choice2.acceptable.map((info,index)=>{\n                                                          return(\n                                                            <>\n                                                            <span className=\"small-text\">{index + 1} {info}</span><br/>\n                                                            </>\n                                                          )\n                                                        })}\n                                                        <br/>        \n                                                        <input type=\"radio\" name={\"imperfectionType\"+choice.choice} \n                                                        onChange={e=> changeImperfectionType(choice,ind,\"non-acceptable\")} \n                                                        checked={!choice.acceptable} value=\"non-acceptable\"/>\n                                                        <span className=\"large-text\"> Non-Acceptable Imperfection (shown to customer)</span><br/>\n                                                        {choice2.acceptable && choice2.nonAcceptable.map((info,index)=>{\n                                                          return(\n                                                            <>\n                                                            <span className=\"small-text\">{index + 1} {info}</span><br/>\n                                                            </>\n                                                          )\n                                                        })}\n                                                      </div>\n                                                      )}\n                                                      </>\n                                                    )\n                                                  })}\n                                                  </>\n                                                )}\n                                                </>)\n                                              })}\n                                              </>\n                                            )\n                                            })}\n                                        <div className=\"row\">\n                                          <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                            <br/>\n                                            <span className=\"small-text\">Others : </span><br/>\n                                            <input type=\"text\" className=\"form-control\"\n                                            value={otherImperfectionEntered} \n                                            onChange={e=> otherImperfection(e.target.value)}/>\n                                          </div>\n\n                                          {masterData && masterData.checkpoints && masterData.checkpoints.map((masterData)=>{\n                                            return(\n                                              <>\n                                              {item === masterData.key && (\n                                                <>\n                                                {masterData && masterData.noImperfectionChoices && masterData.noImperfectionChoices.map((option)=>{\n                                                  return(\n                                                    <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                                    <input type=\"radio\" name=\"imperfectionType\" checked={isOkNoImperfSelected === option.name} value={option.name} onChange={e=> isNotApplicableSelected(e.target.value)}/>\n                                                    <span>{\" \" + option.name}</span>\n                                                    </div>\n                                                  )\n                                                })}\n                                                </>\n                                              )}\n                                              </>\n                                            )\n                                          })}\n                                        </div>\n                                        </div>\n                                    </>\n                                  )}\n                              </div>\n                            </div>\n                            <div className=\"col-lg-6\">\n                              <div className=\"row\">\n                                   {appointmentDetails.data.checkpoints[item] && (\n                                    <div className=\"row ml-2\">\n                                      <div className=\"col-lg-12 light-label dark-span2\">\n                                          <h6>Work to be done</h6>\n                                              {stateToBeUpdated && stateToBeUpdated.reburbChoices &&  \n                                              stateToBeUpdated.reburbChoices.map((choice,ind)=>{\n                                                return(\n                                                  <>\n                                                  {choice.other === false ? (\n                                                    <>\n                                                    <input type=\"checkbox\" checked={choice.selected} \n                                                    onChange={e=> changeChoicesHandler(\"reburbChoice\",ind)}/>\n                                                    <span> {choice.refurbishment}</span> <br/>\n                                                    </>\n                                                  ):(\n                                                    null\n                                                    // <>\n                                                    // <input type=\"text\" className=\"form-control mb-2\" name={choice.refurbishment+ind} value={choice.refurbishment} \n                                                    // onChange={e=> changeChoicesHandler(\"reburbChoiceModify\",ind,e.target.value)}/>\n                                                    // </>\n                                                  )}                                                  \n                                                  </>\n                                                )\n                                              })}\n                                        </div>\n                                        <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                            <br/>\n                                            <span className=\"small-text\">Others : </span><br/>\n                                            <input type=\"text\" className=\"form-control\"\n                                            value={otherWorkToBeDone} \n                                            onChange={e=> otherWorktoBeDone(e.target.value)}/>\n                                          </div>\n                                      </div>\n                                      \n                                  )}\n                              </div>\n                            </div>\n                          </div>      \n                          <div className=\"row\">\n                            <div className=\"col-lg-12 button-container buttonContainer text-center m-0 p-0\">\n                              <div className=\"reject-form\">\n                              <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={()=>{setIsEditCheckpoint(\"\"); checkpointEditCancled(item)}}>Cancel</button>\n                              <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={e=>updateCheckpointDataHandler(item)}>Save</button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    )}\n                    \n                    {/* Last inspection data */}\n                    <div className=\"row inspectionData\">\n                      <div className=\"col-lg-12\">\n                      {lastInspectionData && lastInspectionData.data  && false && (\n                        <div className=\"container-box\">\n                      {Object.keys(lastInspectionData.data.qualityChecks).map((inspectionItem,index2)=>{\n                        return (\n                          <div>\n                            {inspectionItem === item && lastInspectionData.data.qualityChecks[inspectionItem]?.invalidated === false && (\n                          <div className=\"container-box-card  toggle-info-container\" key={index2}>\n                            <div className=\"lastinspection-header\">\n                              <span className=\"list-header-first\" onClick={() => toggleLastInspectionHandler(index2)}>Last Inspection Data</span>\n                              <span className=\"list-header2 list-header-first\">Workshop : {lastInspectionData?.loc?.name ? \" \" + lastInspectionData.loc.name : \" N/A\"} </span>\n                              <span className=\"list-header2 list-header-first\">Date: {\" \" + lastInspectionData.formatedUpdatedAt} </span>\n                              <span className=\"list-header2 list-header-first\">Time: {\" \" + lastInspectionData.formatedUpdateAtTime} </span>\n                            </div>\n                          \n                          <div className=\"info-container\" hidden={toggleLastInspection !== index2 || !showHideToggler}>\n                          <label className=\"label-top\">{item}</label>\n                            <div className=\"row\">\n                              <div className=\"col-lg-6\">\n                                <div className=\"row\">\n                                  <div className=\"col-lg-12 image-container\">\n                                        { mediaType === \"video\" ? (\n                                          <video width=\"100%\" height=\"300\" controls>\n                                          {lastInspectionData.data.checkpoints[item] && lastInspectionData.data.checkpoints[item].videos.\n                                          map((video,index)=>{\n                                            return(   <source src={video.path} type=\"video/mp4\" key={index}/>)\n                                          })}\n                                          </video>\n                                        ):\n                                          (<>\n                                            {lastInspectionData.data.checkpoints[item] && lastInspectionData.data.checkpoints[item].images.\n                                            map((image,index)=>{\n                                              return(<img src={image.path} alt={image.label} key={index} onClick={()=>{imageMagnifier(image)}}/>)\n                                            })}\n                                          </>\n                                        )}\n                                  </div>\n                                </div>\n                                {lastInspectionData.data.checkpoints[inspectionItem] && \n                                lastInspectionData.data.checkpoints[inspectionItem].images &&\n                                lastInspectionData.data.checkpoints[inspectionItem].images.length > 0 && (\n                                  <button className=\"toggle-view-button\" onClick={()=>{toggleImageHandler2(index2,\"image\")}}>Image View</button>\n                                )}\n                                {lastInspectionData.data.checkpoints[inspectionItem] && \n                                lastInspectionData.data.checkpoints[inspectionItem].videos &&\n                                lastInspectionData.data.checkpoints[inspectionItem].videos.length > 0 && (\n                                  <button className=\"toggle-view-button\" onClick={()=>{toggleVideoHandler2(index2,\"video\")}}>Video View</button>\n                                )}\n                              </div>\n                              <div className=\"col-lg-6\">\n                                <div className=\"row\">\n                                    {lastInspectionData.data.checkpoints[inspectionItem] && lastInspectionData.data.checkpoints[inspectionItem].ok === true && (\n                                      <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                            <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                            {lastInspectionData.data.checkpoints[inspectionItem].choices.map((choice)=>{\n                                              return(choice.acceptable ? choice.choice + ' | ' : '')                                              \n                                              })}\n                                          </div>\n                                    )}\n\n                                    {lastInspectionData.data.checkpoints[inspectionItem] && lastInspectionData.data.checkpoints[inspectionItem].ok === false && (\n                                      <>\n                                      <div className=\"col-lg-12  light-label dark-span textTitle\">\n                                            <h6>Unacceptable Imperfections (shown to customer)</h6>\n                                            {lastInspectionData.data.checkpoints[item].choices.map((choice,ind,arr)=>{\n                                              return(!choice.acceptable ? choice.choice + ' | ' : '')\n                                              })}\n                                          </div>\n\n                                          <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                          <h6>Acceptable Imperfections (not shown to customer)</h6>\n                                          {lastInspectionData.data.checkpoints[item].choices.map((choice,ind,arr)=>{\n                                            return(choice.acceptable ? choice.choice + ' | ' : '')\n                                            })}\n                                        </div>\n                                    </>\n                                    )}\n\n                                    {lastInspectionData.data.checkpoints[inspectionItem].refurbishmentChoices.length  > 0 && (\n                                      \n\n                                      <>\n                                      <div className=\"col-lg-12 card light-label dark-span\">\n                                            <h6>Work to be done</h6>\n                                            {lastInspectionData.data.checkpoints[inspectionItem].refurbishmentChoices.map((choice,index)=>{\n                                              return(\n                                                <span>{index+1 +\". \"+ choice.refurbishment + ' '}</span>\n                                                  )\n                                              })}\n                                             \n                                            {lastInspectionData.data.estimates[inspectionItem] && lastInspectionData.data.estimates[inspectionItem].invalidated === false \n                                            && lastInspectionData.data.estimates[inspectionItem].labourCost >= 0 \n                                            (\n                                              <>\n                                              <h6>Labour Cost</h6>\n                                              {lastInspectionData.data.estimates[inspectionItem].labourCost}\n                                              </>\n                                            )}\n                                      </div>\n                                      {lastInspectionData.data.estimates && lastInspectionData.data.estimates[inspectionItem] && \n                                      lastInspectionData.data.estimates[inspectionItem].invalidated === false &&(\n                                        <div className=\"row\">\n                                          <div className=\"col-lg-12\">\n                                          {lastInspectionData.data.estimates[inspectionItem]?.parts.map((data,index)=>{\n                                            return(\n                                                  <div className=\"float-div\" key={index}>\n                                                      <div>\n                                                      <h6>Additional Part</h6>\n                                                      <span>{data.name}</span>\n                                                      </div> \n\n                                                      <div>\n                                                      <h6>Part Cost</h6>\n                                                      <span>{data.cost}</span>\n                                                      </div>                                                      \n                                                    </div>                                                                                   \n                                            )\n                                          })}\n                                          </div>\n                                      </div>  \n                                      )}\n                                      </>\n                                    )}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          </div>\n                          )}\n                          </div>\n                      )}\n                      )}\n                        </div>\n                      )}\n                      </div>\n                    </div>\n                        {/* Last inspection section ends*/}\n                  </div>\n                )}\n                </>\n                )                  \n                })}\n\n                {/* Change status starts here */}\n                {appointmentDetails.data.checkpoints && Object.keys(appointmentDetails.data.checkpoints).map((item,index)=>{\n                  return(\n                   <>\n                   {(appointmentDetails.data.qualityChecks[item]?.invalidated === true || appointmentDetails.data.qualityChecks[item] === undefined) &&( \n                  <div className=\"container-box-card\" key={index}>\n                    <label className=\"label-top\">{item}</label>\n                    {/* {appointmentDetails.data.qualityChecks[item] && appointmentDetails.data.qualityChecks[item].status &&\n                    appointmentDetails.data.qualityChecks[item].status === \"PENDING\" && ( */}\n                      <button className=\"checkpoint-edit-button\" \n                      onClick={e=>editCheckpointClicked(index,item)}\n                      disabled={isCheckpointEdit === index || !iscorrectAssigned}\n                      >EDIT</button>\n                    {/* )} */}\n                    <div className=\"row\">\n                    {isCheckpointEdit === index ? (\n                        <div className=\"col-lg-12\">\n                          <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                              <div className=\"row\">\n                                {appointmentDetails.data.checkpoints[item] && \n                                  (\n                                    <>\n                                    <div className=\"col-lg-12 light-label dark-span\">\n                                          <h6>Current condition</h6>\n                                          {stateToBeUpdated && stateToBeUpdated.nonAcceptImpChoices && stateToBeUpdated.nonAcceptImpChoices.choices && \n                                          stateToBeUpdated.nonAcceptImpChoices.choices.map((choice,ind)=>{\n                                            return(\n                                              <>\n                                              {choice && choice.other === false ? (\n                                                <>\n                                                <input type=\"checkbox\" checked={choice.selected} onChange={e=> changeChoicesHandler(\"nonAccept\",ind)}/>\n                                                 <span> {choice.choice}</span><br/>\n                                                </>\n                                              ):( null\n                                                // <>\n                                                // <input type=\"text\" className=\"form-control\" value={choice.choice} \n                                                // onChange={e=> changeChoicesHandler(\"modify\",ind,e.target.value)}\n                                                // /><br/>\n                                                // </>\n                                              )}\n                                              \n                                              {masterData && masterData.checkpoints && masterData.checkpoints.map((ChildrenItem)=>{\n                                                return (<>\n                                                {item === ChildrenItem.key && (\n                                                  <>\n                                                  {ChildrenItem.choices && ChildrenItem.choices.map((choice2)=>{\n                                                    return(\n                                                      <>\n                                                      {choice2 && choice2.name === choice.choice && choice.selected && !choice.other && choice2.type === \"relative\" && (\n                                                        <div className=\"checkpoint-edit-options\">\n                                                        <input type=\"radio\" name={\"imperfectionType\"+choice.choice} onChange={e=> changeImperfectionType(choice,ind,\"acceptable\")} checked={choice.acceptable} value=\"acceptable\"/>\n                                                        <span className=\"large-text\"> Acceptable Imperfection (not shown to customer)</span><br/>\n                                                        {choice2.acceptable && choice2.acceptable.map((info,index)=>{\n                                                          return(\n                                                            <>\n                                                            <span className=\"small-text\">{index + 1} {info}</span><br/>\n                                                            </>\n                                                          )\n                                                        })}\n                                                        <br/>        \n                                                        <input type=\"radio\" name={\"imperfectionType\"+choice.choice} onChange={e=> changeImperfectionType(choice,ind,\"non-acceptable\")} checked={!choice.acceptable} value=\"non-acceptable\"/>\n                                                        <span className=\"large-text\"> Non-Acceptable Imperfection (shown to customer)</span><br/>\n                                                        {choice2.acceptable && choice2.nonAcceptable.map((info,index)=>{\n                                                          return(\n                                                            <>\n                                                            <span className=\"small-text\">{index + 1} {info}</span><br/>\n                                                            </>\n                                                          )\n                                                        })}\n                                                      </div>\n                                                      )}\n                                                      </>\n                                                    )\n                                                  })}\n                                                  </>\n                                                )}\n                                                </>)\n                                              })}\n                                              </>\n                                            )\n                                            })}\n                                        <div className=\"row\">\n                                          <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                            <br/>\n                                            <span className=\"small-text\">Others : </span><br/>\n                                            <input type=\"text\" className=\"form-control\"\n                                            value={otherImperfectionEntered} \n                                            onChange={e=> otherImperfection(e.target.value)}/>\n                                          </div>\n\n                                          {masterData && masterData.checkpoints && masterData.checkpoints.map((masterData)=>{\n                                            return(\n                                              <>\n                                              {item === masterData.key && (\n                                                <>\n                                                {masterData && masterData.noImperfectionChoices && masterData.noImperfectionChoices.map((option)=>{\n                                                  return(\n                                                    <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                                    <input type=\"radio\" name=\"imperfectionType\" checked={isOkNoImperfSelected === option.name} value={option.name} onChange={e=> isNotApplicableSelected(e.target.value)}/>\n                                                    <span>{\" \" + option.name}</span>\n                                                    </div>\n                                                  )\n                                                })}\n                                                </>\n                                              )}\n                                              </>\n                                            )\n                                          })}\n                                        </div>\n                                        </div>\n                                    </>\n                                  )}\n                              </div>\n                            </div>\n                            <div className=\"col-lg-6\">\n                              <div className=\"row\">\n                                   {appointmentDetails.data.checkpoints[item] && (\n                                    <div className=\"row ml-2\">\n                                      <div className=\"col-lg-12 light-label dark-span2\">\n                                          <h6>Work to be done</h6>\n                                              {stateToBeUpdated && stateToBeUpdated.reburbChoices &&  \n                                              stateToBeUpdated.reburbChoices.map((choice,ind)=>{\n                                                return(\n                                                  <>\n                                                  {choice.other === false ? (\n                                                    <>\n                                                    <input type=\"checkbox\" checked={choice.selected} \n                                                    onChange={e=> changeChoicesHandler(\"reburbChoice\",ind)}/>\n                                                    <span> {choice.refurbishment}</span> <br/>\n                                                    </>\n                                                  ):(\n                                                    null\n                                                    // <>\n                                                    // <input type=\"text\" className=\"form-control mb-2\" name={choice.refurbishment+ind} value={choice.refurbishment} \n                                                    // onChange={e=> changeChoicesHandler(\"reburbChoiceModify\",ind,e.target.value)}/>\n                                                    // </>\n                                                  )}                                                  \n                                                  </>\n                                                )\n                                              })}\n                                        </div>\n                                        <div className=\"col-lg-12 light-label dark-span textTitle\">\n                                            <br/>\n                                            <span className=\"small-text\">Others : </span><br/>\n                                            <input type=\"text\" className=\"form-control\"\n                                            value={otherWorkToBeDone} \n                                            onChange={e=> otherWorktoBeDone(e.target.value)}/>\n                                          </div>\n                                      </div>\n                                      \n                                  )}\n                              </div>\n                            </div>\n                          </div>      \n                          <div className=\"row\">\n                            <div className=\"col-lg-12 button-container buttonContainer text-center m-0 p-0\">\n                              <div className=\"reject-form\">\n                              <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={()=>{setIsEditCheckpoint(\"\"); checkpointEditCancled(item)}}>Cancel</button>\n                              <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={e=>updateCheckpointDataHandler(item)}>Save</button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                    ):(\n                      <>\n                      <div className=\"col-lg-6\">\n                          <div className=\"row\">\n                            <div className=\"col-lg-12 image-container\">\n                              {toggleViewHandlerFlag === index ? (\n                                <video width=\"100%\" height=\"300\" controls>\n                                {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].videos.\n                                map((video,index)=>{\n                                  return(   <source src={video.path} type=\"video/mp4\" key={index}/>)\n                                })}\n                                </video>\n                              ):\n                                (<>\n                                  {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].images.\n                                  map((image,index)=>{\n                                    return(<img src={image.path} alt={image.label} key={index} onClick={()=>{imageMagnifier(image)}}/>)\n                                  })}\n                                </>\n                              )}\n                            </div>\n                          </div>\n                          {appointmentDetails.data.checkpoints[item] && \n                          appointmentDetails.data.checkpoints[item].images &&\n                          appointmentDetails.data.checkpoints[item].images.length > 0 && (\n                            <button className=\"toggle-view-button\" onClick={()=>{toggleImageHandler(index)}}>Image View</button>\n                          )}\n                          {appointmentDetails.data.checkpoints[item] && \n                          appointmentDetails.data.checkpoints[item].videos &&\n                          appointmentDetails.data.checkpoints[item].videos.length > 0 && (\n                            <button className=\"toggle-view-button\" onClick={()=>{toggleVideoHandler(index)}}>Video View</button>\n                          )}\n                        </div>\n                    <div className=\"col-lg-6\"> \n                    {appointmentDetails.data.checkpoints[item] && appointmentDetails.data.checkpoints[item].noImperfectionChoices.length &&\n                          appointmentDetails.data.checkpoints[item].noImperfectionChoices && isCheckpointEdit !== index ? (\n                            <div>{appointmentDetails.data.checkpoints[item].noImperfectionChoices[0]}</div>\n                          ):(null)} \n                    {isRejected === index ? (\n                      <div className=\"col-lg-12 button-container buttonContainer\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12 form-group reject-form\">\n                            <textarea className=\"form-control\" rows=\"3\" cols=\"50\"\n                              placeholder=\"Please add reason for rejection\"\n                              onChange={handleRejectionComment}\n                              />\n                              {showOnRejectSubmitError && (\n                                <div className=\"text-danger\">\n                                  {comment === \"\" ? \"Please add reason for rejection\" : ''}\n                                  </div>\n                              )}\n                            <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={()=>{setShowOnRejectSubmitError(false);setRejectAction(\"\");setComment(\"\")}}>Cancel</button>\n                            <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} onClick={()=>{onSubmitReject(item,index,comment,true)}}>Submit</button>\n                            </div>\n                        </div>                                \n                      </div>\n                        ):(<>{ !actionArray.includes(index) ? (\n                          <div className=\"col-lg-12 button-container buttonContainer\">\n                          <button\n                          style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}}\n                          disabled={!iscorrectAssigned || isConfirmationDialog}\n                          onClick={()=>{setRejectAction(index);setIsConfirmationDialog(false);setIsEditCheckpoint(\"\");setDataKey(\"\");rejectHandler(item)}}>Reject</button>\n                          </div>\n                        ) : (\n                          <div className=\"col-lg-12 button-container buttonContainer\">\n                                    {appointmentDetails.data.qualityChecks[item] &&\n                                  appointmentDetails.data.qualityChecks[item].status !== \"PENDING\" &&\n                                    (<>\n                                      {(\n                                        <div className=\"action-done-reset-view\">\n                                        <label>\n                                          {appointmentDetails.data.qualityChecks[item].status === \"APPROVED\" ? `This checkpoint and estimates is ${appointmentDetails.data.qualityChecks[item]?.reason === \"NO_WORK_TO_BE_DONE\" ? \"No work to be done\" : 'Approved'}` : \"This checkpoint and estimates is Rejected\"}\n                                        </label>\n                                        {/* {appointmentDetails.data.qualityChecks[item].status === \"REJECTED\" && (\n                                        <button onClick={() => qcActionResetHandler(item,index,false)}>Reset</button>\n                                        )} */}\n                                        </div>\n                                      )}\n                                      </>)\n                                    }\n                                  </div>\n                        )}\n                          </>\n                        )\n                      }\n                      </div>\n                      </>\n                    )}\n                    </div>\n                  </div>\n                )}\n                </>\n                )                  \n                })}\n                {/* Change status ends here */}\n                \n                    <button disabled={isConfirmationDialog} style={{backgroundColor: isConfirmationDialog ? 'grey' : '#F37500'}} className=\"submit-all-ac-actions submitAction\" onClick={() => submitAllQcAction()}>Submit All QC Actions</button>\n              </div>\n              )}\n            </div>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n};\n\nconst mapDispatchToProps = {\n    getWorkshopListingDetails,\n    approveQualityChecks,\n    getInspectionSummary\n};\n\nconst mapStateToProps = state => {\n  return {\n    isProcessing: state.workshopReducer.isProcessing,\n    showToaster: state.commonReducer.showToaster,\n    toasterMessage: state.commonReducer.toasterMessage,\n    toasterType: state.commonReducer.toasterType,\n    listingDetails: state.workshopReducer.qaListingDetails,\n    lastInspectionData:state.workshopReducer.lastInspectionData,\n    qaTopImagesKeys:state.workshopReducer.qaTopImagesKeys,\n    inspectionSummary:state.workshopReducer.inspectionSummary\n  };\n};\n\nexport default connect(mapStateToProps,\n  mapDispatchToProps,)(WorkshopQaDetailsComponent);\n","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/actions/workshopQaManagement/workshopQaManagement.action.js",["493","494"],"import {GET_WORKSHOP_QA_LISTING,GET_WORKSHOP_QA_LISTING_DETAILS,GET_WORKSHOP_QA_LISTING_COUNT,GET_APPOINTMENT_SEARCH_RESULT,\n        ASSIGN_APPOINTMENT_ID,LOADER_HANDLER,APPROVE_REJECT_QUALITY_CHECK,GET_LAST_INSPECTION_DATA,\n         GET_MASTER_DATA_QC_IMAGES_KEYS,GET_YARD_LISITNG_DATA,GET_YARD_LISITNG_DETAILS_DATA,\n         GET_INSPECTION_HISTORY_LISTING,GET_INSPECTION_HISTORY_LISTING_DETAILS,GET_MASTER_DATA_CHECKPOINTS,\n         GET_ESTIMATE_LISTING, GET_ESTIMATE_LISTING_DETAIL,GET_INSPECTION_SUMMARY   \n        } from './workshopQaManagement.actionType';\nimport axiosService from '../../../inits/axios';\nimport { convertObjectToParams } from './../../../utils/utils';\nimport { config } from './../../../utils/constants/api.constants';\nimport { setToasterMessage } from './../commonAction/common.action';\nimport {AlertType} from './../../../utils/constants/values.constants';\n\nexport const getInspectionSummary = (params = {}) => async(dispatch)=>{\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspectionSummary + '/' + convertObjectToParams(params);\n  try{\n    const data = await axiosService.get(url);\n    dispatch({type:GET_INSPECTION_SUMMARY,payload:data.data});\n  }catch(e){\n    dispatch(setToasterMessage({\n      toasterMessage: e && e.response && e.response.data && e.response.data.message ? e.response.data.message : \"No images found\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n  }));\n  }\n}\n\nexport const getMasterDataQaImageKeys = (params = {}) => async(dispatch)=>{\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.catalog + config.api.workshop.master;\n  try{\n    const data = await axiosService.get(url);\n    dispatch({type:GET_MASTER_DATA_QC_IMAGES_KEYS,payload:data.data.qaTopImages});\n    dispatch({type:GET_MASTER_DATA_CHECKPOINTS,payload:data.data});\n  }\n  catch(e){\n    dispatch(setToasterMessage({\n      toasterMessage: \"No images found\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n  }));\n  }\n}\n\nexport const searchAppointment = (searchValue,inspectionTypeSearch=\"\") => async(dispatch)=>{\n  dispatch({type:LOADER_HANDLER});\n    let url = config.api.workshop.host + config.api.workshop.inspection+ '/' + \n    `${inspectionTypeSearch === \"inspectionhistory\" ? config.api.workshop.inspectionTypeInspectionHistory + \"&version=all\" : \n    [inspectionTypeSearch === \"yard\" ? config.api.workshop.inspectionTypeYard : \n    [inspectionTypeSearch === \"estimate\" ? config.api.workshop.estimates : \n    [inspectionTypeSearch === \"workorder\" ? config.api.workshop.workorder :\n     config.api.workshop.inspectionType]]]}` + \n    \"&appointmentIdRegex=\"+ encodeURIComponent(searchValue);\n    try {\n        const data = await axiosService.get(url);\n        if(inspectionTypeSearch === \"yard\"){\n          dispatch({ type: GET_YARD_LISITNG_DATA, payload: data.data });\n        }else if(inspectionTypeSearch === \"inspectionhistory\"){\n          dispatch({ type: GET_INSPECTION_HISTORY_LISTING, payload: data.data });\n        }else if(inspectionTypeSearch === \"estimate\"){\n          dispatch({ type: GET_ESTIMATE_LISTING, payload: data.data });\n        }else if(inspectionTypeSearch === \"workorder\"){\n          dispatch({ type: GET_ESTIMATE_LISTING, payload: data.data });\n        }\n        else{\n          dispatch({ type: GET_APPOINTMENT_SEARCH_RESULT, payload: data.data });\n        }\n    } catch (e) {\n        dispatch(setToasterMessage({\n            toasterMessage: \"Something went wrong\",\n            showToaster: true,\n            toasterType: AlertType.ERROR\n        }));\n    }\n}\n\nexport const getYardListing = (params =  {}) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection+ '/' + config.api.workshop.inspectionTypeYard + \n  `${params && params.page && params.size ? \"&offset=\"+ +params.page * +params.size+\"&limit=\"+params.size : ''}`;\n  // `${params && params.page && params.size ? \"inspectionStatus=ESTIMATED&offset=\"+params.page+\"&limit=\"+params.size : ''}`; // for production\n  try {\n      const data = await axiosService.get(url);\n      dispatch({ type: GET_YARD_LISITNG_DATA, payload: data.data });\n  } catch (e) {\n      dispatch(setToasterMessage({\n          toasterMessage: \"Something went wrong\",\n          showToaster: true,\n          toasterType: AlertType.ERROR\n      }));\n  }\n}\n\nexport const getInspectionHistoryListing = (params =  {}) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection+ '/' + config.api.workshop.inspectionTypeInspectionHistory + \n  \"&version=all\" + `${params && params.page && params.size ? \"&offset=\"+ +params.page * +params.size+\"&limit=\"+params.size : ''}`;\n  // `${params && params.page && params.size ? \"inspectionStatus=ESTIMATED&offset=\"+params.page+\"&limit=\"+params.size : ''}`; // for production\n  try {\n      const data = await axiosService.get(url);\n      dispatch({ type: GET_INSPECTION_HISTORY_LISTING, payload: data.data });\n  } catch (e) {\n      dispatch(setToasterMessage({\n          toasterMessage: \"Something went wrong\",\n          showToaster: true,\n          toasterType: AlertType.ERROR\n      }));\n  }\n}\n\nexport const getEstimatesListing = (params={},locations) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection+ '/' + config.api.workshop.estimates\n  + \"&locationCode=\" + locations + \n  `${params && params.page && params.size ? \"&offset=\"+ +params.page * +params.size+\"&limit=\"+params.size : ''}`;\n  try {\n      const data = await axiosService.get(url);\n      dispatch({ type: GET_ESTIMATE_LISTING, payload:data.data});\n  } catch (e) {\n      dispatch(setToasterMessage({\n          toasterMessage: \"Something went wrong\",\n          showToaster: true,\n          toasterType: AlertType.ERROR\n      }));\n  }\n}\n\nexport const getEstimatesListingCount = (searchValue = \"\",locations = \"\") => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + config.api.workshop.count +\n  `${\"?inspectionType=CATALOG&inspectionStatus=DONE,REJECTED&locationCode=\"+locations}`\n   + `${searchValue !== \"%\" && searchValue !== \"\" ? \"&appointmentIdRegex=\"+ encodeURIComponent(searchValue) : ''}`;\n  try {\n      const data = await axiosService.get(url);\n      dispatch({ type: GET_WORKSHOP_QA_LISTING_COUNT, payload: data.data });\n  } catch (e) {\n      dispatch(setToasterMessage({\n          toasterMessage: \"Something went wrong\",\n          showToaster: true,\n          toasterType: AlertType.ERROR\n      }));\n  }\n}\n\nexport const getWorkorderListingCount = (searchValue = \"\",locations = \"\") => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + config.api.workshop.count +\n  `${\"?inspectionType=CATALOG&inspectionStatus=APPROVED&locationCode=\"+locations}`\n   + `${searchValue !== \"%\" && searchValue !== \"\" ? \"&appointmentIdRegex=\"+ encodeURIComponent(searchValue) : ''}`;\n  try {\n      const data = await axiosService.get(url);\n      dispatch({ type: GET_WORKSHOP_QA_LISTING_COUNT, payload: data.data });\n  } catch (e) {\n      dispatch(setToasterMessage({\n          toasterMessage: \"Something went wrong\",\n          showToaster: true,\n          toasterType: AlertType.ERROR\n      }));\n  }\n}\n\nexport const getWorkorderListing = (params={},locations) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection+ '/' + config.api.workshop.workorder\n  + \"&locationCode=\" + locations + \n  `${params && params.page && params.size ? \"&offset=\"+ +params.page * +params.size+\"&limit=\"+params.size : ''}`;\n  try {\n      const data = await axiosService.get(url);\n      dispatch({ type: GET_ESTIMATE_LISTING, payload: data.data });\n  } catch (e) {\n      dispatch(setToasterMessage({\n          toasterMessage: \"Something went wrong\",\n          showToaster: true,\n          toasterType: AlertType.ERROR\n      }));\n  }\n}\n\nexport const getInspectionHistoryListingDetail = (params = {}) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + '/' + convertObjectToParams(params);\n  try{\n    const data = await axiosService.get(url);\n    dispatch({type:GET_INSPECTION_HISTORY_LISTING_DETAILS, payload:data && data.data});\n\n  }catch (e){\n    dispatch(setToasterMessage({\n      toasterMessage: \"Something went wrong\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n  }));\n  }\n}\n\nexport const getYardListingDetails = (params = {}) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + '/' + convertObjectToParams(params);\n  try{\n    const data = await axiosService.get(url);\n    dispatch({type:GET_YARD_LISITNG_DETAILS_DATA, payload:data && data.data});\n\n  }catch (e){\n    dispatch(setToasterMessage({\n      toasterMessage: \"Something went wrong\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n  }));\n  }\n}\n\n\nexport const getEstimateDetails = (params = {}) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + '/' + convertObjectToParams(params);\n  try{\n    const data = await axiosService.get(url);\n    dispatch({type:GET_ESTIMATE_LISTING_DETAIL, payload:data && data.data});\n\n  }catch (e){\n    dispatch(setToasterMessage({\n      toasterMessage: \"Something went wrong\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n  }));\n  } \n}\n\nexport const getWorkorderDetails = (params = {}) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + '/' + convertObjectToParams(params);\n  try{\n    const data = await axiosService.get(url);\n    dispatch({type:GET_ESTIMATE_LISTING_DETAIL, payload:data && data.data});\n\n  }catch (e){\n    dispatch(setToasterMessage({\n      toasterMessage: \"Something went wrong\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n  }));\n  } \n}\n\n\n\nexport const getWorkshopListing = (params =  {}) => async (dispatch) => {\n    dispatch({type:LOADER_HANDLER});\n    let url = config.api.workshop.host + config.api.workshop.inspection+ '/' + config.api.workshop.inspectionType + \n    `${params && params.page && params.size ? \"&offset=\"+ +params.page * +params.size+\"&limit=\"+params.size : ''}`;\n    // `${params && params.page && params.size ? \"inspectionStatus=ESTIMATED,INSPECTED&offset=\"+params.page+\"&limit=\"+params.size : ''}`; // for production\n    try {\n        const data = await axiosService.get(url);\n        dispatch({ type: GET_WORKSHOP_QA_LISTING, payload: data.data });\n    } catch (e) {\n        dispatch(setToasterMessage({\n            toasterMessage: \"Something went wrong\",\n            showToaster: true,\n            toasterType: AlertType.ERROR\n        }));\n    }\n}\n\nexport const getLastInspectionData = (params = {}) => async (dispatch) => {\n  let url = config.api.workshop.host + config.api.workshop.inspection + \"/\" + convertObjectToParams(params);\n  try{\n    const data = await axiosService.get(url);\n    dispatch({type:GET_LAST_INSPECTION_DATA, payload:data.data});\n  }catch(e){\n    dispatch(setToasterMessage({\n      toasterMessage: \"Something went wrong\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n    }));\n  }\n}\n\nexport const getWorkshopListingCount = (inspectionTypeCount=\"\",searchValue = \"\") => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + config.api.workshop.count +\n  `${inspectionTypeCount === \"yard\" ? \"?inspectionType=CATALOG&inspectionStatus=ESTIMATED&locationType=FULFILLMENT_CENTER\" : [\n    inspectionTypeCount === \"inspectionhistory\" ?  \"?inspectionType=CATALOG&inspectionStatus=DONE,ESTIMATED,APPROVED,REJECTED&version=all\" :\n    \"?inspectionType=CATALOG&inspectionStatus=ESTIMATED&locationType=SERVICE_CENTER\"\n  ]}` + `${searchValue !== \"%\" && searchValue !== \"\" ? \"&appointmentIdRegex=\"+ encodeURIComponent(searchValue) : ''}`;\n  try {\n      const data = await axiosService.get(url);\n      dispatch({ type: GET_WORKSHOP_QA_LISTING_COUNT, payload: data.data });\n  } catch (e) {\n      dispatch(setToasterMessage({\n          toasterMessage: \"Something went wrong\",\n          showToaster: true,\n          toasterType: AlertType.ERROR\n      }));\n  }\n}\n\nexport const getWorkshopListingDetails = (params = {}) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + '/' + convertObjectToParams(params);\n  try{\n    const data = await axiosService.get(url);\n    dispatch({type:GET_WORKSHOP_QA_LISTING_DETAILS, payload:data && data.data});\n\n  }catch (e){\n    dispatch(setToasterMessage({\n      toasterMessage: \"Something went wrong\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n  }));\n  }\n}\n\nexport const assignAppointmentId = (appointmentId,version,path) => async (dispatch) =>{\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.catalog + config.api.workshop.assign + '/' + appointmentId + '?inspectionType=CATALOG';\n  try{\n    const data = await axiosService.put(url);\n    if(data.status === 200){\n      dispatch({type:ASSIGN_APPOINTMENT_ID,payload:\"assigned\"});\n      dispatch(setToasterMessage({\n        toasterMessage: \"Assigned Successfully\",\n        showToaster: true,\n        toasterType: AlertType.SUCCESS\n      }));\n      setTimeout(()=>{\n        window.location.pathname = path + '/' + appointmentId + '/' + version;\n      },1000);\n    }\n  }\n  catch(data){\n    dispatch(setToasterMessage({\n      toasterMessage:data.response.data && data.response.data.message ? data.response.data.message : \"Already Assigned, please refresh page\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n    }));\n  }\n}\n\nexport const addTagging = (dataObj,appointmentId,msg,type,currentTag) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + '/' + appointmentId;\n  try{\n    if(type && type === \"carTagging\"){\n      let carTagUrl = config.api.workshop.host + config.api.workshop.catalog + config.api.workshop.carTagging \n      + '/' + appointmentId + '/' + currentTag;\n      const data = await axiosService.put(carTagUrl);\n      dispatch({type:APPROVE_REJECT_QUALITY_CHECK,payload:data && data.data});\n      if(data.status === 200){\n        dispatch(setToasterMessage({\n          toasterMessage: msg ? msg : \"Success\",\n          showToaster: true,\n          toasterType: AlertType.SUCCESS\n      }));\n      setTimeout(() => {\n        window.location.pathname = \"yard-qa\";\n      }, 500);\n    }else{\n      window.location.pathname = \"yard-qa\"\n    }\n    }\n    \n    if(!type || type !== \"carTagging\"){\n      const data = await axiosService.post(url,dataObj);\n      dispatch({type:APPROVE_REJECT_QUALITY_CHECK,payload:data && data.data});\n      if(data.status === 200){\n        dispatch(setToasterMessage({\n          toasterMessage: msg ? msg : \"Success\",\n          showToaster: true,\n          toasterType: AlertType.SUCCESS\n      }));\n    }\n    }\n  }\n  catch(e){\n    dispatch(setToasterMessage({\n      toasterMessage: e && e.response && e.response.data && e.response.data.message ? e.response.data.message : \"Something went wrong\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n  }));\n  }\n}\n\nexport const approveQualityChecks = (dataObj,appointmentId,msg,requestFor) => async (dispatch) => {\n  dispatch({type:LOADER_HANDLER});\n  let url = config.api.workshop.host + config.api.workshop.inspection + '/' + appointmentId;\n  try{\n    const data = await axiosService.post(url,dataObj);\n    dispatch({type:APPROVE_REJECT_QUALITY_CHECK,payload:data && data.data});\n    if(data.status === 200){\n      if(localStorage.getItem(\"estimatesData\")){\n        localStorage.removeItem(\"estimatesData\");\n      }\n      dispatch(setToasterMessage({\n        toasterMessage: msg ? msg : \"Approved successfully\",\n        showToaster: true,\n        toasterType: AlertType.SUCCESS\n    }));\n      if(requestFor && requestFor === \"submit all qc workshopQA\"){\n        window.location.pathname = \"workshop-qa\"\n      }\n      if(requestFor && requestFor === \"submit all qc yardQA\"){\n        window.location.pathname = \"yard-qa\"\n      }\n    }\n  }catch(e){\n    dispatch(setToasterMessage({\n      toasterMessage: e && e.response && e.response.data && e.response.data.message ? e.response.data.message : \"Something went wrong\",\n      showToaster: true,\n      toasterType: AlertType.ERROR\n  }));\n  }\n}","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/actions/commonAction/common.action.js",["495","496","497","498"],"import {\n    ACTION_COMMON_START, ACTION_COMMON_END, SET_TOASTER_MESSAGE\n} from './common.actiontype';\nimport axiosService from '../../../inits/axios';\nimport { config } from '../../../utils/constants/api.constants';\n\n\nexport const setToasterMessage = (data) => async (dispatch) => {\n    dispatch({type: SET_TOASTER_MESSAGE, payload: data });\n}","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/reducer/workshopReducer.js",["499","500"],"import {GET_WORKSHOP_QA_LISTING, GET_WORKSHOP_QA_LISTING_DETAILS,\n    GET_WORKSHOP_QA_LISTING_COUNT,GET_APPOINTMENT_SEARCH_RESULT,\n    APPROVE_REJECT_QUALITY_CHECK,LOADER_HANDLER,ASSIGN_APPOINTMENT_ID,\n    GET_LAST_INSPECTION_DATA,GET_MASTER_DATA_QC_IMAGES_KEYS,\n    GET_YARD_LISITNG_DATA,GET_YARD_LISITNG_DETAILS_DATA,\n    GET_INSPECTION_HISTORY_LISTING,GET_INSPECTION_HISTORY_LISTING_DETAILS,\n    GET_MASTER_DATA_CHECKPOINTS,GET_ESTIMATE_LISTING,GET_ESTIMATE_LISTING_DETAIL,\n    GET_INSPECTION_SUMMARY\n    } from \"./../actions/workshopQaManagement/workshopQaManagement.actionType\";\n\nconst initialState = {\n    showToaster: false,\n    toasterMessage: '',\n    toasterType: '',\n    isProcessing: true,\n    qaListing:[],\n    yardListing:[],\n    qaListingDetails:[],\n    yardListingDetails:[],\n    qaListingCount:0,\n    lastInspectionData:[],\n    qaTopImagesKeys:[],\n    inspectionHistoryListing:[],\n    inspectionHistoryListingDetails:[],\n    masterData:[],\n    estimatesListing:[],\n    estimatesListingDetail:[],\n    inspectionSummary:[]\n};\n\nconst WorkshopManagement = (state = initialState, action) =>{\n    switch(action.type){\n        case GET_INSPECTION_SUMMARY:{\n            return {\n                ...state,\n                isProcessing:true,\n                inspectionSummary:action.payload,\n                isProcessing:false\n            }\n        }\n        case GET_ESTIMATE_LISTING_DETAIL:{\n            return {\n                ...state,\n                isProcessing:true,\n                estimatesListingDetail:action.payload,\n                isProcessing:false\n            }\n        }\n        case GET_ESTIMATE_LISTING: {\n            return {\n                ...state,\n                estimatesListing:action.payload,\n                isProcessing:false\n            }\n        }\n        case GET_MASTER_DATA_CHECKPOINTS: \n            return {\n                ...state,\n                masterData:action.payload\n            }\n        case GET_INSPECTION_HISTORY_LISTING_DETAILS:\n            return {\n                ...state,\n                inspectionHistoryListingDetails:action.payload,\n                isProcessing:false\n            }\n        case GET_INSPECTION_HISTORY_LISTING:\n            return {\n                ...state,\n                inspectionHistoryListing:action.payload,\n                isProcessing:false\n            }\n        case GET_YARD_LISITNG_DETAILS_DATA:\n            return {\n                ...state,\n                yardListingDetails:action.payload,\n                isProcessing:false\n            }\n        case GET_YARD_LISITNG_DATA:\n            return {\n                ...state,\n                yardListing:action.payload,\n                isProcessing:false\n            }\n        case GET_MASTER_DATA_QC_IMAGES_KEYS:\n            return {\n                ...state,\n                qaTopImagesKeys:action.payload,\n                isProcessing:false\n            }\n        case GET_APPOINTMENT_SEARCH_RESULT:\n            return {\n                ...state,\n                qaListing:action.payload,\n                isProcessing:false\n            }\n        case GET_LAST_INSPECTION_DATA:\n            return {\n                ...state,\n                lastInspectionData:action.payload,\n                isProcessing:false\n            }\n        case ASSIGN_APPOINTMENT_ID:\n            return{\n                ...state,\n                assignedResponse:action.payload,\n                isProcessing:false\n            }\n        case GET_WORKSHOP_QA_LISTING:\n        return {\n            ...state,\n            qaListing:action.payload,\n            isProcessing:false\n        }\n        case GET_WORKSHOP_QA_LISTING_COUNT :\n            return {\n                ...state,\n                qaListingCount:action.payload\n            }\n        case APPROVE_REJECT_QUALITY_CHECK:\n            return {\n                ...state,\n                approveRejectQc:action.payload,\n                isProcessing:false\n            }\n        case GET_WORKSHOP_QA_LISTING_DETAILS:\n            return {\n                ...state,\n                qaListingDetails:action.payload,\n                isProcessing:false\n            }\n        case LOADER_HANDLER:\n            return {\n                ...state,\n                isProcessing:true\n            }\n        default:\n            return {\n                ...state,\n                isProcessing:false\n            }\n    }\n}\n\nexport default WorkshopManagement;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/reducer/commonReducer.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/account/OktaSignInWidget.js",["501"],"import React, { Component } from 'react';\nimport OktaSignIn from '@okta/okta-signin-widget';\nimport '@okta/okta-signin-widget/dist/css/okta-sign-in.min.css';\nimport config from './../../utils/okta/config';\n\nexport default class OktaSignInWidget extends Component {\n  constructor(props) {\n    super(props);\n    this.wrapper = React.createRef();\n  }\n  componentDidMount() {\n    this.widget = new OktaSignIn({\n      baseUrl: config.oidc.baseUrl,\n      clientId: config.oidc.clientId,\n      issuer: config.oidc.issuer,\n      redirectUri: config.oidc.redirectUri,\n      scopes: config.oidc.scopes,\n      idpDisplay: \"PRIMARY\",\n      idps:[{\n        type: \"GOOGLE\",\n        id: process.env.REACT_APP_ENV && process.env.REACT_APP_ENV == 'prod' ? \"0oa3qxdo2vJhZIuBC4x7\" : \"0oazt2wwffBKWHn5T1d6\" \n      }]\n    });\n    this.widget.renderEl({el: this.wrapper.current}, this.props.onSuccess, this.props.onError);\n  }\n\n  componentWillUnmount() {\n    this.widget.remove();\n  }\n\n  render() {\n    return <div ref={this.wrapper} />;\n  }\n};\n","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/GridCustomCell.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/workorderDetail/workorderPrintComponent.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/utils/constants/values.constants.js",["502"],"// dont change position of values, if done check usage\nlet countryCheck = localStorage.getItem(\"country\")\nexport const InventoryStatus = {\n  BOUGHT: \"Bought\",\n  STOCK_IN: \"Stock In\",\n  STOCK_OUT: \"Stock Out\",\n  STOCK_TRANSFER: \"Stock Transfer\",\n};\n\nexport const InventoryStatusKeys = {\n  BOUGHT: \"BOUGHT\",\n  STOCK_IN: \"STOCK_IN\",\n  STOCK_OUT: \"STOCK_OUT\",\n  STOCK_TRANSFER: \"STOCK_TRANSFER\",\n}\n\nexport const DriverStatus = {\n  pending: \"Pending\",\n  confirmed: \"Confirmend\",\n  driver_assigned: \"Driver Assigned\",\n  driver_on_way: \"Driver On Way\",\n  running: \"Running\",\n  done: \"Done\",\n  cancelled: \"Cancelled\",\n  rejected: \"Rejected\",\n  disputed: \"Disputed\",\n};\nexport const RequestStatus = {\n  PENDING: \"Pending\",\n  REQUESTED: \"Requested\",\n  IN_TRANSIT: \"In Transit\",\n  DONE: \"Done\",\n  ACCEPTED: \"Accepted\",\n  DENIED: \"Denied\",\n  DRIVER_ASSIGNED: \"Driver Assigned\",\n  DISPUTED: \"Disputed\"\n};\n\nexport const LogisticManagementLabels = {\n  PENDING: \"Pending\",\n  DENIED: \"Denied\",\n};\n\nexport const LocationType = {\n  C2B_YARD: \"C2B Yard\",\n  SERVICE_CENTER: \"Service Center\",\n  CAR_STUDIO: \"Studio\",\n  FULFILLMENT_CENTER: \"Fulfillment Center\",\n};\n\nexport const LocationTypesKey = {\n  FULFILLMENT_CENTER: 'FULFILLMENT_CENTER',\n  CAR_STUDIO: 'CAR_STUDIO',\n  SERVICE_CENTER: 'SERVICE_CENTER',\n  C2B_YARD: 'C2B_YARD'\n};\n\nexport const RequestTypes = [\n  {\n    requestType: 'Internal',\n    key: 'INTERNAL'\n  },\n  {\n    requestType: 'External',\n    key: 'EXTERNAL'\n  }\n];\n\nexport const LocationType1 = {\n  C2B_YARD: \"C2B Yard\",\n  SERVICE_CENTER: \"Service Center\",\n  CAR_STUDIO: \"Studio\",\n  FULFILLMENT_CENTER: \"Fulfillment Center\",\n};\n\nexport const DriverType = {\n  DriveU: \"DriveU\",\n  c24: \"In House\",\n  C2B: \"C2B\",\n  Offline: \"Offline\",\n  Locus: \"Locus\"\n};\n\nexport const AlertType = {\n  SUCCESS: \"success\",\n  ERROR: \"error\",\n  WARNING: \"warning\",\n  INFO: \"info\",\n  NONE: \"none\",\n};\n\nexport const ZoneTypes = {\n  zone1: \"Zone Type 1\",\n  zone2: \"Zone Type 2\",\n};\n\nexport const placeType = {\n  location: \"LOCATION\"\n};\n\n\nexport const uploadType = {\n  make: \"make\",\n  model: \"model\",\n  variant: \"variant\",\n  inventory: \"inventory\",\n  post_purchase: \"Post Purchase\",\n  post_refurb: \"Post Refurb\"\n}\nexport const ValidDateFormat = \"dd/MM/yyyy\";\nexport const AdditionalInventoryState = [\n  \"TRIP_END\",\n  \"TRIP_START\",\n];\n\nexport const file_type = \".csv\";\n\nexport const ErrorMessage = {\n  unknown: \"Something went wrong. Please try again.\",\n  status400: \"Invalid data. Please check and try again.\"\n};\nexport const Country = {\n  IN: \"IN\",\n  AE: \"AE\",\n  AU: \"AU\"\n}\nexport const Vehicle = {\n  BIKE:\"BIKE\",\n  CAR: \"CAR\"\n}\nexport const ConfigType = {\n  State_Transition_Rules: \"state-transition-rules\",\n  Time_Slot_Properties: \"time-slot-properties\"\n}\nexport const BulkUploadType = {\n  inventory: \"generic\",\n  post_purchase: \"-post-purchase\",\n  post_refurb: countryCheck == \"-post-refurb\",\n}\nexport const BulTypeInspection = \"inspection-upload-\"\nexport const BulkTypeInventory = \"inventory-upload-\"\n\nexport const LOCATION_POINT_DROPDOWN_LIST = [\n  {key: 'homePickUp', value: 'Home pick-up'}, \n  {key: 'dropAtHub', value: 'Drop at hub'}\n];\n\nexport const RETURN_FLOW = {\n  CUSTOMER_RETURN_FLOW: 'CUSTOMER_RETURN_FLOW',\n  INTERNAL_RETURN_FLOW: 'INTERNAL_RETURN_FLOW'\n};\n\nexport const DATE_FORMAT = \"yyyy-MM-dd\";\n\nexport const CITIES_GROUP = ['CC_134', 'CC_5', 'CC_8791', 'CC_6', 'CC_132', 'CC_62', 'CC_1', 'CC_2', 'CC_3', 'CC_86', 'CC_134'];\n\nexport const STOCK_OUT_FLOW = {\n  CUSTOMER_DELIVERY_FLOW: 'CUSTOMER_DELIVERY_FLOW',\n  DIRECT_STOCK_OUT_FLOW: \"DIRECT_STOCK_OUT_FLOW\",\n  C2B_DELIVERY_FLOW: \"C2B_DELIVERY_FLOW\",\n  C2B_STOCK_OUT_FLOW: 'C2B_STOCK_OUT_FLOW'\n};","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/utils/constants/api.constants.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/inspectionTimeCell.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/workshopNameCell.js",["503"],"import React from \"react\"\n\nexport default class WorkshopNameCell extends React.Component {\n   constructor(props){\n       super(props);\n   }\n    render() {\n        return (\n                <td>\n                    {this.props.dataItem && this.props.dataItem.loc && this.props.dataItem.loc.name}\n                </td>\n        );\n    }\n}","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/AppointmentIdCell.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/assignedToCell.js",["504"],"import React from \"react\";\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { br } from 'react-router-dom';\nimport {assignAppointmentId} from \"./../../store/actions/workshopQaManagement/workshopQaManagement.action\";\nclass AssignedToCell extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {redirect:null,isProcessing:true};\n    }\n\n    assignHandler = ()=>{\n        let redirectLocation = window.location.pathname;\n        this.props.assignAppointmentId(this.props.dataItem.appointmentId,this.props.dataItem.version,redirectLocation);\n    }\n\n    render() {\n        if(this.state.redirect){\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n                <>\n                {this.props.dataItem && this.props.dataItem.assignedTo && this.props.dataItem.assignedTo.uid ? \n                (<td>{this.props.dataItem.assignedTo.uid}</td>)\n                :\n                (<button style={{outline:'none',border:'none',background:'#F37500',\n                fontSize:\"1rem\",fontWeight:\"500\",margin:\"5px auto\",\n                padding:\"5px 10px\",borderRadius:\"7px\",color:\"#ffffff\"}}\n                onClick={()=> this.assignHandler()}\n                >ASSIGN TO ME</button>)\n                }\n                </>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isProcessing: state.workshopReducer.isProcessing,\n        assignedResponse: state.workshopReducer.assignedResponse\n    };\n};\n\nconst mapDispatchToProps = {\n    assignAppointmentId\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AssignedToCell);","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/Tooltip/makeModelCell.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/dialog/customDialog.js",["505","506"],"import React, { useState, useEffect } from \"react\";\nimport './../workshopQaDetail/workshopDetails.css';\nconst CustomDialog = (props) => {\n    return(\n        <div className=\"custom-dialog\">\n            <div style={{width:'auto'}}>\n               <div className=\"row\">\n                   <div className=\"col-lg-12 text-center\">\n                       <div className=\"confirmation-button\">\n                        {props.setPopupMessage ? (<h4>{props.setPopupMessage}</h4>):(<h4>You won’t be able to change the state after submitting. Are you sure?</h4>)}\n                        <button onClick={e=> {props.setGetConfirmation(false);props.setIsConfirmationDialog(false)}}>No</button>\n                        <button onClick={e=> {props.setGetConfirmation(true); props.setIsConfirmationDialog(false)}}>Yes</button>\n                       </div>\n                   </div>\n               </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default CustomDialog;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/views/summaryListDetail/summaryListComponent.js",["507","508","509","510","511","512","513","514","515"],"import React, {useEffect, useState, useRef} from \"react\";\nimport './style.css';\n// import \"../workshopQaDetail/workshopDetails.css\";\nimport Question from '../../assets/img/question.svg';\nimport Popup from '../../common/popup/';\nimport QuestionMarkPopUp from '../../components/question-mark-pop-up';\nimport carImage from '../../assets/img/rectangle.svg';\nimport Slider from \"react-slick\";\n\nconst SummaryList = (props) => {\nconst [allocateOpen, setAllocateOpen] = useState(false);\nconst [totalCheckpointsCount, setTotalCheckpointsCount] = useState(props?.totalCheckpointsCount);\nconst [listDetails, setListDetails] = useState(props.appointmentDetail);\nconst [tagCounts, setTagCounts] = useState({});\nconst [magnifyImg, setMagnifier] = useState(\"\");\nconst sliderRef = useRef();\nconst [modalImages, setModalImages] = useState([]);\n\nuseEffect(()=>{\n    let tagCounts = {\n        red:0,\n        green:0,\n        yellow:0,\n        none:0\n    }\n    console.log(props.appointmentDetail);\n    if(props && props.appointmentDetail){\n        Object.keys(props.appointmentDetail.data.checkpoints).map((item)=>{\n            if(props.appointmentDetail.data.qualityChecks[item] && \n            props.appointmentDetail.data.qualityChecks[item].invalidated === false){\n                if(props.appointmentDetail.data.qualityChecks[item].tag === \"NONE\"){\n                    tagCounts.none += 1\n                }\n                if(props.appointmentDetail.data.qualityChecks[item].tag === \"GREEN\"){\n                    tagCounts.green += 1\n                }\n                if(props.appointmentDetail.data.qualityChecks[item].tag === \"YELLOW\"){\n                    tagCounts.yellow += 1\n                }\n                if(props.appointmentDetail.data.qualityChecks[item].tag === \"RED\"){\n                    tagCounts.red += 1\n                }\n            }\n\n            if((!props.appointmentDetail.data.qualityChecks[item] && props.appointmentDetail.data.checkpoints[item]) ||\n            props.appointmentDetail.data.qualityChecks[item].invalidated === true){\n                tagCounts.green += 1\n            }\n        })\n        setTagCounts(tagCounts);\n        console.log(tagCounts);\n\n\n    }\n    setListDetails(props.appointmentDetail);\n},[props.appointmentDetail]);\n  const onAllocateOpen = () => {\n    setAllocateOpen(true);\n  };\n  const onAllocateClose = () => {\n      setAllocateOpen(false);\n  };\n  const [showConfirmation, setShowConfirmation] = useState(\"NONE\");\n  const addTagHandler = (tagName) => {\n     let finalTag = `${tagName.toUpperCase() + \"_TAG\"}`;\n     setShowConfirmation(finalTag);\n  }\n\n  const imageMagnifier = (data, allImages, index) => {\n    setMagnifier(data);\n    setModalImages(allImages);\n    setTimeout(() => {\n    //   sliderRef.current.slickGoTo(index);\n    }, 100);\n  };\n\n  const renderImages = (itemTop, item) => {\n    let imageAr = [];\n    imageAr = itemTop[item].images.map((image, index) => (\n      <div\n        key={index} className=\"imageWrap\">\n        <img src={image.path} width=\"227\" alt={image.label} key={index} onClick={() => { imageMagnifier(image, itemTop[item].images, index) }} å />\n      </div>\n    ));\n    return imageAr;\n  };\n\n  const sliderSettings = {\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    infinite: false,\n    arrow: true\n  };\n\n    return (\n        <div className=\"summaryList\">\n            <div className=\"titleWrapperMain\">\n            <Popup isOpen={showConfirmation !== \"NONE\"} \n            close={e=>onAllocateClose(setShowConfirmation(\"NONE\"))}>\n            <QuestionMarkPopUp actionButton={setShowConfirmation} \n            onClose={e=>onAllocateClose(setShowConfirmation(\"NONE\"))} \n            type=\"carTagging\" \n            message={\"Are you sure ?\"}\n            currentTagSelected={showConfirmation}\n            addTagging={props.addTagging}\n            listDetails={listDetails} />\n            </Popup>\n                <h2>Summary list</h2>\n                <span className=\"count\">{totalCheckpointsCount ? totalCheckpointsCount : 0}</span>\n            </div>\n            <div className=\"tagSection\">\n                <div className=\"tagsction\">\n                    <p>Choose a tag</p>\n                    <div className=\"settagWrapper\">\n                        <div className=\"dropdown\">\n                            <span>{showConfirmation? showConfirmation : \"NONE\"} </span>\n                            <ul>\n                                <li className=\"none\" onClick={e=>addTagHandler(\"none\")}>None</li>\n                                <li className=\"green\" onClick={e=>addTagHandler(\"green\")}>Green</li>\n                                <li className=\"yellow\" onClick={e=>addTagHandler(\"yellow\")}>Yellow </li>\n                                <li className=\"red\" onClick={e=>addTagHandler(\"red\")}>Red</li>\n                            </ul>\n                        </div>\n                        {/* <img src={Question} alt=\"info\"  onClick={onAllocateOpen} /> */}\n                        <span className=\"infoText\">Choose a tag as per car condition. It’s mandatory!</span>\n                        <Popup isOpen={allocateOpen} close={onAllocateClose}>\n                            <QuestionMarkPopUp onClose={onAllocateClose} />\n                        </Popup>\n                    </div>\n                </div>\n                <div className=\"countcard\">\n                    <div className=\"countCardGreen\">\n                        <p>{tagCounts.green}</p>\n                        <span>Green</span>\n                    </div>\n                    <div className=\"countCardYellow\">\n                        <p>{tagCounts.yellow}</p>\n                        <span>Yellow</span>\n                    </div>\n                    <div className=\"countCardRed\">\n                        <p>{tagCounts.red}</p>\n                        <span>Red</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"cardmainWrapper\">\n                {listDetails &&  listDetails.data && Object.keys(listDetails.data.checkpoints).map((item,index)=>{\n                    return(\n                        <>\n                         {listDetails.data.checkpoints[item]?.choices.length ? ( \n                        <div className=\"cardRow\">\n                            <div className=\"tabsSliderWrapper\">\n                            <Slider {...sliderSettings}>\n                                {renderImages(listDetails.data.checkpoints, item)}\n                            </Slider>\n                            </div>\n                        <div className=\"cardRowDetails\">\n                        <div className=\"detailsHeading\">\n                            <h3>{item}</h3>\n                            <p className={listDetails.data.qualityChecks[item]?.tag === \"NONE\" ? \"greyLabel\" :\n                            listDetails.data.qualityChecks[item]?.tag === \"GREEN\" ? \"greenLabel\" :\n                            listDetails.data.qualityChecks[item]?.tag === \"YELLOW\" ? \"yellowLabel\" :\n                            listDetails.data.qualityChecks[item]?.tag === \"RED\" ? \"redLabel\" : ''}>\n                            {listDetails.data?.qualityChecks[item]?.tag ? listDetails.data?.qualityChecks[item]?.tag : 'GREEN'}</p>\n                        </div>\n                        {listDetails.data.checkpoints[item] && listDetails.data.checkpoints[item].choices &&\n                        listDetails.data.checkpoints[item].choices.length === 0 ? (\n                            <div className=\"imperfectionWrapper\">\n                                <div className=\"imperfection p-5\">\n                                    {listDetails.data.checkpoints[item].noImperfectionChoices[0]}\n                                </div>\n                            </div>                            \n                        ):(\n                        <div className=\"imperfectionWrapper\">\n                            <div className=\"imperfection\">\n                                <h4>Acceptable imperfection <br/> (not shown to customer)</h4>\n                                <ul>\n                                {listDetails.data.checkpoints[item].choices.map((choice)=>{\n                                        return(<>\n                                            {choice && choice.acceptable && (\n                                                <li>{choice.choice }</li>\n                                            )}\n                                            </>\n                                        )\n                                        })}\n                                </ul>\n                            </div>\n                            <div className=\"imperfection\">\n                                <h4>Non-Acceptable imperfection <br/> (shown to customer)</h4>\n                                <ul>\n                                {listDetails.data.checkpoints[item].choices.map((choice)=>{\n                                        return(<>\n                                            {choice && !choice.acceptable && (\n                                                <li>{choice.choice }</li>\n                                            )}\n                                            </>\n                                        )\n                                        })}\n                                </ul>\n                            </div>\n                        </div>\n                             )}\n                    </div>\n                        </div>\n                         ):(null)}\n                        </>\n                    )\n                })}\n\n                    {listDetails &&  listDetails.data && Object.keys(listDetails.data.checkpoints).map((item,index)=>{\n                    return(\n                        <>\n                         {!listDetails.data.checkpoints[item]?.choices.length && listDetails.data?.qualityChecks[item]?.tag !== \"GREEN\" ? ( \n                        <div className=\"cardRow\">\n                            <div className=\"tabsSliderWrapper\">\n                            <Slider {...sliderSettings}>\n                                {renderImages(listDetails.data.checkpoints, item)}\n                            </Slider>\n                            </div>\n                        <div className=\"cardRowDetails\">\n                        <div className=\"detailsHeading\">\n                            <h3>{item}</h3>\n                            <p className={listDetails.data.qualityChecks[item]?.tag === \"NONE\" ? \"greyLabel\" :\n                            listDetails.data.qualityChecks[item]?.tag === \"GREEN\" ? \"greenLabel\" :\n                            listDetails.data.qualityChecks[item]?.tag === \"YELLOW\" ? \"yellowLabel\" :\n                            listDetails.data.qualityChecks[item]?.tag === \"RED\" ? \"redLabel\" : ''}>\n                            {listDetails.data?.qualityChecks[item]?.tag ? listDetails.data?.qualityChecks[item]?.tag : 'GREEN'}</p>\n                        </div>\n                        {listDetails.data.checkpoints[item] && listDetails.data.checkpoints[item].choices &&\n                        listDetails.data.checkpoints[item].choices.length === 0 ? (\n                            <div className=\"imperfectionWrapper\">\n                                <div className=\"imperfection p-5\">\n                                    {listDetails.data.checkpoints[item].noImperfectionChoices[0]}\n                                </div>\n                            </div>                            \n                        ):(\n                        <div className=\"imperfectionWrapper\">\n                            <div className=\"imperfection\">\n                                <h4>Acceptable imperfection <br/> (not shown to customer)</h4>\n                                <ul>\n                                {listDetails.data.checkpoints[item].choices.map((choice)=>{\n                                        return(<>\n                                            {choice && choice.acceptable && (\n                                                <li>{choice.choice }</li>\n                                            )}\n                                            </>\n                                        )\n                                        })}\n                                </ul>\n                            </div>\n                            <div className=\"imperfection\">\n                                <h4>Non-Acceptable imperfection <br/>(shown to customer)</h4>\n                                <ul>\n                                {listDetails.data.checkpoints[item].choices.map((choice)=>{\n                                        return(<>\n                                            {choice && !choice.acceptable && (\n                                                <li>{choice.choice }</li>\n                                            )}\n                                            </>\n                                        )\n                                        })}\n                                </ul>\n                            </div>\n                        </div>\n                             )}\n                    </div>\n                        </div>\n                         ):(null)}\n                        </>\n                    )\n                })}\n\n            </div>\n        </div>\n\n    );\n};\nexport default SummaryList;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/components/question-mark-pop-up.js",["516","517"],"import React, { Component, useEffect, useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nconst QuestionMarkPopUp = (props) => {\n    const historyLink = useHistory();\n    const dispatch = useDispatch();\n    const [hint, setHint] = useState({});\n\n    useEffect(()=>{\n        if(props.hintData){\n            setHint(props.hintData);\n        }\n    },[props.hintData]);\n\n    const submitCarTag = ()=>{\n        if(props && props.listDetails.appointmentId && props.currentTagSelected !== \"NONE\"){\n            dispatch(props.addTagging({},props.listDetails.appointmentId, \"Appointment tagged successfully !\", \"carTagging\", props.currentTagSelected))\n        }\n    }\n\n    return (\n            <>\n                {props.type && props.message && props.type === \"carTagging\" ? (\n                    <div className=\"final-tagging-popup\">\n                    <h5>{`Car will be marked as ${props.currentTagSelected.split('_')[0]} Tag Are you sure?`}</h5>\n                    <button onClick={e=>submitCarTag()}>Yes</button>\n                    <button onClick={e=>props.actionButton(\"NONE\")}>No</button>\n                    </div>\n                ):(\n                    <div className=\"questionMarkPopUp\">\n                    <h2>{hint && hint.key}</h2>\n                    <table cellPadding=\"0\" cellSpacing=\"0\" width=\"100%\">\n                        <thead>\n                            <tr>\n                                <th>Problem</th>\n                                <th>Criteria</th>\n                                <th>Tag/Solution</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {hint && hint.hints && hint.hints.tabular && hint.hints.tabular.map((item,index)=>{\n                                return(\n                                    <tr>\n                                        {item && item.map((col)=>{\n                                            return(\n                                                <td>{col}</td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            })}\n                            \n                        </tbody>\n                    </table>\n                     </div>\n                )}\n            </>\n        )\n    }\n\n\nexport default QuestionMarkPopUp;","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/popup/index.js",["518"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Popup from \"./component\";\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Popup);\n","/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/actions/workshopQaManagement/workshopQaManagement.actionType.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/inits/axios.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/store/actions/commonAction/common.actiontype.js",[],"/Users/akshay.kanyan/Desktop/car24-catalog/catalog-panel/src/common/popup/component.js",[],{"ruleId":"519","replacedBy":"520"},{"ruleId":"521","replacedBy":"522"},{"ruleId":"523","severity":1,"message":"524","line":8,"column":20,"nodeType":"525","messageId":"526","endLine":8,"endColumn":31},{"ruleId":"523","severity":1,"message":"527","line":9,"column":13,"nodeType":"525","messageId":"526","endLine":9,"endColumn":22},{"ruleId":"528","severity":1,"message":"529","line":18,"column":8,"nodeType":"530","endLine":18,"endColumn":10,"suggestions":"531"},{"ruleId":"532","severity":1,"message":"533","line":24,"column":1,"nodeType":"534","endLine":32,"endColumn":3},{"ruleId":"535","severity":1,"message":"536","line":6,"column":5,"nodeType":"537","messageId":"538","endLine":9,"endColumn":6},{"ruleId":"535","severity":1,"message":"536","line":10,"column":5,"nodeType":"537","messageId":"538","endLine":12,"endColumn":6},{"ruleId":"535","severity":1,"message":"536","line":9,"column":5,"nodeType":"537","messageId":"538","endLine":11,"endColumn":6},{"ruleId":"535","severity":1,"message":"536","line":10,"column":5,"nodeType":"537","messageId":"538","endLine":12,"endColumn":6},{"ruleId":"523","severity":1,"message":"539","line":6,"column":9,"nodeType":"525","messageId":"526","endLine":6,"endColumn":21},{"ruleId":"535","severity":1,"message":"536","line":11,"column":5,"nodeType":"537","messageId":"538","endLine":13,"endColumn":6},{"ruleId":"535","severity":1,"message":"536","line":9,"column":5,"nodeType":"537","messageId":"538","endLine":11,"endColumn":6},{"ruleId":"523","severity":1,"message":"539","line":6,"column":9,"nodeType":"525","messageId":"526","endLine":6,"endColumn":21},{"ruleId":"535","severity":1,"message":"536","line":11,"column":5,"nodeType":"537","messageId":"538","endLine":13,"endColumn":6},{"ruleId":"535","severity":1,"message":"536","line":10,"column":5,"nodeType":"537","messageId":"538","endLine":12,"endColumn":6},{"ruleId":"523","severity":1,"message":"540","line":7,"column":49,"nodeType":"525","messageId":"526","endLine":7,"endColumn":70},{"ruleId":"535","severity":1,"message":"536","line":9,"column":5,"nodeType":"537","messageId":"538","endLine":11,"endColumn":6},{"ruleId":"535","severity":1,"message":"536","line":9,"column":5,"nodeType":"537","messageId":"538","endLine":11,"endColumn":6},{"ruleId":"535","severity":1,"message":"536","line":9,"column":5,"nodeType":"537","messageId":"538","endLine":11,"endColumn":6},{"ruleId":"523","severity":1,"message":"541","line":11,"column":10,"nodeType":"525","messageId":"526","endLine":11,"endColumn":18},{"ruleId":"542","severity":1,"message":"543","line":55,"column":31,"nodeType":"544","messageId":"545","endLine":55,"endColumn":33},{"ruleId":"542","severity":1,"message":"543","line":55,"column":64,"nodeType":"544","messageId":"545","endLine":55,"endColumn":66},{"ruleId":"528","severity":1,"message":"529","line":80,"column":6,"nodeType":"530","endLine":80,"endColumn":27,"suggestions":"546"},{"ruleId":"535","severity":1,"message":"536","line":4,"column":5,"nodeType":"537","messageId":"538","endLine":6,"endColumn":6},{"ruleId":"528","severity":1,"message":"547","line":17,"column":8,"nodeType":"530","endLine":17,"endColumn":25,"suggestions":"548"},{"ruleId":"528","severity":1,"message":"549","line":29,"column":8,"nodeType":"530","endLine":29,"endColumn":19,"suggestions":"550"},{"ruleId":"523","severity":1,"message":"551","line":4,"column":10,"nodeType":"525","messageId":"526","endLine":4,"endColumn":21},{"ruleId":"523","severity":1,"message":"552","line":7,"column":9,"nodeType":"525","messageId":"526","endLine":7,"endColumn":20},{"ruleId":"523","severity":1,"message":"553","line":1,"column":9,"nodeType":"525","messageId":"526","endLine":1,"endColumn":21},{"ruleId":"554","severity":1,"message":"555","line":162,"column":19,"nodeType":"525","messageId":"556","endLine":162,"endColumn":26},{"ruleId":"542","severity":1,"message":"543","line":236,"column":25,"nodeType":"544","messageId":"545","endLine":236,"endColumn":27},{"ruleId":"542","severity":1,"message":"543","line":236,"column":60,"nodeType":"544","messageId":"545","endLine":236,"endColumn":62},{"ruleId":"523","severity":1,"message":"557","line":15,"column":12,"nodeType":"525","messageId":"526","endLine":15,"endColumn":23},{"ruleId":"558","severity":1,"message":"559","line":28,"column":49,"nodeType":"560","messageId":"561","endLine":28,"endColumn":51},{"ruleId":"562","severity":1,"message":"563","line":43,"column":94,"nodeType":"564","messageId":"565","endLine":43,"endColumn":95},{"ruleId":"523","severity":1,"message":"557","line":15,"column":12,"nodeType":"525","messageId":"526","endLine":15,"endColumn":23},{"ruleId":"558","severity":1,"message":"559","line":30,"column":41,"nodeType":"560","messageId":"561","endLine":30,"endColumn":43},{"ruleId":"562","severity":1,"message":"563","line":45,"column":83,"nodeType":"564","messageId":"565","endLine":45,"endColumn":84},{"ruleId":"523","severity":1,"message":"557","line":16,"column":12,"nodeType":"525","messageId":"526","endLine":16,"endColumn":23},{"ruleId":"558","severity":1,"message":"559","line":29,"column":36,"nodeType":"560","messageId":"561","endLine":29,"endColumn":38},{"ruleId":"562","severity":1,"message":"563","line":44,"column":80,"nodeType":"564","messageId":"565","endLine":44,"endColumn":81},{"ruleId":"523","severity":1,"message":"566","line":7,"column":22,"nodeType":"525","messageId":"526","endLine":7,"endColumn":37},{"ruleId":"523","severity":1,"message":"567","line":20,"column":9,"nodeType":"525","messageId":"526","endLine":20,"endColumn":20},{"ruleId":"558","severity":1,"message":"559","line":36,"column":51,"nodeType":"560","messageId":"561","endLine":36,"endColumn":53},{"ruleId":"523","severity":1,"message":"568","line":50,"column":10,"nodeType":"525","messageId":"526","endLine":50,"endColumn":27},{"ruleId":"523","severity":1,"message":"569","line":58,"column":10,"nodeType":"525","messageId":"526","endLine":58,"endColumn":19},{"ruleId":"523","severity":1,"message":"570","line":65,"column":10,"nodeType":"525","messageId":"526","endLine":65,"endColumn":31},{"ruleId":"523","severity":1,"message":"571","line":66,"column":10,"nodeType":"525","messageId":"526","endLine":66,"endColumn":38},{"ruleId":"523","severity":1,"message":"572","line":76,"column":10,"nodeType":"525","messageId":"526","endLine":76,"endColumn":27},{"ruleId":"523","severity":1,"message":"573","line":77,"column":10,"nodeType":"525","messageId":"526","endLine":77,"endColumn":37},{"ruleId":"558","severity":1,"message":"559","line":107,"column":71,"nodeType":"560","messageId":"561","endLine":107,"endColumn":73},{"ruleId":"558","severity":1,"message":"559","line":108,"column":46,"nodeType":"560","messageId":"561","endLine":108,"endColumn":48},{"ruleId":"558","severity":1,"message":"559","line":110,"column":88,"nodeType":"560","messageId":"561","endLine":110,"endColumn":90},{"ruleId":"558","severity":1,"message":"559","line":113,"column":88,"nodeType":"560","messageId":"561","endLine":113,"endColumn":90},{"ruleId":"558","severity":1,"message":"559","line":122,"column":73,"nodeType":"560","messageId":"561","endLine":122,"endColumn":75},{"ruleId":"558","severity":1,"message":"559","line":138,"column":73,"nodeType":"560","messageId":"561","endLine":138,"endColumn":75},{"ruleId":"558","severity":1,"message":"559","line":139,"column":88,"nodeType":"560","messageId":"561","endLine":139,"endColumn":90},{"ruleId":"558","severity":1,"message":"559","line":150,"column":77,"nodeType":"560","messageId":"561","endLine":150,"endColumn":79},{"ruleId":"558","severity":1,"message":"559","line":161,"column":79,"nodeType":"560","messageId":"561","endLine":161,"endColumn":81},{"ruleId":"523","severity":1,"message":"574","line":165,"column":19,"nodeType":"525","messageId":"526","endLine":165,"endColumn":32},{"ruleId":"528","severity":1,"message":"575","line":172,"column":5,"nodeType":"530","endLine":172,"endColumn":27,"suggestions":"576"},{"ruleId":"558","severity":1,"message":"559","line":179,"column":45,"nodeType":"560","messageId":"561","endLine":179,"endColumn":47},{"ruleId":"528","severity":1,"message":"577","line":185,"column":5,"nodeType":"530","endLine":185,"endColumn":27,"suggestions":"578"},{"ruleId":"558","severity":1,"message":"559","line":188,"column":49,"nodeType":"560","messageId":"561","endLine":188,"endColumn":51},{"ruleId":"528","severity":1,"message":"577","line":200,"column":5,"nodeType":"530","endLine":200,"endColumn":31,"suggestions":"579"},{"ruleId":"528","severity":1,"message":"577","line":206,"column":5,"nodeType":"530","endLine":206,"endColumn":23,"suggestions":"580"},{"ruleId":"528","severity":1,"message":"581","line":217,"column":5,"nodeType":"530","endLine":217,"endColumn":22,"suggestions":"582"},{"ruleId":"558","severity":1,"message":"559","line":248,"column":67,"nodeType":"560","messageId":"561","endLine":248,"endColumn":69},{"ruleId":"558","severity":1,"message":"559","line":305,"column":67,"nodeType":"560","messageId":"561","endLine":305,"endColumn":69},{"ruleId":"523","severity":1,"message":"583","line":342,"column":9,"nodeType":"525","messageId":"526","endLine":342,"endColumn":29},{"ruleId":"558","severity":1,"message":"559","line":445,"column":94,"nodeType":"560","messageId":"561","endLine":445,"endColumn":96},{"ruleId":"558","severity":1,"message":"559","line":447,"column":114,"nodeType":"560","messageId":"561","endLine":447,"endColumn":116},{"ruleId":"558","severity":1,"message":"559","line":470,"column":49,"nodeType":"560","messageId":"561","endLine":470,"endColumn":51},{"ruleId":"558","severity":1,"message":"559","line":473,"column":46,"nodeType":"560","messageId":"561","endLine":473,"endColumn":48},{"ruleId":"528","severity":1,"message":"584","line":545,"column":7,"nodeType":"530","endLine":545,"endColumn":24,"suggestions":"585"},{"ruleId":"558","severity":1,"message":"586","line":564,"column":86,"nodeType":"560","messageId":"587","endLine":564,"endColumn":88},{"ruleId":"588","severity":1,"message":"589","line":672,"column":19,"nodeType":"590","endLine":672,"endColumn":59},{"ruleId":"591","severity":1,"message":"592","line":691,"column":9,"nodeType":"590","endLine":691,"endColumn":104},{"ruleId":"593","severity":1,"message":"594","line":812,"column":127,"nodeType":"595","messageId":"596","endLine":812,"endColumn":128,"fix":"597"},{"ruleId":"593","severity":1,"message":"594","line":819,"column":129,"nodeType":"595","messageId":"596","endLine":819,"endColumn":130,"fix":"598"},{"ruleId":"593","severity":1,"message":"594","line":1184,"column":137,"nodeType":"595","messageId":"596","endLine":1184,"endColumn":138,"fix":"599"},{"ruleId":"593","severity":1,"message":"594","line":1191,"column":139,"nodeType":"595","messageId":"596","endLine":1191,"endColumn":140,"fix":"600"},{"ruleId":"593","severity":1,"message":"594","line":1392,"column":127,"nodeType":"595","messageId":"596","endLine":1392,"endColumn":128,"fix":"601"},{"ruleId":"593","severity":1,"message":"594","line":1399,"column":129,"nodeType":"595","messageId":"596","endLine":1399,"endColumn":130,"fix":"602"},{"ruleId":"523","severity":1,"message":"567","line":35,"column":9,"nodeType":"525","messageId":"526","endLine":35,"endColumn":20},{"ruleId":"523","severity":1,"message":"603","line":36,"column":9,"nodeType":"525","messageId":"526","endLine":36,"endColumn":17},{"ruleId":"523","severity":1,"message":"604","line":38,"column":10,"nodeType":"525","messageId":"526","endLine":38,"endColumn":25},{"ruleId":"523","severity":1,"message":"605","line":38,"column":27,"nodeType":"525","messageId":"526","endLine":38,"endColumn":45},{"ruleId":"523","severity":1,"message":"568","line":39,"column":10,"nodeType":"525","messageId":"526","endLine":39,"endColumn":27},{"ruleId":"523","severity":1,"message":"606","line":45,"column":10,"nodeType":"525","messageId":"526","endLine":45,"endColumn":30},{"ruleId":"523","severity":1,"message":"607","line":45,"column":32,"nodeType":"525","messageId":"526","endLine":45,"endColumn":55},{"ruleId":"523","severity":1,"message":"608","line":46,"column":10,"nodeType":"525","messageId":"526","endLine":46,"endColumn":19},{"ruleId":"523","severity":1,"message":"609","line":46,"column":21,"nodeType":"525","messageId":"526","endLine":46,"endColumn":33},{"ruleId":"528","severity":1,"message":"577","line":77,"column":6,"nodeType":"530","endLine":77,"endColumn":31,"suggestions":"610"},{"ruleId":"558","severity":1,"message":"559","line":85,"column":72,"nodeType":"560","messageId":"561","endLine":85,"endColumn":74},{"ruleId":"558","severity":1,"message":"559","line":86,"column":45,"nodeType":"560","messageId":"561","endLine":86,"endColumn":47},{"ruleId":"558","severity":1,"message":"559","line":88,"column":88,"nodeType":"560","messageId":"561","endLine":88,"endColumn":90},{"ruleId":"558","severity":1,"message":"559","line":91,"column":88,"nodeType":"560","messageId":"561","endLine":91,"endColumn":90},{"ruleId":"558","severity":1,"message":"559","line":99,"column":73,"nodeType":"560","messageId":"561","endLine":99,"endColumn":75},{"ruleId":"558","severity":1,"message":"559","line":115,"column":74,"nodeType":"560","messageId":"561","endLine":115,"endColumn":76},{"ruleId":"558","severity":1,"message":"559","line":116,"column":89,"nodeType":"560","messageId":"561","endLine":116,"endColumn":91},{"ruleId":"528","severity":1,"message":"577","line":125,"column":6,"nodeType":"530","endLine":125,"endColumn":28,"suggestions":"611"},{"ruleId":"558","severity":1,"message":"559","line":128,"column":46,"nodeType":"560","messageId":"561","endLine":128,"endColumn":48},{"ruleId":"528","severity":1,"message":"577","line":134,"column":6,"nodeType":"530","endLine":134,"endColumn":28,"suggestions":"612"},{"ruleId":"558","severity":1,"message":"559","line":140,"column":47,"nodeType":"560","messageId":"561","endLine":140,"endColumn":49},{"ruleId":"558","severity":1,"message":"559","line":151,"column":47,"nodeType":"560","messageId":"561","endLine":151,"endColumn":49},{"ruleId":"558","severity":1,"message":"559","line":160,"column":53,"nodeType":"560","messageId":"561","endLine":160,"endColumn":55},{"ruleId":"528","severity":1,"message":"577","line":168,"column":6,"nodeType":"530","endLine":168,"endColumn":46,"suggestions":"613"},{"ruleId":"528","severity":1,"message":"614","line":243,"column":6,"nodeType":"530","endLine":243,"endColumn":29,"suggestions":"615"},{"ruleId":"558","severity":1,"message":"559","line":315,"column":48,"nodeType":"560","messageId":"561","endLine":315,"endColumn":50},{"ruleId":"593","severity":1,"message":"594","line":588,"column":117,"nodeType":"595","messageId":"596","endLine":588,"endColumn":118,"fix":"616"},{"ruleId":"593","severity":1,"message":"594","line":730,"column":125,"nodeType":"595","messageId":"596","endLine":730,"endColumn":126,"fix":"617"},{"ruleId":"523","severity":1,"message":"618","line":8,"column":8,"nodeType":"525","messageId":"526","endLine":8,"endColumn":25},{"ruleId":"523","severity":1,"message":"557","line":17,"column":12,"nodeType":"525","messageId":"526","endLine":17,"endColumn":23},{"ruleId":"558","severity":1,"message":"559","line":30,"column":34,"nodeType":"560","messageId":"561","endLine":30,"endColumn":36},{"ruleId":"528","severity":1,"message":"619","line":37,"column":7,"nodeType":"530","endLine":37,"endColumn":24,"suggestions":"620"},{"ruleId":"562","severity":1,"message":"563","line":45,"column":84,"nodeType":"564","messageId":"565","endLine":45,"endColumn":85},{"ruleId":"523","severity":1,"message":"621","line":7,"column":22,"nodeType":"525","messageId":"526","endLine":7,"endColumn":32},{"ruleId":"523","severity":1,"message":"622","line":11,"column":8,"nodeType":"525","messageId":"526","endLine":11,"endColumn":20},{"ruleId":"523","severity":1,"message":"623","line":13,"column":10,"nodeType":"525","messageId":"526","endLine":13,"endColumn":16},{"ruleId":"523","severity":1,"message":"624","line":17,"column":11,"nodeType":"525","messageId":"526","endLine":17,"endColumn":23},{"ruleId":"523","severity":1,"message":"567","line":18,"column":11,"nodeType":"525","messageId":"526","endLine":18,"endColumn":22},{"ruleId":"523","severity":1,"message":"603","line":19,"column":11,"nodeType":"525","messageId":"526","endLine":19,"endColumn":19},{"ruleId":"558","severity":1,"message":"559","line":27,"column":49,"nodeType":"560","messageId":"561","endLine":27,"endColumn":51},{"ruleId":"558","severity":1,"message":"559","line":34,"column":79,"nodeType":"560","messageId":"561","endLine":34,"endColumn":81},{"ruleId":"523","severity":1,"message":"621","line":7,"column":22,"nodeType":"525","messageId":"526","endLine":7,"endColumn":32},{"ruleId":"523","severity":1,"message":"625","line":39,"column":12,"nodeType":"525","messageId":"526","endLine":39,"endColumn":24},{"ruleId":"523","severity":1,"message":"626","line":40,"column":12,"nodeType":"525","messageId":"526","endLine":40,"endColumn":27},{"ruleId":"558","severity":1,"message":"559","line":60,"column":82,"nodeType":"560","messageId":"561","endLine":60,"endColumn":84},{"ruleId":"528","severity":1,"message":"577","line":105,"column":7,"nodeType":"530","endLine":105,"endColumn":74,"suggestions":"627"},{"ruleId":"558","severity":1,"message":"559","line":112,"column":81,"nodeType":"560","messageId":"561","endLine":112,"endColumn":83},{"ruleId":"528","severity":1,"message":"628","line":162,"column":7,"nodeType":"530","endLine":162,"endColumn":29,"suggestions":"629"},{"ruleId":"558","severity":1,"message":"559","line":166,"column":49,"nodeType":"560","messageId":"561","endLine":166,"endColumn":51},{"ruleId":"558","severity":1,"message":"559","line":173,"column":49,"nodeType":"560","messageId":"561","endLine":173,"endColumn":51},{"ruleId":"558","severity":1,"message":"559","line":174,"column":60,"nodeType":"560","messageId":"561","endLine":174,"endColumn":62},{"ruleId":"523","severity":1,"message":"630","line":177,"column":21,"nodeType":"525","messageId":"526","endLine":177,"endColumn":34},{"ruleId":"558","severity":1,"message":"559","line":184,"column":77,"nodeType":"560","messageId":"561","endLine":184,"endColumn":79},{"ruleId":"558","severity":1,"message":"559","line":214,"column":50,"nodeType":"560","messageId":"561","endLine":214,"endColumn":52},{"ruleId":"558","severity":1,"message":"559","line":220,"column":60,"nodeType":"560","messageId":"561","endLine":220,"endColumn":62},{"ruleId":"558","severity":1,"message":"559","line":233,"column":84,"nodeType":"560","messageId":"561","endLine":233,"endColumn":86},{"ruleId":"558","severity":1,"message":"559","line":234,"column":86,"nodeType":"560","messageId":"561","endLine":234,"endColumn":88},{"ruleId":"558","severity":1,"message":"559","line":331,"column":72,"nodeType":"560","messageId":"561","endLine":331,"endColumn":74},{"ruleId":"523","severity":1,"message":"631","line":349,"column":15,"nodeType":"525","messageId":"526","endLine":349,"endColumn":25},{"ruleId":"558","severity":1,"message":"632","line":403,"column":74,"nodeType":"560","messageId":"587","endLine":403,"endColumn":76},{"ruleId":"523","severity":1,"message":"633","line":413,"column":10,"nodeType":"525","messageId":"526","endLine":413,"endColumn":35},{"ruleId":"523","severity":1,"message":"634","line":426,"column":10,"nodeType":"525","messageId":"526","endLine":426,"endColumn":26},{"ruleId":"523","severity":1,"message":"557","line":15,"column":12,"nodeType":"525","messageId":"526","endLine":15,"endColumn":23},{"ruleId":"558","severity":1,"message":"559","line":30,"column":41,"nodeType":"560","messageId":"561","endLine":30,"endColumn":43},{"ruleId":"562","severity":1,"message":"563","line":45,"column":88,"nodeType":"564","messageId":"565","endLine":45,"endColumn":89},{"ruleId":"523","severity":1,"message":"566","line":7,"column":22,"nodeType":"525","messageId":"526","endLine":7,"endColumn":37},{"ruleId":"523","severity":1,"message":"567","line":16,"column":9,"nodeType":"525","messageId":"526","endLine":16,"endColumn":20},{"ruleId":"523","severity":1,"message":"568","line":31,"column":10,"nodeType":"525","messageId":"526","endLine":31,"endColumn":27},{"ruleId":"523","severity":1,"message":"569","line":39,"column":10,"nodeType":"525","messageId":"526","endLine":39,"endColumn":19},{"ruleId":"523","severity":1,"message":"570","line":46,"column":10,"nodeType":"525","messageId":"526","endLine":46,"endColumn":31},{"ruleId":"523","severity":1,"message":"571","line":47,"column":10,"nodeType":"525","messageId":"526","endLine":47,"endColumn":38},{"ruleId":"558","severity":1,"message":"559","line":88,"column":71,"nodeType":"560","messageId":"561","endLine":88,"endColumn":73},{"ruleId":"558","severity":1,"message":"559","line":89,"column":46,"nodeType":"560","messageId":"561","endLine":89,"endColumn":48},{"ruleId":"558","severity":1,"message":"559","line":91,"column":88,"nodeType":"560","messageId":"561","endLine":91,"endColumn":90},{"ruleId":"558","severity":1,"message":"559","line":94,"column":88,"nodeType":"560","messageId":"561","endLine":94,"endColumn":90},{"ruleId":"558","severity":1,"message":"559","line":103,"column":73,"nodeType":"560","messageId":"561","endLine":103,"endColumn":75},{"ruleId":"558","severity":1,"message":"559","line":119,"column":73,"nodeType":"560","messageId":"561","endLine":119,"endColumn":75},{"ruleId":"558","severity":1,"message":"559","line":120,"column":88,"nodeType":"560","messageId":"561","endLine":120,"endColumn":90},{"ruleId":"558","severity":1,"message":"559","line":133,"column":75,"nodeType":"560","messageId":"561","endLine":133,"endColumn":77},{"ruleId":"558","severity":1,"message":"559","line":144,"column":77,"nodeType":"560","messageId":"561","endLine":144,"endColumn":79},{"ruleId":"523","severity":1,"message":"574","line":148,"column":17,"nodeType":"525","messageId":"526","endLine":148,"endColumn":30},{"ruleId":"528","severity":1,"message":"575","line":155,"column":5,"nodeType":"530","endLine":155,"endColumn":27,"suggestions":"635"},{"ruleId":"528","severity":1,"message":"577","line":161,"column":5,"nodeType":"530","endLine":161,"endColumn":30,"suggestions":"636"},{"ruleId":"528","severity":1,"message":"577","line":167,"column":5,"nodeType":"530","endLine":167,"endColumn":23,"suggestions":"637"},{"ruleId":"558","severity":1,"message":"559","line":173,"column":45,"nodeType":"560","messageId":"561","endLine":173,"endColumn":47},{"ruleId":"528","severity":1,"message":"577","line":179,"column":5,"nodeType":"530","endLine":179,"endColumn":27,"suggestions":"638"},{"ruleId":"558","severity":1,"message":"559","line":182,"column":49,"nodeType":"560","messageId":"561","endLine":182,"endColumn":51},{"ruleId":"528","severity":1,"message":"577","line":194,"column":5,"nodeType":"530","endLine":194,"endColumn":31,"suggestions":"639"},{"ruleId":"528","severity":1,"message":"581","line":205,"column":5,"nodeType":"530","endLine":205,"endColumn":22,"suggestions":"640"},{"ruleId":"528","severity":1,"message":"641","line":223,"column":5,"nodeType":"530","endLine":223,"endColumn":40,"suggestions":"642"},{"ruleId":"528","severity":1,"message":"643","line":223,"column":6,"nodeType":"544","endLine":223,"endColumn":39},{"ruleId":"558","severity":1,"message":"559","line":289,"column":67,"nodeType":"560","messageId":"561","endLine":289,"endColumn":69},{"ruleId":"558","severity":1,"message":"559","line":355,"column":67,"nodeType":"560","messageId":"561","endLine":355,"endColumn":69},{"ruleId":"523","severity":1,"message":"583","line":398,"column":9,"nodeType":"525","messageId":"526","endLine":398,"endColumn":29},{"ruleId":"558","severity":1,"message":"559","line":476,"column":94,"nodeType":"560","messageId":"561","endLine":476,"endColumn":96},{"ruleId":"558","severity":1,"message":"559","line":478,"column":114,"nodeType":"560","messageId":"561","endLine":478,"endColumn":116},{"ruleId":"558","severity":1,"message":"559","line":514,"column":47,"nodeType":"560","messageId":"561","endLine":514,"endColumn":49},{"ruleId":"558","severity":1,"message":"559","line":517,"column":44,"nodeType":"560","messageId":"561","endLine":517,"endColumn":46},{"ruleId":"558","severity":1,"message":"559","line":522,"column":58,"nodeType":"560","messageId":"561","endLine":522,"endColumn":60},{"ruleId":"644","severity":1,"message":"645","line":537,"column":50,"nodeType":"646","messageId":"647","endLine":537,"endColumn":51,"fix":"648"},{"ruleId":"644","severity":1,"message":"645","line":540,"column":52,"nodeType":"646","messageId":"647","endLine":540,"endColumn":53,"fix":"649"},{"ruleId":"558","severity":1,"message":"632","line":551,"column":88,"nodeType":"560","messageId":"587","endLine":551,"endColumn":90},{"ruleId":"558","severity":1,"message":"632","line":557,"column":72,"nodeType":"560","messageId":"587","endLine":557,"endColumn":74},{"ruleId":"558","severity":1,"message":"632","line":600,"column":84,"nodeType":"560","messageId":"587","endLine":600,"endColumn":86},{"ruleId":"558","severity":1,"message":"632","line":606,"column":68,"nodeType":"560","messageId":"587","endLine":606,"endColumn":70},{"ruleId":"558","severity":1,"message":"632","line":662,"column":84,"nodeType":"560","messageId":"587","endLine":662,"endColumn":86},{"ruleId":"558","severity":1,"message":"632","line":668,"column":68,"nodeType":"560","messageId":"587","endLine":668,"endColumn":70},{"ruleId":"558","severity":1,"message":"632","line":721,"column":90,"nodeType":"560","messageId":"587","endLine":721,"endColumn":92},{"ruleId":"558","severity":1,"message":"632","line":727,"column":74,"nodeType":"560","messageId":"587","endLine":727,"endColumn":76},{"ruleId":"528","severity":1,"message":"584","line":778,"column":5,"nodeType":"530","endLine":778,"endColumn":22,"suggestions":"650"},{"ruleId":"558","severity":1,"message":"586","line":794,"column":84,"nodeType":"560","messageId":"587","endLine":794,"endColumn":86},{"ruleId":"558","severity":1,"message":"586","line":809,"column":76,"nodeType":"560","messageId":"587","endLine":809,"endColumn":78},{"ruleId":"558","severity":1,"message":"586","line":852,"column":65,"nodeType":"560","messageId":"587","endLine":852,"endColumn":67},{"ruleId":"558","severity":1,"message":"559","line":861,"column":17,"nodeType":"651","messageId":"652","endLine":861,"endColumn":23},{"ruleId":"588","severity":1,"message":"589","line":919,"column":19,"nodeType":"590","endLine":919,"endColumn":59},{"ruleId":"593","severity":1,"message":"594","line":1082,"column":127,"nodeType":"595","messageId":"596","endLine":1082,"endColumn":128,"fix":"653"},{"ruleId":"593","severity":1,"message":"594","line":1089,"column":129,"nodeType":"595","messageId":"596","endLine":1089,"endColumn":130,"fix":"654"},{"ruleId":"593","severity":1,"message":"594","line":1544,"column":137,"nodeType":"595","messageId":"596","endLine":1544,"endColumn":138,"fix":"655"},{"ruleId":"593","severity":1,"message":"594","line":1551,"column":139,"nodeType":"595","messageId":"596","endLine":1551,"endColumn":140,"fix":"656"},{"ruleId":"593","severity":1,"message":"594","line":1835,"column":127,"nodeType":"595","messageId":"596","endLine":1835,"endColumn":128,"fix":"657"},{"ruleId":"593","severity":1,"message":"594","line":1842,"column":129,"nodeType":"595","messageId":"596","endLine":1842,"endColumn":130,"fix":"658"},{"ruleId":"562","severity":1,"message":"563","line":97,"column":18,"nodeType":"564","messageId":"565","endLine":97,"endColumn":19},{"ruleId":"562","severity":1,"message":"563","line":283,"column":7,"nodeType":"564","messageId":"565","endLine":283,"endColumn":8},{"ruleId":"523","severity":1,"message":"659","line":2,"column":5,"nodeType":"525","messageId":"526","endLine":2,"endColumn":24},{"ruleId":"523","severity":1,"message":"660","line":2,"column":26,"nodeType":"525","messageId":"526","endLine":2,"endColumn":43},{"ruleId":"523","severity":1,"message":"661","line":4,"column":8,"nodeType":"525","messageId":"526","endLine":4,"endColumn":20},{"ruleId":"523","severity":1,"message":"662","line":5,"column":10,"nodeType":"525","messageId":"526","endLine":5,"endColumn":16},{"ruleId":"663","severity":1,"message":"664","line":38,"column":17,"nodeType":"665","messageId":"666","endLine":38,"endColumn":29},{"ruleId":"663","severity":1,"message":"664","line":46,"column":17,"nodeType":"665","messageId":"666","endLine":46,"endColumn":29},{"ruleId":"667","severity":1,"message":"668","line":21,"column":68,"nodeType":"564","messageId":"666","endLine":21,"endColumn":70},{"ruleId":"667","severity":1,"message":"668","line":138,"column":29,"nodeType":"564","messageId":"666","endLine":138,"endColumn":31},{"ruleId":"535","severity":1,"message":"536","line":4,"column":4,"nodeType":"537","messageId":"538","endLine":6,"endColumn":5},{"ruleId":"523","severity":1,"message":"669","line":4,"column":10,"nodeType":"525","messageId":"526","endLine":4,"endColumn":12},{"ruleId":"523","severity":1,"message":"670","line":1,"column":17,"nodeType":"525","messageId":"526","endLine":1,"endColumn":25},{"ruleId":"523","severity":1,"message":"671","line":1,"column":27,"nodeType":"525","messageId":"526","endLine":1,"endColumn":36},{"ruleId":"523","severity":1,"message":"672","line":4,"column":8,"nodeType":"525","messageId":"526","endLine":4,"endColumn":16},{"ruleId":"523","severity":1,"message":"673","line":7,"column":8,"nodeType":"525","messageId":"526","endLine":7,"endColumn":16},{"ruleId":"523","severity":1,"message":"674","line":12,"column":31,"nodeType":"525","messageId":"526","endLine":12,"endColumn":55},{"ruleId":"523","severity":1,"message":"675","line":15,"column":8,"nodeType":"525","messageId":"526","endLine":15,"endColumn":18},{"ruleId":"523","severity":1,"message":"676","line":16,"column":7,"nodeType":"525","messageId":"526","endLine":16,"endColumn":16},{"ruleId":"523","severity":1,"message":"677","line":17,"column":8,"nodeType":"525","messageId":"526","endLine":17,"endColumn":19},{"ruleId":"558","severity":1,"message":"559","line":28,"column":73,"nodeType":"560","messageId":"561","endLine":28,"endColumn":75},{"ruleId":"528","severity":1,"message":"577","line":56,"column":3,"nodeType":"530","endLine":56,"endColumn":28,"suggestions":"678"},{"ruleId":"523","severity":1,"message":"679","line":57,"column":9,"nodeType":"525","messageId":"526","endLine":57,"endColumn":23},{"ruleId":"523","severity":1,"message":"680","line":1,"column":17,"nodeType":"525","messageId":"526","endLine":1,"endColumn":26},{"ruleId":"523","severity":1,"message":"567","line":6,"column":11,"nodeType":"525","messageId":"526","endLine":6,"endColumn":22},{"ruleId":"523","severity":1,"message":"681","line":1,"column":8,"nodeType":"525","messageId":"526","endLine":1,"endColumn":13},"no-native-reassign",["682"],"no-negated-in-lhs",["683"],"no-unused-vars","'SecureRoute' is defined but never used.","Identifier","unusedVar","'authState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'historyLink'. Either include it or remove the dependency array.","ArrayExpression",["684"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'getUserToken' is defined but never used.","'getLastInspectionData' is defined but never used.","'userRole' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["685"],"React Hook useEffect has missing dependencies: 'props.message' and 'props.type'. Either include them or remove the dependency array. If 'setMessage' needs the current value of 'props.message', you can also switch to useReducer instead of useState and read 'props.message' in the reducer.",["686"],"React Hook useEffect has missing dependencies: 'defaultTime' and 'dispatch'. Either include them or remove the dependency array.",["687"],"'useDispatch' is defined but never used.","'queryString' is assigned a value but never used.","'CITIES_GROUP' is defined but never used.","no-self-assign","'newHour' is assigned to itself.","selfAssignment","'currentPage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'setLocationType' is defined but never used.","'historyLink' is assigned a value but never used.","'imperfectionCount' is assigned a value but never used.","'allVideos' is assigned a value but never used.","'qcPendingStatusLength' is assigned a value but never used.","'qcPendingStatusAcceptableImp' is assigned a value but never used.","'otherWorkToBeDone' is assigned a value but never used.","'disableWhenAcceptableImperf' is assigned a value but never used.","'acceptableImp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array.",["688"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["689"],["690"],["691"],"React Hook useEffect has missing dependencies: 'confirmationForOnSubmitReject.comment', 'confirmationForOnSubmitReject.index', 'confirmationForOnSubmitReject.isConfirm', 'confirmationForOnSubmitReject.item', 'confirmationForOnSubmitReject.optional', and 'onSubmitReject'. Either include them or remove the dependency array.",["692"],"'qcActionResetHandler' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataKey' and 'updateCheckpointDataHandler'. Either include them or remove the dependency array.",["693"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"694","text":"695"},{"range":"696","text":"697"},{"range":"698","text":"699"},{"range":"700","text":"701"},{"range":"702","text":"695"},{"range":"703","text":"697"},"'dispatch' is assigned a value but never used.","'showHideToggler' is assigned a value but never used.","'setShowHideToggler' is assigned a value but never used.","'toggleLastInspection' is assigned a value but never used.","'setToggleLastInspection' is assigned a value but never used.","'mediaType' is assigned a value but never used.","'setMediaType' is assigned a value but never used.",["704"],["705"],["706"],["707"],"React Hook useEffect has missing dependencies: 'activeTab', 'props', and 'sideTabs'. Either include them or remove the dependency array.",["708"],{"range":"709","text":"710"},{"range":"711","text":"712"},"'AppointmentIdCell' is defined but never used.","React Hook useEffect has a missing dependency: 'props.qaListingCount'. Either include it or remove the dependency array. If 'setQaListingCount' needs the current value of 'props.qaListingCount', you can also switch to useReducer instead of useState and read 'props.qaListingCount' in the reducer.",["713"],"'timeFormat' is defined but never used.","'ReactToPrint' is defined but never used.","'render' is defined but never used.","'componentRef' is assigned a value but never used.","'workToBeDone' is assigned a value but never used.","'editWorkClicked' is assigned a value but never used.",["714"],"React Hook useEffect has missing dependencies: 'dispatch', 'estimateFields', 'historyLink', and 'props'. Either include them or remove the dependency array.",["715"],"'totalEstimate' is assigned a value but never used.","'labourCost' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'setOtherWorkToBeDoneField' is assigned a value but never used.","'editRefurbChoice' is assigned a value but never used.",["716"],["717"],["718"],["719"],["720"],["721"],"React Hook useEffect has missing dependencies: 'getConfirmation', 'noWorkToBeDone', and 'onFinalSubmitNoWorkToBeDone'. Either include them or remove the dependency array.",["722"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"723","text":"724"},{"range":"725","text":"724"},["726"],"ReturnStatement","expectedReturnValue",{"range":"727","text":"695"},{"range":"728","text":"697"},{"range":"729","text":"699"},{"range":"730","text":"701"},{"range":"731","text":"695"},{"range":"732","text":"697"},"'ACTION_COMMON_START' is defined but never used.","'ACTION_COMMON_END' is defined but never used.","'axiosService' is defined but never used.","'config' is defined but never used.","no-dupe-keys","Duplicate key 'isProcessing'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","'br' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Question' is defined but never used.","'carImage' is defined but never used.","'setTotalCheckpointsCount' is assigned a value but never used.","'magnifyImg' is assigned a value but never used.","'sliderRef' is assigned a value but never used.","'modalImages' is assigned a value but never used.",["733"],"'onAllocateOpen' is assigned a value but never used.","'Component' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"734","fix":"735"},{"desc":"736","fix":"737"},{"desc":"738","fix":"739"},{"desc":"740","fix":"741"},{"desc":"742","fix":"743"},{"desc":"744","fix":"745"},{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"750","fix":"751"},{"desc":"752","fix":"753"},[32747,32781],"\n                                .",[33177,33213],"\n                                  .",[60190,60234],"\n                                          .",[60690,60736],"\n                                            .",[74704,74738],[75134,75170],{"desc":"754","fix":"755"},{"desc":"744","fix":"756"},{"desc":"744","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},[25789,25837],"\n                                              .",[36589,36645],"\n                                                      .",{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"742","fix":"768"},{"desc":"754","fix":"769"},{"desc":"748","fix":"770"},{"desc":"744","fix":"771"},{"desc":"746","fix":"772"},{"desc":"750","fix":"773"},{"desc":"774","fix":"775"},[21227,21228],"",[21544,21545],{"desc":"752","fix":"776"},[44349,44383],[44779,44815],[78560,78604],[79060,79106],[99140,99174],[99570,99606],{"desc":"777","fix":"778"},"Update the dependencies array to be: [historyLink]",{"range":"779","text":"780"},"Update the dependencies array to be: [authState, historyLink, oktaAuth]",{"range":"781","text":"782"},"Update the dependencies array to be: [props.ShowAlert, props.message, props.type]",{"range":"783","text":"784"},"Update the dependencies array to be: [ShowAlert, defaultTime, dispatch]",{"range":"785","text":"786"},"Update the dependencies array to be: [dispatch, props, props.listingDetails]",{"range":"787","text":"788"},"Update the dependencies array to be: [props, props.listingDetails]",{"range":"789","text":"790"},"Update the dependencies array to be: [props, props.lastInspectionData]",{"range":"791","text":"792"},"Update the dependencies array to be: [props, props.masterData]",{"range":"793","text":"794"},"Update the dependencies array to be: [confirmationForOnSubmitReject.comment, confirmationForOnSubmitReject.index, confirmationForOnSubmitReject.isConfirm, confirmationForOnSubmitReject.item, confirmationForOnSubmitReject.optional, getConfirmation, onSubmitReject]",{"range":"795","text":"796"},"Update the dependencies array to be: [dataKey, getConfirmation, updateCheckpointDataHandler]",{"range":"797","text":"798"},"Update the dependencies array to be: [props, props.inspectionSummary]",{"range":"799","text":"800"},{"range":"801","text":"790"},{"range":"802","text":"790"},"Update the dependencies array to be: [props, props.listingDetails, props.masterData]",{"range":"803","text":"804"},"Update the dependencies array to be: [activeTab, filterednspectionData, props, sideTabs]",{"range":"805","text":"806"},"Update the dependencies array to be: [props.qaListing, props.qaListingCount]",{"range":"807","text":"808"},"Update the dependencies array to be: [props.masterData, props.listingDetails, props.listingDetailsUpdated, props]",{"range":"809","text":"810"},"Update the dependencies array to be: [dispatch, estimateFields, historyLink, props, props.listingDetails]",{"range":"811","text":"812"},{"range":"813","text":"788"},{"range":"814","text":"800"},{"range":"815","text":"794"},{"range":"816","text":"790"},{"range":"817","text":"792"},{"range":"818","text":"796"},"Update the dependencies array to be: [getConfirmation, noWorkToBeDone, onFinalSubmitNoWorkToBeDone]",{"range":"819","text":"820"},{"range":"821","text":"798"},"Update the dependencies array to be: [props, props.appointmentDetail]",{"range":"822","text":"823"},[543,545],"[historyLink]",[3494,3515],"[authState, historyLink, oktaAuth]",[710,727],"[props.ShowAlert, props.message, props.type]",[1059,1070],"[ShowAlert, defaultTime, dispatch]",[7764,7786],"[dispatch, props, props.listingDetails]",[8294,8316],"[props, props.listingDetails]",[8804,8830],"[props, props.lastInspectionData]",[8936,8954],"[props, props.masterData]",[9319,9336],"[confirmationForOnSubmitReject.comment, confirmationForOnSubmitReject.index, confirmationForOnSubmitReject.isConfirm, confirmationForOnSubmitReject.item, confirmationForOnSubmitReject.optional, getConfirmation, onSubmitReject]",[21146,21163],"[dataKey, getConfirmation, updateCheckpointDataHandler]",[2550,2575],"[props, props.inspectionSummary]",[4575,4597],[4841,4863],[6470,6510],"[props, props.listingDetails, props.masterData]",[10904,10927],"[activeTab, filterednspectionData, props, sideTabs]",[1725,1742],"[props.qaListing, props.qaListingCount]",[4920,4987],"[props.masterData, props.listingDetails, props.listingDetailsUpdated, props]",[7610,7632],"[dispatch, estimateFields, historyLink, props, props.listingDetails]",[7212,7234],[7361,7386],[7492,7510],[8017,8039],[8527,8553],[8920,8937],[9404,9439],"[getConfirmation, noWorkToBeDone, onFinalSubmitNoWorkToBeDone]",[30865,30882],[2227,2252],"[props, props.appointmentDetail]"]